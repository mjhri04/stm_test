
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08008eb0  08008eb0  00009eb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009290  08009290  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009290  08009290  0000a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009298  08009298  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009298  08009298  0000a298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800929c  0800929c  0000a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080092a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001d8  08009474  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08009474  0000b45c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ada9  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f73  00000000  00000000  00015fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00017f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000805  00000000  00000000  000189a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001814a  00000000  00000000  000191a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1c0  00000000  00000000  000312ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095137  00000000  00000000  0003e4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d35e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  000d362c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d7390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e98 	.word	0x08008e98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008e98 	.word	0x08008e98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b9a0 	b.w	8000ec4 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f83c 	bl	8000c08 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2lz>:
 8000b9c:	b538      	push	{r3, r4, r5, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	f7ff ff99 	bl	8000adc <__aeabi_dcmplt>
 8000baa:	b928      	cbnz	r0, 8000bb8 <__aeabi_d2lz+0x1c>
 8000bac:	4620      	mov	r0, r4
 8000bae:	4629      	mov	r1, r5
 8000bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bb4:	f000 b80a 	b.w	8000bcc <__aeabi_d2ulz>
 8000bb8:	4620      	mov	r0, r4
 8000bba:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000bbe:	f000 f805 	bl	8000bcc <__aeabi_d2ulz>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	bd38      	pop	{r3, r4, r5, pc}
 8000bca:	bf00      	nop

08000bcc <__aeabi_d2ulz>:
 8000bcc:	b5d0      	push	{r4, r6, r7, lr}
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <__aeabi_d2ulz+0x34>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	460f      	mov	r7, r1
 8000bd6:	f7ff fd0f 	bl	80005f8 <__aeabi_dmul>
 8000bda:	f7ff ffa7 	bl	8000b2c <__aeabi_d2uiz>
 8000bde:	4604      	mov	r4, r0
 8000be0:	f7ff fc90 	bl	8000504 <__aeabi_ui2d>
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <__aeabi_d2ulz+0x38>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f7ff fd06 	bl	80005f8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	4639      	mov	r1, r7
 8000bf4:	f7ff fb48 	bl	8000288 <__aeabi_dsub>
 8000bf8:	f7ff ff98 	bl	8000b2c <__aeabi_d2uiz>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8000c00:	3df00000 	.word	0x3df00000
 8000c04:	41f00000 	.word	0x41f00000

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ecc:	f000 fcee 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed0:	f000 f826 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed4:	f000 f91a 	bl	800110c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ed8:	f000 f8ea 	bl	80010b0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000edc:	f000 f880 	bl	8000fe0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // 센서 초기화 단계
  /*MPU6050_Init(); //초기화
  BMP280_Init(); //초기화
  */
  MPU6050_Init(IMU_SENSOR1_ADDR);
 8000ee0:	2068      	movs	r0, #104	@ 0x68
 8000ee2:	f004 ffcb 	bl	8005e7c <MPU6050_Init>
  MPU6050_Init(IMU_SENSOR2_ADDR);
 8000ee6:	2069      	movs	r0, #105	@ 0x69
 8000ee8:	f004 ffc8 	bl	8005e7c <MPU6050_Init>
  MPU6050_Init(IMU_SENSOR3_ADDR);
 8000eec:	206a      	movs	r0, #106	@ 0x6a
 8000eee:	f004 ffc5 	bl	8005e7c <MPU6050_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // IMU 데이터 읽기
	  Read_IMU_Data(IMU_SENSOR1_ADDR, accel, gyro);
 8000ef2:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <main+0x4c>)
 8000ef4:	4908      	ldr	r1, [pc, #32]	@ (8000f18 <main+0x50>)
 8000ef6:	2068      	movs	r0, #104	@ 0x68
 8000ef8:	f000 f930 	bl	800115c <Read_IMU_Data>
	  parse_IMU_data();
 8000efc:	f000 f9ea 	bl	80012d4 <parse_IMU_data>

	  // 압력센서 데이터 읽기
	  Read_Pressure_Sensors(pressure_values, NUM_SENSORS);
 8000f00:	2104      	movs	r1, #4
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <main+0x54>)
 8000f04:	f000 f99c 	bl	8001240 <Read_Pressure_Sensors>

	  HAL_Delay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f0c:	f000 fd40 	bl	8001990 <HAL_Delay>
  {
 8000f10:	bf00      	nop
 8000f12:	e7ee      	b.n	8000ef2 <main+0x2a>
 8000f14:	20000264 	.word	0x20000264
 8000f18:	2000025c 	.word	0x2000025c
 8000f1c:	200001f4 	.word	0x200001f4

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	@ 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	@ 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 ff27 	bl	8006d82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <SystemClock_Config+0xb8>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a22      	ldr	r2, [pc, #136]	@ (8000fd8 <SystemClock_Config+0xb8>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <SystemClock_Config+0xb8>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <SystemClock_Config+0xbc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <SystemClock_Config+0xbc>)
 8000f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <SystemClock_Config+0xbc>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fa0d 	bl	80053b4 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fa0:	f000 fa62 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa4:	230f      	movs	r3, #15
 8000fa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f004 fc70 	bl	80058a4 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fca:	f000 fa4d 	bl	8001468 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	@ 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	@ (80010a8 <MX_ADC1_Init+0xc8>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffe:	4b29      	ldr	r3, [pc, #164]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 800100c:	2201      	movs	r2, #1
 800100e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001010:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001020:	4a22      	ldr	r2, [pc, #136]	@ (80010ac <MX_ADC1_Init+0xcc>)
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 800102c:	2201      	movs	r2, #1
 800102e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 800103a:	2201      	movs	r2, #1
 800103c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103e:	4819      	ldr	r0, [pc, #100]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001040:	f000 fcca 	bl	80019d8 <HAL_ADC_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 fa0d 	bl	8001468 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001056:	2306      	movs	r3, #6
 8001058:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	4619      	mov	r1, r3
 800105e:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001060:	f000 ffac 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800106a:	f000 f9fd 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  for (int i = 0; i < NUM_SENSORS; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e00e      	b.n	8001092 <MX_ADC1_Init+0xb2>
      sConfig.Channel = ADC_CHANNEL_0 + i; // FSR 센서가 연결된 채널
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	607b      	str	r3, [r7, #4]
      sConfig.Rank = i + 1; // 각 채널의 순위 설정
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	3301      	adds	r3, #1
 800107c:	60bb      	str	r3, [r7, #8]
      sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES; // 샘플링 시간 설정
 800107e:	2301      	movs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
      HAL_ADC_ConfigChannel(&hadc1, &sConfig); // 채널 설정
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_ADC1_Init+0xc4>)
 8001088:	f000 ff98 	bl	8001fbc <HAL_ADC_ConfigChannel>
  for (int i = 0; i < NUM_SENSORS; i++) {
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	3301      	adds	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	2b03      	cmp	r3, #3
 8001096:	dded      	ble.n	8001074 <MX_ADC1_Init+0x94>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000026c 	.word	0x2000026c
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	@ (8001104 <MX_I2C1_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <MX_I2C1_Init+0x58>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010ee:	f001 fc53 	bl	8002998 <HAL_I2C_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f8:	f000 f9b6 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200002b4 	.word	0x200002b4
 8001104:	40005400 	.word	0x40005400
 8001108:	00061a80 	.word	0x00061a80

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_GPIO_Init+0x4c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	4a0f      	ldr	r2, [pc, #60]	@ (8001158 <MX_GPIO_Init+0x4c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	@ 0x30
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <MX_GPIO_Init+0x4c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_GPIO_Init+0x4c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a08      	ldr	r2, [pc, #32]	@ (8001158 <MX_GPIO_Init+0x4c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_GPIO_Init+0x4c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <Read_IMU_Data>:
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, 0x6B, 1, &Data, 1, 1000);
	}
}

*/
void Read_IMU_Data(uint8_t sensor_addr, int16_t *accel_data, int16_t *gyro_data) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b08c      	sub	sp, #48	@ 0x30
 8001160:	af04      	add	r7, sp, #16
 8001162:	4603      	mov	r3, r0
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	73fb      	strb	r3, [r7, #15]
    uint8_t data[14];
    // 가속도와 자이로 데이터 읽기 (MPU6050에서 가속도 레지스터 주소는 0x3B부터 시작)
    HAL_I2C_Mem_Read(&hi2c1, sensor_addr << 1, 0x3B, 1, data, 14, 1000);
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	b29b      	uxth	r3, r3
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	b299      	uxth	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	230e      	movs	r3, #14
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	223b      	movs	r2, #59	@ 0x3b
 8001186:	482a      	ldr	r0, [pc, #168]	@ (8001230 <Read_IMU_Data+0xd4>)
 8001188:	f001 fe5a 	bl	8002e40 <HAL_I2C_Mem_Read>

    // 가속도 데이터 처리
    accel_data[0] = (int16_t)(data[0] << 8 | data[1]);  // X축
 800118c:	7c3b      	ldrb	r3, [r7, #16]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	7c7b      	ldrb	r3, [r7, #17]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21a      	sxth	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	801a      	strh	r2, [r3, #0]
    accel_data[1] = (int16_t)(data[2] << 8 | data[3]);  // Y축
 800119e:	7cbb      	ldrb	r3, [r7, #18]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b219      	sxth	r1, r3
 80011a4:	7cfb      	ldrb	r3, [r7, #19]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	3302      	adds	r3, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b212      	sxth	r2, r2
 80011b0:	801a      	strh	r2, [r3, #0]
    accel_data[2] = (int16_t)(data[4] << 8 | data[5]);  // Z축
 80011b2:	7d3b      	ldrb	r3, [r7, #20]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b219      	sxth	r1, r3
 80011b8:	7d7b      	ldrb	r3, [r7, #21]
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3304      	adds	r3, #4
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b212      	sxth	r2, r2
 80011c4:	801a      	strh	r2, [r3, #0]

    // 자이로 데이터 처리
    gyro_data[0] = (int16_t)(data[8] << 8 | data[9]);   // X축
 80011c6:	7e3b      	ldrb	r3, [r7, #24]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7e7b      	ldrb	r3, [r7, #25]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	801a      	strh	r2, [r3, #0]
    gyro_data[1] = (int16_t)(data[10] << 8 | data[11]); // Y축
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	b219      	sxth	r1, r3
 80011de:	7efb      	ldrb	r3, [r7, #27]
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3302      	adds	r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	b212      	sxth	r2, r2
 80011ea:	801a      	strh	r2, [r3, #0]
    gyro_data[2] = (int16_t)(data[12] << 8 | data[13]); // Z축
 80011ec:	7f3b      	ldrb	r3, [r7, #28]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b219      	sxth	r1, r3
 80011f2:	7f7b      	ldrb	r3, [r7, #29]
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3304      	adds	r3, #4
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b212      	sxth	r2, r2
 80011fe:	801a      	strh	r2, [r3, #0]

    // IMU 데이터 가공하여 IMUarray에 저장 (예제)
    snprintf((char*)IMUarray, sizeof(IMUarray), "%d,%d,%d\r", accel[0], accel[1], accel[2]);
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <Read_IMU_Data+0xd8>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	4619      	mov	r1, r3
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <Read_IMU_Data+0xd8>)
 800120a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800120e:	461a      	mov	r2, r3
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <Read_IMU_Data+0xd8>)
 8001212:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	9200      	str	r2, [sp, #0]
 800121a:	460b      	mov	r3, r1
 800121c:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <Read_IMU_Data+0xdc>)
 800121e:	2120      	movs	r1, #32
 8001220:	4806      	ldr	r0, [pc, #24]	@ (800123c <Read_IMU_Data+0xe0>)
 8001222:	f005 fd37 	bl	8006c94 <sniprintf>
}
 8001226:	bf00      	nop
 8001228:	3720      	adds	r7, #32
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200002b4 	.word	0x200002b4
 8001234:	2000025c 	.word	0x2000025c
 8001238:	08008eb0 	.word	0x08008eb0
 800123c:	20000204 	.word	0x20000204

08001240 <Read_Pressure_Sensors>:

void Read_Pressure_Sensors(uint32_t *values, uint8_t num_sensors) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	HAL_ADC_Start(&hadc1);
 800124c:	4820      	ldr	r0, [pc, #128]	@ (80012d0 <Read_Pressure_Sensors+0x90>)
 800124e:	f000 fc07 	bl	8001a60 <HAL_ADC_Start>

	    // 모든 채널의 변환 요청
	    for (uint8_t i = 0; i < num_sensors; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	77fb      	strb	r3, [r7, #31]
 8001256:	e015      	b.n	8001284 <Read_Pressure_Sensors+0x44>
	        HAL_ADC_ConfigChannel(&hadc1, &(ADC_ChannelConfTypeDef){
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
	            .Channel = ADC_CHANNEL_0 + i, // FSR 센서가 연결된 채널
 8001266:	7ffb      	ldrb	r3, [r7, #31]
	        HAL_ADC_ConfigChannel(&hadc1, &(ADC_ChannelConfTypeDef){
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	2301      	movs	r3, #1
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	2301      	movs	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	4815      	ldr	r0, [pc, #84]	@ (80012d0 <Read_Pressure_Sensors+0x90>)
 800127a:	f000 fe9f 	bl	8001fbc <HAL_ADC_ConfigChannel>
	    for (uint8_t i = 0; i < num_sensors; i++) {
 800127e:	7ffb      	ldrb	r3, [r7, #31]
 8001280:	3301      	adds	r3, #1
 8001282:	77fb      	strb	r3, [r7, #31]
 8001284:	7ffa      	ldrb	r2, [r7, #31]
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3e5      	bcc.n	8001258 <Read_Pressure_Sensors+0x18>
	            .SamplingTime = ADC_SAMPLETIME_15CYCLES
	        });
	    }

	    // ADC 변환 완료 대기
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800128c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001290:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <Read_Pressure_Sensors+0x90>)
 8001292:	f000 fccc 	bl	8001c2e <HAL_ADC_PollForConversion>

	    // 압력 값 읽기
	    for (uint8_t i = 0; i < num_sensors; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	77bb      	strb	r3, [r7, #30]
 800129a:	e00e      	b.n	80012ba <Read_Pressure_Sensors+0x7a>
	        values[i] = HAL_ADC_GetValue(&hadc1);
 800129c:	7fbb      	ldrb	r3, [r7, #30]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	18d4      	adds	r4, r2, r3
 80012a4:	480a      	ldr	r0, [pc, #40]	@ (80012d0 <Read_Pressure_Sensors+0x90>)
 80012a6:	f000 fe5d 	bl	8001f64 <HAL_ADC_GetValue>
 80012aa:	4603      	mov	r3, r0
 80012ac:	6023      	str	r3, [r4, #0]
	        HAL_Delay(10);  // 센서 간 대기 시간 (필요에 따라 조정)
 80012ae:	200a      	movs	r0, #10
 80012b0:	f000 fb6e 	bl	8001990 <HAL_Delay>
	    for (uint8_t i = 0; i < num_sensors; i++) {
 80012b4:	7fbb      	ldrb	r3, [r7, #30]
 80012b6:	3301      	adds	r3, #1
 80012b8:	77bb      	strb	r3, [r7, #30]
 80012ba:	7fba      	ldrb	r2, [r7, #30]
 80012bc:	78fb      	ldrb	r3, [r7, #3]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d3ec      	bcc.n	800129c <Read_Pressure_Sensors+0x5c>
	    }

	    // ADC 종료
	    HAL_ADC_Stop(&hadc1);
 80012c2:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <Read_Pressure_Sensors+0x90>)
 80012c4:	f000 fc80 	bl	8001bc8 <HAL_ADC_Stop>
}
 80012c8:	bf00      	nop
 80012ca:	3724      	adds	r7, #36	@ 0x24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <parse_IMU_data>:


void parse_IMU_data(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
    int cnt0 = 0, cnt1 = 0, cnt2 = 0, cnt3 = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]

    // IMUarray 배열에서 ','를 기준으로 문자열 파싱
    for(int i = 0; i < 31; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e04e      	b.n	800138e <parse_IMU_data+0xba>
        if(IMUarray[i] == ',') {
 80012f0:	4a55      	ldr	r2, [pc, #340]	@ (8001448 <parse_IMU_data+0x174>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b2c      	cmp	r3, #44	@ 0x2c
 80012fa:	d110      	bne.n	800131e <parse_IMU_data+0x4a>
            if(cnt0 == 0){
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d103      	bne.n	800130a <parse_IMU_data+0x36>
                cnt1 = i + 1;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3301      	adds	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e005      	b.n	8001316 <parse_IMU_data+0x42>
            } else if (cnt0 == 1){
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d102      	bne.n	8001316 <parse_IMU_data+0x42>
                cnt2 = i + 1;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
            }
            cnt0++;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3301      	adds	r3, #1
 800131a:	61fb      	str	r3, [r7, #28]
 800131c:	e02a      	b.n	8001374 <parse_IMU_data+0xa0>
        } else {
            switch (cnt0) {
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d01d      	beq.n	8001360 <parse_IMU_data+0x8c>
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b02      	cmp	r3, #2
 8001328:	dc24      	bgt.n	8001374 <parse_IMU_data+0xa0>
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <parse_IMU_data+0x64>
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d00a      	beq.n	800134c <parse_IMU_data+0x78>
 8001336:	e01d      	b.n	8001374 <parse_IMU_data+0xa0>
                case 0: alpha[i] = IMUarray[i]; break;
 8001338:	4a43      	ldr	r2, [pc, #268]	@ (8001448 <parse_IMU_data+0x174>)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	7819      	ldrb	r1, [r3, #0]
 8001340:	4a42      	ldr	r2, [pc, #264]	@ (800144c <parse_IMU_data+0x178>)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4413      	add	r3, r2
 8001346:	460a      	mov	r2, r1
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e013      	b.n	8001374 <parse_IMU_data+0xa0>
                case 1: beta[i - cnt1] = IMUarray[i]; break;
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	493d      	ldr	r1, [pc, #244]	@ (8001448 <parse_IMU_data+0x174>)
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	440a      	add	r2, r1
 8001358:	7811      	ldrb	r1, [r2, #0]
 800135a:	4a3d      	ldr	r2, [pc, #244]	@ (8001450 <parse_IMU_data+0x17c>)
 800135c:	54d1      	strb	r1, [r2, r3]
 800135e:	e009      	b.n	8001374 <parse_IMU_data+0xa0>
                case 2: gamm[i - cnt2] = IMUarray[i]; break;
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4938      	ldr	r1, [pc, #224]	@ (8001448 <parse_IMU_data+0x174>)
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	440a      	add	r2, r1
 800136c:	7811      	ldrb	r1, [r2, #0]
 800136e:	4a39      	ldr	r2, [pc, #228]	@ (8001454 <parse_IMU_data+0x180>)
 8001370:	54d1      	strb	r1, [r2, r3]
 8001372:	bf00      	nop
            }
        }
        if(IMUarray[i] == '\r'){
 8001374:	4a34      	ldr	r2, [pc, #208]	@ (8001448 <parse_IMU_data+0x174>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b0d      	cmp	r3, #13
 800137e:	d103      	bne.n	8001388 <parse_IMU_data+0xb4>
            cnt3 = i + 1;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
            break;
 8001386:	e005      	b.n	8001394 <parse_IMU_data+0xc0>
    for(int i = 0; i < 31; i++) {
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b1e      	cmp	r3, #30
 8001392:	ddad      	ble.n	80012f0 <parse_IMU_data+0x1c>
        }
    }

    // 문자열이 부족한 경우 나머지 0으로 채우기
    for (int j = cnt1 - 1; j < 8; j++) alpha[j] = '0';
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	3b01      	subs	r3, #1
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	e007      	b.n	80013ac <parse_IMU_data+0xd8>
 800139c:	4a2b      	ldr	r2, [pc, #172]	@ (800144c <parse_IMU_data+0x178>)
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	4413      	add	r3, r2
 80013a2:	2230      	movs	r2, #48	@ 0x30
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3301      	adds	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	ddf4      	ble.n	800139c <parse_IMU_data+0xc8>
    for (int k = cnt2 - cnt1; k < 8; k++) beta[k] = '0';
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	e007      	b.n	80013cc <parse_IMU_data+0xf8>
 80013bc:	4a24      	ldr	r2, [pc, #144]	@ (8001450 <parse_IMU_data+0x17c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	2230      	movs	r2, #48	@ 0x30
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3301      	adds	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b07      	cmp	r3, #7
 80013d0:	ddf4      	ble.n	80013bc <parse_IMU_data+0xe8>
    for (int l = cnt3 - cnt2; l < 8; l++) gamm[l] = '0';
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	e007      	b.n	80013ec <parse_IMU_data+0x118>
 80013dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <parse_IMU_data+0x180>)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	4413      	add	r3, r2
 80013e2:	2230      	movs	r2, #48	@ 0x30
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	ddf4      	ble.n	80013dc <parse_IMU_data+0x108>

    // 문자열을 실수로 변환
    roll = strtod(alpha, &pos);
 80013f2:	4919      	ldr	r1, [pc, #100]	@ (8001458 <parse_IMU_data+0x184>)
 80013f4:	4815      	ldr	r0, [pc, #84]	@ (800144c <parse_IMU_data+0x178>)
 80013f6:	f005 fb7f 	bl	8006af8 <strtod>
 80013fa:	4603      	mov	r3, r0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f891 	bl	8000524 <__aeabi_i2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4915      	ldr	r1, [pc, #84]	@ (800145c <parse_IMU_data+0x188>)
 8001408:	e9c1 2300 	strd	r2, r3, [r1]
    pitch = strtod(beta, &pos);
 800140c:	4912      	ldr	r1, [pc, #72]	@ (8001458 <parse_IMU_data+0x184>)
 800140e:	4810      	ldr	r0, [pc, #64]	@ (8001450 <parse_IMU_data+0x17c>)
 8001410:	f005 fb72 	bl	8006af8 <strtod>
 8001414:	4603      	mov	r3, r0
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f884 	bl	8000524 <__aeabi_i2d>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	490f      	ldr	r1, [pc, #60]	@ (8001460 <parse_IMU_data+0x18c>)
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
    yaw = strtod(gamm, &pos);
 8001426:	490c      	ldr	r1, [pc, #48]	@ (8001458 <parse_IMU_data+0x184>)
 8001428:	480a      	ldr	r0, [pc, #40]	@ (8001454 <parse_IMU_data+0x180>)
 800142a:	f005 fb65 	bl	8006af8 <strtod>
 800142e:	4603      	mov	r3, r0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f877 	bl	8000524 <__aeabi_i2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	490a      	ldr	r1, [pc, #40]	@ (8001464 <parse_IMU_data+0x190>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000204 	.word	0x20000204
 800144c:	20000224 	.word	0x20000224
 8001450:	2000022c 	.word	0x2000022c
 8001454:	20000234 	.word	0x20000234
 8001458:	20000258 	.word	0x20000258
 800145c:	20000240 	.word	0x20000240
 8001460:	20000248 	.word	0x20000248
 8001464:	20000250 	.word	0x20000250

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_MspInit+0x4c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <HAL_MspInit+0x4c>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_MspInit+0x4c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	4a08      	ldr	r2, [pc, #32]	@ (80014c0 <HAL_MspInit+0x4c>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800

080014c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_ADC_MspInit+0x8c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d12f      	bne.n	8001546 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_ADC_MspInit+0x90>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_ADC_MspInit+0x90>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_ADC_MspInit+0x90>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <HAL_ADC_MspInit+0x90>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a12      	ldr	r2, [pc, #72]	@ (8001554 <HAL_ADC_MspInit+0x90>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <HAL_ADC_MspInit+0x90>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800151e:	230f      	movs	r3, #15
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001522:	2303      	movs	r3, #3
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4809      	ldr	r0, [pc, #36]	@ (8001558 <HAL_ADC_MspInit+0x94>)
 8001532:	f001 f8ad 	bl	8002690 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2012      	movs	r0, #18
 800153c:	f001 f841 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001540:	2012      	movs	r0, #18
 8001542:	f001 f85a 	bl	80025fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <HAL_I2C_MspInit+0xa4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d13b      	bne.n	80015f6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_I2C_MspInit+0xa8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <HAL_I2C_MspInit+0xa8>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_I2C_MspInit+0xa8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800159a:	23c0      	movs	r3, #192	@ 0xc0
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	2312      	movs	r3, #18
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015aa:	2304      	movs	r3, #4
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4814      	ldr	r0, [pc, #80]	@ (8001608 <HAL_I2C_MspInit+0xac>)
 80015b6:	f001 f86b 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_I2C_MspInit+0xa8>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <HAL_I2C_MspInit+0xa8>)
 80015c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_I2C_MspInit+0xa8>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	201f      	movs	r0, #31
 80015dc:	f000 fff1 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015e0:	201f      	movs	r0, #31
 80015e2:	f001 f80a 	bl	80025fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2020      	movs	r0, #32
 80015ec:	f000 ffe9 	bl	80025c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015f0:	2020      	movs	r0, #32
 80015f2:	f001 f802 	bl	80025fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	@ 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005400 	.word	0x40005400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020400 	.word	0x40020400

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f975 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <ADC_IRQHandler+0x10>)
 8001672:	f000 fb67 	bl	8001d44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000026c 	.word	0x2000026c

08001680 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <I2C1_EV_IRQHandler+0x10>)
 8001686:	f001 fe0d 	bl	80032a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200002b4 	.word	0x200002b4

08001694 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <I2C1_ER_IRQHandler+0x10>)
 800169a:	f001 ff56 	bl	800354a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200002b4 	.word	0x200002b4

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c2:	f005 fbbf 	bl	8006e44 <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_exit>:

void _exit (int status)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe7 	bl	80016b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <_exit+0x12>

080016ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e00a      	b.n	8001716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001700:	f3af 8000 	nop.w
 8001704:	4601      	mov	r1, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf0      	blt.n	8001700 <_read+0x12>
  }

  return len;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e009      	b.n	800174e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	429a      	cmp	r2, r3
 8001754:	dbf1      	blt.n	800173a <_write+0x12>
  }
  return len;
 8001756:	687b      	ldr	r3, [r7, #4]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_close>:

int _close(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001768:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001788:	605a      	str	r2, [r3, #4]
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <_isatty>:

int _isatty(int file)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	@ (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f005 fb24 	bl	8006e44 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	@ (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20018000 	.word	0x20018000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000308 	.word	0x20000308
 8001830:	20000460 	.word	0x20000460

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001890 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	@ (80018a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001886:	f005 fae3 	bl	8006e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7ff fb1d 	bl	8000ec8 <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001890:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800189c:	080092a0 	.word	0x080092a0
  ldr r2, =_sbss
 80018a0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80018a4:	2000045c 	.word	0x2000045c

080018a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <DMA1_Stream0_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018b0:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <HAL_Init+0x40>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <HAL_Init+0x40>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_Init+0x40>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 fe69 	bl	80025ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fdc8 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fe81 	bl	8002616 <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800192c:	f000 fe49 	bl	80025c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008
 8001974:	2000030c 	.word	0x2000030c

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	@ (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000030c 	.word	0x2000030c

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff ffee 	bl	8001978 <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffde 	bl	8001978 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e033      	b.n	8001a56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fd64 	bl	80014c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a1e:	f023 0302 	bic.w	r3, r3, #2
 8001a22:	f043 0202 	orr.w	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 fbe8 	bl	8002200 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	f043 0201 	orr.w	r2, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a46:	e001      	b.n	8001a4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_ADC_Start+0x1a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e097      	b.n	8001baa <HAL_ADC_Start+0x14a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d018      	beq.n	8001ac2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa0:	4b45      	ldr	r3, [pc, #276]	@ (8001bb8 <HAL_ADC_Start+0x158>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a45      	ldr	r2, [pc, #276]	@ (8001bbc <HAL_ADC_Start+0x15c>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9a      	lsrs	r2, r3, #18
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f9      	bne.n	8001ab6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d15f      	bne.n	8001b90 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001afa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b0e:	d106      	bne.n	8001b1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b14:	f023 0206 	bic.w	r2, r3, #6
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b1c:	e002      	b.n	8001b24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b2c:	4b24      	ldr	r3, [pc, #144]	@ (8001bc0 <HAL_ADC_Start+0x160>)
 8001b2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b38:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10f      	bne.n	8001b66 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d129      	bne.n	8001ba8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e020      	b.n	8001ba8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a16      	ldr	r2, [pc, #88]	@ (8001bc4 <HAL_ADC_Start+0x164>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d11b      	bne.n	8001ba8 <HAL_ADC_Start+0x148>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d114      	bne.n	8001ba8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f043 0210 	orr.w	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83
 8001bc0:	40012300 	.word	0x40012300
 8001bc4:	40012000 	.word	0x40012000

08001bc8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Stop+0x16>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e021      	b.n	8001c22 <HAL_ADC_Stop+0x5a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c4a:	d113      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c5a:	d10b      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	f043 0220 	orr.w	r2, r3, #32
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e063      	b.n	8001d3c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c74:	f7ff fe80 	bl	8001978 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c7a:	e021      	b.n	8001cc0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c82:	d01d      	beq.n	8001cc0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_ADC_PollForConversion+0x6c>
 8001c8a:	f7ff fe75 	bl	8001978 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d212      	bcs.n	8001cc0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d00b      	beq.n	8001cc0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e03d      	b.n	8001d3c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d1d6      	bne.n	8001c7c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0212 	mvn.w	r2, #18
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d123      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d11f      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d00:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d111      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d049      	beq.n	8001e0e <HAL_ADC_IRQHandler+0xca>
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d046      	beq.n	8001e0e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d12b      	bne.n	8001dfe <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d127      	bne.n	8001dfe <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d006      	beq.n	8001dca <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d119      	bne.n	8001dfe <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0220 	bic.w	r2, r2, #32
 8001dd8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f8bd 	bl	8001f7e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0212 	mvn.w	r2, #18
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d057      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x190>
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d054      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d139      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e56:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d12b      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d124      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d11d      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d119      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e9e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fa97 	bl	80023f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 020c 	mvn.w	r2, #12
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d017      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x1d6>
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d014      	beq.n	8001f1a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10d      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f841 	bl	8001f92 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0201 	mvn.w	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f28:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d015      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x218>
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d012      	beq.n	8001f5c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3a:	f043 0202 	orr.w	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0220 	mvn.w	r2, #32
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f82a 	bl	8001fa6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f06f 0220 	mvn.w	r2, #32
 8001f5a:	601a      	str	r2, [r3, #0]
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1c>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e105      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x228>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d925      	bls.n	8002034 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68d9      	ldr	r1, [r3, #12]
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3b1e      	subs	r3, #30
 8001ffe:	2207      	movs	r2, #7
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43da      	mvns	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	400a      	ands	r2, r1
 800200c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68d9      	ldr	r1, [r3, #12]
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	4603      	mov	r3, r0
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	4403      	add	r3, r0
 8002026:	3b1e      	subs	r3, #30
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	e022      	b.n	800207a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6919      	ldr	r1, [r3, #16]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	b29b      	uxth	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	2207      	movs	r2, #7
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	400a      	ands	r2, r1
 8002056:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4618      	mov	r0, r3
 800206a:	4603      	mov	r3, r0
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4403      	add	r3, r0
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b06      	cmp	r3, #6
 8002080:	d824      	bhi.n	80020cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	3b05      	subs	r3, #5
 8002094:	221f      	movs	r2, #31
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	400a      	ands	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	3b05      	subs	r3, #5
 80020be:	fa00 f203 	lsl.w	r2, r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ca:	e04c      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b0c      	cmp	r3, #12
 80020d2:	d824      	bhi.n	800211e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	3b23      	subs	r3, #35	@ 0x23
 80020e6:	221f      	movs	r2, #31
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	3b23      	subs	r3, #35	@ 0x23
 8002110:	fa00 f203 	lsl.w	r2, r0, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
 800211c:	e023      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	3b41      	subs	r3, #65	@ 0x41
 8002130:	221f      	movs	r2, #31
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	400a      	ands	r2, r1
 800213e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3b41      	subs	r3, #65	@ 0x41
 800215a:	fa00 f203 	lsl.w	r2, r0, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002166:	4b22      	ldr	r3, [pc, #136]	@ (80021f0 <HAL_ADC_ConfigChannel+0x234>)
 8002168:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a21      	ldr	r2, [pc, #132]	@ (80021f4 <HAL_ADC_ConfigChannel+0x238>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d109      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1cc>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b12      	cmp	r3, #18
 800217a:	d105      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_ADC_ConfigChannel+0x238>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d123      	bne.n	80021da <HAL_ADC_ConfigChannel+0x21e>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d003      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x1e6>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b11      	cmp	r3, #17
 80021a0:	d11b      	bne.n	80021da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d111      	bne.n	80021da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <HAL_ADC_ConfigChannel+0x23c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_ADC_ConfigChannel+0x240>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	0c9a      	lsrs	r2, r3, #18
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021cc:	e002      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f9      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40012300 	.word	0x40012300
 80021f4:	40012000 	.word	0x40012000
 80021f8:	20000000 	.word	0x20000000
 80021fc:	431bde83 	.word	0x431bde83

08002200 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002208:	4b79      	ldr	r3, [pc, #484]	@ (80023f0 <ADC_Init+0x1f0>)
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	431a      	orrs	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002234:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	021a      	lsls	r2, r3, #8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002258:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800227a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6899      	ldr	r1, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002292:	4a58      	ldr	r2, [pc, #352]	@ (80023f4 <ADC_Init+0x1f4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	e00f      	b.n	80022fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0202 	bic.w	r2, r2, #2
 800230c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7e1b      	ldrb	r3, [r3, #24]
 8002318:	005a      	lsls	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800233a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800234a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6859      	ldr	r1, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002356:	3b01      	subs	r3, #1
 8002358:	035a      	lsls	r2, r3, #13
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	e007      	b.n	8002374 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002372:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	3b01      	subs	r3, #1
 8002390:	051a      	lsls	r2, r3, #20
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80023a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6899      	ldr	r1, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023b6:	025a      	lsls	r2, r3, #9
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6899      	ldr	r1, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	029a      	lsls	r2, r3, #10
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	609a      	str	r2, [r3, #8]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40012300 	.word	0x40012300
 80023f4:	0f000001 	.word	0x0f000001

080023f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800243c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243e:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <__NVIC_SetPriorityGrouping+0x44>)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	60d3      	str	r3, [r2, #12]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__NVIC_GetPriorityGrouping+0x18>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	f003 0307 	and.w	r3, r3, #7
}
 8002462:	4618      	mov	r0, r3
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	db0b      	blt.n	800249a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	f003 021f 	and.w	r2, r3, #31
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <__NVIC_EnableIRQ+0x38>)
 800248a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2001      	movs	r0, #1
 8002492:	fa00 f202 	lsl.w	r2, r0, r2
 8002496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000e100 	.word	0xe000e100

080024ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	6039      	str	r1, [r7, #0]
 80024b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	db0a      	blt.n	80024d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	490c      	ldr	r1, [pc, #48]	@ (80024f8 <__NVIC_SetPriority+0x4c>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	0112      	lsls	r2, r2, #4
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	440b      	add	r3, r1
 80024d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d4:	e00a      	b.n	80024ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4908      	ldr	r1, [pc, #32]	@ (80024fc <__NVIC_SetPriority+0x50>)
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3b04      	subs	r3, #4
 80024e4:	0112      	lsls	r2, r2, #4
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	440b      	add	r3, r1
 80024ea:	761a      	strb	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000e100 	.word	0xe000e100
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f1c3 0307 	rsb	r3, r3, #7
 800251a:	2b04      	cmp	r3, #4
 800251c:	bf28      	it	cs
 800251e:	2304      	movcs	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3304      	adds	r3, #4
 8002526:	2b06      	cmp	r3, #6
 8002528:	d902      	bls.n	8002530 <NVIC_EncodePriority+0x30>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	3b03      	subs	r3, #3
 800252e:	e000      	b.n	8002532 <NVIC_EncodePriority+0x32>
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43da      	mvns	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	401a      	ands	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	fa01 f303 	lsl.w	r3, r1, r3
 8002552:	43d9      	mvns	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	4313      	orrs	r3, r2
         );
}
 800255a:	4618      	mov	r0, r3
 800255c:	3724      	adds	r7, #36	@ 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
	...

08002568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002578:	d301      	bcc.n	800257e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257a:	2301      	movs	r3, #1
 800257c:	e00f      	b.n	800259e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <SysTick_Config+0x40>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3b01      	subs	r3, #1
 8002584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002586:	210f      	movs	r1, #15
 8002588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800258c:	f7ff ff8e 	bl	80024ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002590:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <SysTick_Config+0x40>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002596:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <SysTick_Config+0x40>)
 8002598:	2207      	movs	r2, #7
 800259a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	e000e010 	.word	0xe000e010

080025ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff29 	bl	800240c <__NVIC_SetPriorityGrouping>
}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b086      	sub	sp, #24
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	4603      	mov	r3, r0
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d4:	f7ff ff3e 	bl	8002454 <__NVIC_GetPriorityGrouping>
 80025d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	6978      	ldr	r0, [r7, #20]
 80025e0:	f7ff ff8e 	bl	8002500 <NVIC_EncodePriority>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff5d 	bl	80024ac <__NVIC_SetPriority>
}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff31 	bl	8002470 <__NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff ffa2 	bl	8002568 <SysTick_Config>
 8002624:	4603      	mov	r3, r0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d004      	beq.n	800264c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e00c      	b.n	8002666 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2205      	movs	r2, #5
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0201 	bic.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002680:	b2db      	uxtb	r3, r3
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	@ 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e159      	b.n	8002960 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026ac:	2201      	movs	r2, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8148 	bne.w	800295a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d005      	beq.n	80026e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d130      	bne.n	8002744 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002718:	2201      	movs	r2, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 0201 	and.w	r2, r3, #1
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b03      	cmp	r3, #3
 800274e:	d017      	beq.n	8002780 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a2 	beq.w	800295a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b57      	ldr	r3, [pc, #348]	@ (8002978 <HAL_GPIO_Init+0x2e8>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <HAL_GPIO_Init+0x2e8>)
 8002820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002824:	6453      	str	r3, [r2, #68]	@ 0x44
 8002826:	4b54      	ldr	r3, [pc, #336]	@ (8002978 <HAL_GPIO_Init+0x2e8>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002832:	4a52      	ldr	r2, [pc, #328]	@ (800297c <HAL_GPIO_Init+0x2ec>)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a49      	ldr	r2, [pc, #292]	@ (8002980 <HAL_GPIO_Init+0x2f0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d019      	beq.n	8002892 <HAL_GPIO_Init+0x202>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a48      	ldr	r2, [pc, #288]	@ (8002984 <HAL_GPIO_Init+0x2f4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x1fe>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a47      	ldr	r2, [pc, #284]	@ (8002988 <HAL_GPIO_Init+0x2f8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x1fa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a46      	ldr	r2, [pc, #280]	@ (800298c <HAL_GPIO_Init+0x2fc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x1f6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a45      	ldr	r2, [pc, #276]	@ (8002990 <HAL_GPIO_Init+0x300>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x1f2>
 800287e:	2304      	movs	r3, #4
 8002880:	e008      	b.n	8002894 <HAL_GPIO_Init+0x204>
 8002882:	2307      	movs	r3, #7
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x204>
 8002886:	2303      	movs	r3, #3
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x204>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x204>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x204>
 8002892:	2300      	movs	r3, #0
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a4:	4935      	ldr	r1, [pc, #212]	@ (800297c <HAL_GPIO_Init+0x2ec>)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028b2:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <HAL_GPIO_Init+0x304>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002994 <HAL_GPIO_Init+0x304>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_GPIO_Init+0x304>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002900:	4a24      	ldr	r2, [pc, #144]	@ (8002994 <HAL_GPIO_Init+0x304>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002906:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <HAL_GPIO_Init+0x304>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800292a:	4a1a      	ldr	r2, [pc, #104]	@ (8002994 <HAL_GPIO_Init+0x304>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002930:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <HAL_GPIO_Init+0x304>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002954:	4a0f      	ldr	r2, [pc, #60]	@ (8002994 <HAL_GPIO_Init+0x304>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3301      	adds	r3, #1
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2b0f      	cmp	r3, #15
 8002964:	f67f aea2 	bls.w	80026ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40013800 	.word	0x40013800
 8002980:	40020000 	.word	0x40020000
 8002984:	40020400 	.word	0x40020400
 8002988:	40020800 	.word	0x40020800
 800298c:	40020c00 	.word	0x40020c00
 8002990:	40021000 	.word	0x40021000
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e12b      	b.n	8002c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fdcc 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	@ 0x24
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029fc:	f003 f90a 	bl	8005c14 <HAL_RCC_GetPCLK1Freq>
 8002a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a81      	ldr	r2, [pc, #516]	@ (8002c0c <HAL_I2C_Init+0x274>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d807      	bhi.n	8002a1c <HAL_I2C_Init+0x84>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a80      	ldr	r2, [pc, #512]	@ (8002c10 <HAL_I2C_Init+0x278>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e006      	b.n	8002a2a <HAL_I2C_Init+0x92>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c14 <HAL_I2C_Init+0x27c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0e7      	b.n	8002c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a78      	ldr	r2, [pc, #480]	@ (8002c18 <HAL_I2C_Init+0x280>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9b      	lsrs	r3, r3, #18
 8002a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a6a      	ldr	r2, [pc, #424]	@ (8002c0c <HAL_I2C_Init+0x274>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d802      	bhi.n	8002a6c <HAL_I2C_Init+0xd4>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	e009      	b.n	8002a80 <HAL_I2C_Init+0xe8>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	4a69      	ldr	r2, [pc, #420]	@ (8002c1c <HAL_I2C_Init+0x284>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	3301      	adds	r3, #1
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	495c      	ldr	r1, [pc, #368]	@ (8002c0c <HAL_I2C_Init+0x274>)
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d819      	bhi.n	8002ad4 <HAL_I2C_Init+0x13c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e59      	subs	r1, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_I2C_Init+0x138>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e59      	subs	r1, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ace:	e051      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e04f      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d111      	bne.n	8002b00 <HAL_I2C_Init+0x168>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	440b      	add	r3, r1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e012      	b.n	8002b26 <HAL_I2C_Init+0x18e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	0099      	lsls	r1, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Init+0x196>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e022      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_I2C_Init+0x1bc>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e58      	subs	r0, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	440b      	add	r3, r1
 8002b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b52:	e00f      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	6809      	ldr	r1, [r1, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6911      	ldr	r1, [r2, #16]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	4311      	orrs	r1, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	000186a0 	.word	0x000186a0
 8002c10:	001e847f 	.word	0x001e847f
 8002c14:	003d08ff 	.word	0x003d08ff
 8002c18:	431bde83 	.word	0x431bde83
 8002c1c:	10624dd3 	.word	0x10624dd3

08002c20 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c32:	2b80      	cmp	r3, #128	@ 0x80
 8002c34:	d103      	bne.n	8002c3e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  }
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	813b      	strh	r3, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c66:	f7fe fe87 	bl	8001978 <HAL_GetTick>
 8002c6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	f040 80d9 	bne.w	8002e2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2319      	movs	r3, #25
 8002c80:	2201      	movs	r2, #1
 8002c82:	496d      	ldr	r1, [pc, #436]	@ (8002e38 <HAL_I2C_Mem_Write+0x1ec>)
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f002 f911 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	e0cc      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Mem_Write+0x56>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0c5      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d007      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2221      	movs	r2, #33	@ 0x21
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a4d      	ldr	r2, [pc, #308]	@ (8002e3c <HAL_I2C_Mem_Write+0x1f0>)
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d0a:	88f8      	ldrh	r0, [r7, #6]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	4603      	mov	r3, r0
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f001 fea0 	bl	8004a60 <I2C_RequestMemoryWrite>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d052      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e081      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f002 f9d6 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06b      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d11b      	bne.n	8002dcc <HAL_I2C_Mem_Write+0x180>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d017      	beq.n	8002dcc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1aa      	bne.n	8002d2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f002 f9c9 	bl	8005170 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e016      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e000      	b.n	8002e2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	00100002 	.word	0x00100002
 8002e3c:	ffff0000 	.word	0xffff0000

08002e40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	@ 0x30
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	817b      	strh	r3, [r7, #10]
 8002e52:	460b      	mov	r3, r1
 8002e54:	813b      	strh	r3, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e5a:	f7fe fd8d 	bl	8001978 <HAL_GetTick>
 8002e5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	f040 8214 	bne.w	8003296 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	2319      	movs	r3, #25
 8002e74:	2201      	movs	r2, #1
 8002e76:	497b      	ldr	r1, [pc, #492]	@ (8003064 <HAL_I2C_Mem_Read+0x224>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f002 f817 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e84:	2302      	movs	r3, #2
 8002e86:	e207      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x56>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e200      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d007      	beq.n	8002ebc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2222      	movs	r2, #34	@ 0x22
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2240      	movs	r2, #64	@ 0x40
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a5b      	ldr	r2, [pc, #364]	@ (8003068 <HAL_I2C_Mem_Read+0x228>)
 8002efc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002efe:	88f8      	ldrh	r0, [r7, #6]
 8002f00:	893a      	ldrh	r2, [r7, #8]
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f001 fe3c 	bl	8004b8c <I2C_RequestMemoryRead>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e1bc      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	623b      	str	r3, [r7, #32]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e190      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d11b      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e170      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d11b      	bne.n	8002fce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	e150      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fe4:	e144      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	f200 80f1 	bhi.w	80031d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d123      	bne.n	8003040 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f002 f931 	bl	8005264 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e145      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800303e:	e117      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	d14e      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800304e:	2200      	movs	r2, #0
 8003050:	4906      	ldr	r1, [pc, #24]	@ (800306c <HAL_I2C_Mem_Read+0x22c>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f001 ff2a 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e11a      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
 8003062:	bf00      	nop
 8003064:	00100002 	.word	0x00100002
 8003068:	ffff0000 	.word	0xffff0000
 800306c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030e4:	e0c4      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	496c      	ldr	r1, [pc, #432]	@ (80032a0 <HAL_I2C_Mem_Read+0x460>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f001 fedb 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cb      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800310e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	2200      	movs	r2, #0
 800314a:	4955      	ldr	r1, [pc, #340]	@ (80032a0 <HAL_I2C_Mem_Read+0x460>)
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f001 fead 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e09d      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031d0:	e04e      	b.n	8003270 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f002 f844 	bl	8005264 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e058      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f003 0304 	and.w	r3, r3, #4
 8003222:	2b04      	cmp	r3, #4
 8003224:	d124      	bne.n	8003270 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	2b03      	cmp	r3, #3
 800322c:	d107      	bne.n	800323e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800323c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f aeb6 	bne.w	8002fe6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	e000      	b.n	8003298 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
  }
}
 8003298:	4618      	mov	r0, r3
 800329a:	3728      	adds	r7, #40	@ 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	00010004 	.word	0x00010004

080032a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032c4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032cc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d003      	beq.n	80032dc <HAL_I2C_EV_IRQHandler+0x38>
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b40      	cmp	r3, #64	@ 0x40
 80032d8:	f040 80b1 	bne.w	800343e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_I2C_EV_IRQHandler+0x6e>
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80032fc:	d003      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0x62>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003304:	d101      	bne.n	800330a <HAL_I2C_EV_IRQHandler+0x66>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_I2C_EV_IRQHandler+0x68>
 800330a:	2300      	movs	r3, #0
 800330c:	2b01      	cmp	r3, #1
 800330e:	f000 8114 	beq.w	800353a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x90>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f002 f828 	bl	800537c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fd7a 	bl	8003e26 <I2C_Master_SB>
 8003332:	e083      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_I2C_EV_IRQHandler+0xac>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003344:	2b00      	cmp	r3, #0
 8003346:	d003      	beq.n	8003350 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fdf2 	bl	8003f32 <I2C_Master_ADD10>
 800334e:	e075      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_I2C_EV_IRQHandler+0xc8>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fe0e 	bl	8003f86 <I2C_Master_ADDR>
 800336a:	e067      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003384:	f000 80db 	beq.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00d      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x10a>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_I2C_EV_IRQHandler+0x10a>
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d103      	bne.n	80033ae <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f9d6 	bl	8003758 <I2C_MasterTransmit_TXE>
 80033ac:	e046      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80c2 	beq.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80bc 	beq.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033c6:	7bbb      	ldrb	r3, [r7, #14]
 80033c8:	2b21      	cmp	r3, #33	@ 0x21
 80033ca:	d103      	bne.n	80033d4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fa5f 	bl	8003890 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033d2:	e0b4      	b.n	800353e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b40      	cmp	r3, #64	@ 0x40
 80033d8:	f040 80b1 	bne.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 facd 	bl	800397c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033e2:	e0ac      	b.n	800353e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f2:	f000 80a4 	beq.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x178>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <HAL_I2C_EV_IRQHandler+0x178>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d103      	bne.n	800341c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb49 	bl	8003aac <I2C_MasterReceive_RXNE>
 800341a:	e00f      	b.n	800343c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 808b 	beq.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8085 	beq.w	800353e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fc01 	bl	8003c3c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343a:	e080      	b.n	800353e <HAL_I2C_EV_IRQHandler+0x29a>
 800343c:	e07f      	b.n	800353e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e007      	b.n	8003460 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d011      	beq.n	800348e <HAL_I2C_EV_IRQHandler+0x1ea>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00c      	beq.n	800348e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003484:	69b9      	ldr	r1, [r7, #24]
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 ffcc 	bl	8004424 <I2C_Slave_ADDR>
 800348c:	e05a      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0x206>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f001 f806 	bl	80044b4 <I2C_Slave_STOPF>
 80034a8:	e04c      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034aa:	7bbb      	ldrb	r3, [r7, #14]
 80034ac:	2b21      	cmp	r3, #33	@ 0x21
 80034ae:	d002      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x212>
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	2b29      	cmp	r3, #41	@ 0x29
 80034b4:	d120      	bne.n	80034f8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00d      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x238>
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_I2C_EV_IRQHandler+0x238>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fee7 	bl	80042a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034da:	e032      	b.n	8003542 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d02d      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x29e>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d028      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 ff16 	bl	8004322 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f6:	e024      	b.n	8003542 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <HAL_I2C_EV_IRQHandler+0x27a>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_I2C_EV_IRQHandler+0x27a>
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 ff24 	bl	8004364 <I2C_SlaveReceive_RXNE>
 800351c:	e012      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d008      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 ff54 	bl	80043e0 <I2C_SlaveReceive_BTF>
 8003538:	e004      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800353a:	bf00      	nop
 800353c:	e002      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003542:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b08a      	sub	sp, #40	@ 0x28
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003562:	2300      	movs	r3, #0
 8003564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800356c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_I2C_ER_IRQHandler+0x4a>
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003592:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <HAL_I2C_ER_IRQHandler+0x70>
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80035b8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03e      	beq.n	8003642 <HAL_I2C_ER_IRQHandler+0xf8>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d039      	beq.n	8003642 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80035e8:	7ebb      	ldrb	r3, [r7, #26]
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d112      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xca>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10f      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xca>
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b21      	cmp	r3, #33	@ 0x21
 80035f8:	d008      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b29      	cmp	r3, #41	@ 0x29
 80035fe:	d005      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0xc2>
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b28      	cmp	r3, #40	@ 0x28
 8003604:	d106      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b21      	cmp	r3, #33	@ 0x21
 800360a:	d103      	bne.n	8003614 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f001 f881 	bl	8004714 <I2C_Slave_AF>
 8003612:	e016      	b.n	8003642 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800361c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003626:	7efb      	ldrb	r3, [r7, #27]
 8003628:	2b10      	cmp	r3, #16
 800362a:	d002      	beq.n	8003632 <HAL_I2C_ER_IRQHandler+0xe8>
 800362c:	7efb      	ldrb	r3, [r7, #27]
 800362e:	2b40      	cmp	r3, #64	@ 0x40
 8003630:	d107      	bne.n	8003642 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003640:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <HAL_I2C_ER_IRQHandler+0x11e>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003666:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f001 f8be 	bl	80047fc <I2C_ITError>
  }
}
 8003680:	bf00      	nop
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	70fb      	strb	r3, [r7, #3]
 80036e4:	4613      	mov	r3, r2
 80036e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003766:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800376e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d150      	bne.n	8003820 <I2C_MasterTransmit_TXE+0xc8>
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b21      	cmp	r3, #33	@ 0x21
 8003782:	d14d      	bne.n	8003820 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d01d      	beq.n	80037c6 <I2C_MasterTransmit_TXE+0x6e>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b20      	cmp	r3, #32
 800378e:	d01a      	beq.n	80037c6 <I2C_MasterTransmit_TXE+0x6e>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003796:	d016      	beq.n	80037c6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037a6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2211      	movs	r2, #17
 80037ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff62 	bl	8003688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037c4:	e060      	b.n	8003888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80037d4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d107      	bne.n	8003810 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff7d 	bl	8003708 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800380e:	e03b      	b.n	8003888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ff35 	bl	8003688 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800381e:	e033      	b.n	8003888 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b21      	cmp	r3, #33	@ 0x21
 8003824:	d005      	beq.n	8003832 <I2C_MasterTransmit_TXE+0xda>
 8003826:	7bbb      	ldrb	r3, [r7, #14]
 8003828:	2b40      	cmp	r3, #64	@ 0x40
 800382a:	d12d      	bne.n	8003888 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	2b22      	cmp	r3, #34	@ 0x22
 8003830:	d12a      	bne.n	8003888 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d108      	bne.n	800384e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800384a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800384c:	e01c      	b.n	8003888 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b40      	cmp	r3, #64	@ 0x40
 8003858:	d103      	bne.n	8003862 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f88e 	bl	800397c <I2C_MemoryTransmit_TXE_BTF>
}
 8003860:	e012      	b.n	8003888 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003886:	e7ff      	b.n	8003888 <I2C_MasterTransmit_TXE+0x130>
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b21      	cmp	r3, #33	@ 0x21
 80038a8:	d164      	bne.n	8003974 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038d8:	e04c      	b.n	8003974 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d01d      	beq.n	800391c <I2C_MasterTransmit_BTF+0x8c>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d01a      	beq.n	800391c <I2C_MasterTransmit_BTF+0x8c>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038ec:	d016      	beq.n	800391c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038fc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2211      	movs	r2, #17
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff feb7 	bl	8003688 <HAL_I2C_MasterTxCpltCallback>
}
 800391a:	e02b      	b.n	8003974 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800392a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b40      	cmp	r3, #64	@ 0x40
 8003954:	d107      	bne.n	8003966 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fed2 	bl	8003708 <HAL_I2C_MemTxCpltCallback>
}
 8003964:	e006      	b.n	8003974 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fe8a 	bl	8003688 <HAL_I2C_MasterTxCpltCallback>
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800398a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11d      	bne.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d10b      	bne.n	80039b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80039b2:	e077      	b.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	121b      	asrs	r3, r3, #8
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039ce:	e069      	b.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10b      	bne.n	80039f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80039ee:	e059      	b.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d152      	bne.n	8003a9e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b22      	cmp	r3, #34	@ 0x22
 80039fc:	d10d      	bne.n	8003a1a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a0c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a18:	e044      	b.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b21      	cmp	r3, #33	@ 0x21
 8003a28:	d112      	bne.n	8003a50 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	781a      	ldrb	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a4e:	e029      	b.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d124      	bne.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
 8003a5c:	2b21      	cmp	r3, #33	@ 0x21
 8003a5e:	d121      	bne.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a6e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a7e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fe36 	bl	8003708 <HAL_I2C_MemTxCpltCallback>
}
 8003a9c:	e002      	b.n	8003aa4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff f8be 	bl	8002c20 <I2C_Flush_DR>
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b22      	cmp	r3, #34	@ 0x22
 8003abe:	f040 80b9 	bne.w	8003c34 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d921      	bls.n	8003b1a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	f040 8096 	bne.w	8003c34 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b16:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b18:	e08c      	b.n	8003c34 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d07f      	beq.n	8003c22 <I2C_MasterReceive_RXNE+0x176>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <I2C_MasterReceive_RXNE+0x82>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d179      	bne.n	8003c22 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f001 fb66 	bl	8005200 <I2C_WaitOnSTOPRequestThroughIT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d14c      	bne.n	8003bd4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b48:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b58:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2220      	movs	r2, #32
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b40      	cmp	r3, #64	@ 0x40
 8003b92:	d10a      	bne.n	8003baa <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fdba 	bl	800371c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ba8:	e044      	b.n	8003c34 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d002      	beq.n	8003bbe <I2C_MasterReceive_RXNE+0x112>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d103      	bne.n	8003bc6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bc4:	e002      	b.n	8003bcc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2212      	movs	r2, #18
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fd65 	bl	800369c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003bd2:	e02f      	b.n	8003c34 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003be2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fd88 	bl	8003730 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c20:	e008      	b.n	8003c34 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c30:	605a      	str	r2, [r3, #4]
}
 8003c32:	e7ff      	b.n	8003c34 <I2C_MasterReceive_RXNE+0x188>
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d11b      	bne.n	8003c8c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c62:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c8a:	e0c8      	b.n	8003e1e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d129      	bne.n	8003cea <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d00a      	beq.n	8003cc2 <I2C_MasterReceive_BTF+0x86>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d007      	beq.n	8003cc2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ce8:	e099      	b.n	8003e1e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	f040 8081 	bne.w	8003df8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d002      	beq.n	8003d02 <I2C_MasterReceive_BTF+0xc6>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d108      	bne.n	8003d14 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	e019      	b.n	8003d48 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d002      	beq.n	8003d20 <I2C_MasterReceive_BTF+0xe4>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d108      	bne.n	8003d32 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e00a      	b.n	8003d48 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d007      	beq.n	8003d48 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003da2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b40      	cmp	r3, #64	@ 0x40
 8003db6:	d10a      	bne.n	8003dce <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fca8 	bl	800371c <HAL_I2C_MemRxCpltCallback>
}
 8003dcc:	e027      	b.n	8003e1e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d002      	beq.n	8003de2 <I2C_MasterReceive_BTF+0x1a6>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d103      	bne.n	8003dea <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003de8:	e002      	b.n	8003df0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2212      	movs	r2, #18
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fc53 	bl	800369c <HAL_I2C_MasterRxCpltCallback>
}
 8003df6:	e012      	b.n	8003e1e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b40      	cmp	r3, #64	@ 0x40
 8003e38:	d117      	bne.n	8003e6a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e52:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e54:	e067      	b.n	8003f26 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]
}
 8003e68:	e05d      	b.n	8003f26 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e72:	d133      	bne.n	8003edc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b21      	cmp	r3, #33	@ 0x21
 8003e7e:	d109      	bne.n	8003e94 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e90:	611a      	str	r2, [r3, #16]
 8003e92:	e008      	b.n	8003ea6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <I2C_Master_SB+0x92>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d108      	bne.n	8003eca <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d032      	beq.n	8003f26 <I2C_Master_SB+0x100>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02d      	beq.n	8003f26 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ed8:	605a      	str	r2, [r3, #4]
}
 8003eda:	e024      	b.n	8003f26 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10e      	bne.n	8003f02 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	11db      	asrs	r3, r3, #7
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 0306 	and.w	r3, r3, #6
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f063 030f 	orn	r3, r3, #15
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
}
 8003f00:	e011      	b.n	8003f26 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10d      	bne.n	8003f26 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	11db      	asrs	r3, r3, #7
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 0306 	and.w	r3, r3, #6
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f063 030e 	orn	r3, r3, #14
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	611a      	str	r2, [r3, #16]
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d004      	beq.n	8003f58 <I2C_Master_ADD10+0x26>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d108      	bne.n	8003f6a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <I2C_Master_ADD10+0x48>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f78:	605a      	str	r2, [r3, #4]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b091      	sub	sp, #68	@ 0x44
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b22      	cmp	r3, #34	@ 0x22
 8003fae:	f040 8169 	bne.w	8004284 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <I2C_Master_ADDR+0x54>
 8003fba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d10b      	bne.n	8003fda <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	e160      	b.n	800429c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11d      	bne.n	800401e <I2C_Master_ADDR+0x98>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fea:	d118      	bne.n	800401e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fec:	2300      	movs	r3, #0
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004010:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	651a      	str	r2, [r3, #80]	@ 0x50
 800401c:	e13e      	b.n	800429c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d113      	bne.n	8004050 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004028:	2300      	movs	r3, #0
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e115      	b.n	800427c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b01      	cmp	r3, #1
 8004058:	f040 808a 	bne.w	8004170 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800405c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800405e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004062:	d137      	bne.n	80040d4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004072:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800407e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004082:	d113      	bne.n	80040ac <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004092:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004094:	2300      	movs	r3, #0
 8004096:	627b      	str	r3, [r7, #36]	@ 0x24
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	e0e7      	b.n	800427c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	623b      	str	r3, [r7, #32]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	e0d3      	b.n	800427c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d02e      	beq.n	8004138 <I2C_Master_ADDR+0x1b2>
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d02b      	beq.n	8004138 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	2b12      	cmp	r3, #18
 80040e4:	d102      	bne.n	80040ec <I2C_Master_ADDR+0x166>
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d125      	bne.n	8004138 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d00e      	beq.n	8004110 <I2C_Master_ADDR+0x18a>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d00b      	beq.n	8004110 <I2C_Master_ADDR+0x18a>
 80040f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d008      	beq.n	8004110 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e007      	b.n	8004120 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800411e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004120:	2300      	movs	r3, #0
 8004122:	61fb      	str	r3, [r7, #28]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	e0a1      	b.n	800427c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004146:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e085      	b.n	800427c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d14d      	bne.n	8004216 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	2b04      	cmp	r3, #4
 800417e:	d016      	beq.n	80041ae <I2C_Master_ADDR+0x228>
 8004180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004182:	2b02      	cmp	r3, #2
 8004184:	d013      	beq.n	80041ae <I2C_Master_ADDR+0x228>
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	2b10      	cmp	r3, #16
 800418a:	d010      	beq.n	80041ae <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e007      	b.n	80041be <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041bc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041cc:	d117      	bne.n	80041fe <I2C_Master_ADDR+0x278>
 80041ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d4:	d00b      	beq.n	80041ee <I2C_Master_ADDR+0x268>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d008      	beq.n	80041ee <I2C_Master_ADDR+0x268>
 80041dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d005      	beq.n	80041ee <I2C_Master_ADDR+0x268>
 80041e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e4:	2b10      	cmp	r3, #16
 80041e6:	d002      	beq.n	80041ee <I2C_Master_ADDR+0x268>
 80041e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d107      	bne.n	80041fe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	e032      	b.n	800427c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004224:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004234:	d117      	bne.n	8004266 <I2C_Master_ADDR+0x2e0>
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800423c:	d00b      	beq.n	8004256 <I2C_Master_ADDR+0x2d0>
 800423e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004240:	2b01      	cmp	r3, #1
 8004242:	d008      	beq.n	8004256 <I2C_Master_ADDR+0x2d0>
 8004244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004246:	2b08      	cmp	r3, #8
 8004248:	d005      	beq.n	8004256 <I2C_Master_ADDR+0x2d0>
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424c:	2b10      	cmp	r3, #16
 800424e:	d002      	beq.n	8004256 <I2C_Master_ADDR+0x2d0>
 8004250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004252:	2b20      	cmp	r3, #32
 8004254:	d107      	bne.n	8004266 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004264:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004282:	e00b      	b.n	800429c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
}
 800429a:	e7ff      	b.n	800429c <I2C_Master_ADDR+0x316>
 800429c:	bf00      	nop
 800429e:	3744      	adds	r7, #68	@ 0x44
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d02b      	beq.n	800431a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d114      	bne.n	800431a <I2C_SlaveTransmit_TXE+0x72>
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b29      	cmp	r3, #41	@ 0x29
 80042f4:	d111      	bne.n	800431a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004304:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2221      	movs	r2, #33	@ 0x21
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2228      	movs	r2, #40	@ 0x28
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff f9cb 	bl	80036b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d011      	beq.n	8004358 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004372:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02c      	beq.n	80043d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	1c5a      	adds	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d114      	bne.n	80043d8 <I2C_SlaveReceive_RXNE+0x74>
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b2:	d111      	bne.n	80043d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2222      	movs	r2, #34	@ 0x22
 80043c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2228      	movs	r2, #40	@ 0x28
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff f976 	bl	80036c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d012      	beq.n	8004418 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800443e:	2b28      	cmp	r3, #40	@ 0x28
 8004440:	d125      	bne.n	800448e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004450:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	81bb      	strh	r3, [r7, #12]
 8004470:	e002      	b.n	8004478 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004480:	89ba      	ldrh	r2, [r7, #12]
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff f926 	bl	80036d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800448c:	e00e      	b.n	80044ac <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004500:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800450c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004510:	d172      	bne.n	80045f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b22      	cmp	r3, #34	@ 0x22
 8004516:	d002      	beq.n	800451e <I2C_Slave_STOPF+0x6a>
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b2a      	cmp	r3, #42	@ 0x2a
 800451c:	d135      	bne.n	800458a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004550:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe f88b 	bl	8002672 <HAL_DMA_GetState>
 800455c:	4603      	mov	r3, r0
 800455e:	2b01      	cmp	r3, #1
 8004560:	d049      	beq.n	80045f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004566:	4a69      	ldr	r2, [pc, #420]	@ (800470c <I2C_Slave_STOPF+0x258>)
 8004568:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe f85d 	bl	800262e <HAL_DMA_Abort_IT>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d03d      	beq.n	80045f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004584:	4610      	mov	r0, r2
 8004586:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004588:	e035      	b.n	80045f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe f855 	bl	8002672 <HAL_DMA_GetState>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d014      	beq.n	80045f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	4a4e      	ldr	r2, [pc, #312]	@ (800470c <I2C_Slave_STOPF+0x258>)
 80045d4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fe f827 	bl	800262e <HAL_DMA_Abort_IT>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045f0:	4610      	mov	r0, r2
 80045f2:	4798      	blx	r3
 80045f4:	e000      	b.n	80045f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03e      	beq.n	8004680 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b04      	cmp	r3, #4
 800460e:	d112      	bne.n	8004636 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d112      	bne.n	800466a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	f043 0204 	orr.w	r2, r3, #4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8b7 	bl	80047fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800468e:	e039      	b.n	8004704 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	2b2a      	cmp	r3, #42	@ 0x2a
 8004694:	d109      	bne.n	80046aa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2228      	movs	r2, #40	@ 0x28
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff f80d 	bl	80036c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b28      	cmp	r3, #40	@ 0x28
 80046b4:	d111      	bne.n	80046da <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <I2C_Slave_STOPF+0x25c>)
 80046ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff f80e 	bl	80036f4 <HAL_I2C_ListenCpltCallback>
}
 80046d8:	e014      	b.n	8004704 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	2b22      	cmp	r3, #34	@ 0x22
 80046e0:	d002      	beq.n	80046e8 <I2C_Slave_STOPF+0x234>
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b22      	cmp	r3, #34	@ 0x22
 80046e6:	d10d      	bne.n	8004704 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe ffe0 	bl	80036c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	08004d5d 	.word	0x08004d5d
 8004710:	ffff0000 	.word	0xffff0000

08004714 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d002      	beq.n	8004736 <I2C_Slave_AF+0x22>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b20      	cmp	r3, #32
 8004734:	d129      	bne.n	800478a <I2C_Slave_AF+0x76>
 8004736:	7bfb      	ldrb	r3, [r7, #15]
 8004738:	2b28      	cmp	r3, #40	@ 0x28
 800473a:	d126      	bne.n	800478a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a2e      	ldr	r2, [pc, #184]	@ (80047f8 <I2C_Slave_AF+0xe4>)
 8004740:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004750:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800475a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fe ffb6 	bl	80036f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004788:	e031      	b.n	80047ee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b21      	cmp	r3, #33	@ 0x21
 800478e:	d129      	bne.n	80047e4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a19      	ldr	r2, [pc, #100]	@ (80047f8 <I2C_Slave_AF+0xe4>)
 8004794:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2221      	movs	r2, #33	@ 0x21
 800479a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047ba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047c4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fe fa22 	bl	8002c20 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7fe ff67 	bl	80036b0 <HAL_I2C_SlaveTxCpltCallback>
}
 80047e2:	e004      	b.n	80047ee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ec:	615a      	str	r2, [r3, #20]
}
 80047ee:	bf00      	nop
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	ffff0000 	.word	0xffff0000

080047fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004812:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004814:	7bbb      	ldrb	r3, [r7, #14]
 8004816:	2b10      	cmp	r3, #16
 8004818:	d002      	beq.n	8004820 <I2C_ITError+0x24>
 800481a:	7bbb      	ldrb	r3, [r7, #14]
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d10a      	bne.n	8004836 <I2C_ITError+0x3a>
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b22      	cmp	r3, #34	@ 0x22
 8004824:	d107      	bne.n	8004836 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004834:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800483c:	2b28      	cmp	r3, #40	@ 0x28
 800483e:	d107      	bne.n	8004850 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2228      	movs	r2, #40	@ 0x28
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800484e:	e015      	b.n	800487c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485e:	d00a      	beq.n	8004876 <I2C_ITError+0x7a>
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b60      	cmp	r3, #96	@ 0x60
 8004864:	d007      	beq.n	8004876 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800488a:	d162      	bne.n	8004952 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800489a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d020      	beq.n	80048ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ae:	4a6a      	ldr	r2, [pc, #424]	@ (8004a58 <I2C_ITError+0x25c>)
 80048b0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd feb9 	bl	800262e <HAL_DMA_Abort_IT>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8089 	beq.w	80049d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048e6:	4610      	mov	r0, r2
 80048e8:	4798      	blx	r3
 80048ea:	e074      	b.n	80049d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	4a59      	ldr	r2, [pc, #356]	@ (8004a58 <I2C_ITError+0x25c>)
 80048f2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fd fe98 	bl	800262e <HAL_DMA_Abort_IT>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d068      	beq.n	80049d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490e:	2b40      	cmp	r3, #64	@ 0x40
 8004910:	d10b      	bne.n	800492a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0201 	bic.w	r2, r2, #1
 8004938:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800494c:	4610      	mov	r0, r2
 800494e:	4798      	blx	r3
 8004950:	e041      	b.n	80049d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b60      	cmp	r3, #96	@ 0x60
 800495c:	d125      	bne.n	80049aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	d10b      	bne.n	8004992 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fe fece 	bl	8003744 <HAL_I2C_AbortCpltCallback>
 80049a8:	e015      	b.n	80049d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	d10b      	bne.n	80049d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fe fead 	bl	8003730 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d113      	bne.n	8004a50 <I2C_ITError+0x254>
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b28      	cmp	r3, #40	@ 0x28
 8004a2c:	d110      	bne.n	8004a50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <I2C_ITError+0x260>)
 8004a32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fe fe52 	bl	80036f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	08004d5d 	.word	0x08004d5d
 8004a5c:	ffff0000 	.word	0xffff0000

08004a60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	4608      	mov	r0, r1
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4603      	mov	r3, r0
 8004a70:	817b      	strh	r3, [r7, #10]
 8004a72:	460b      	mov	r3, r1
 8004a74:	813b      	strh	r3, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fa08 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00d      	beq.n	8004abe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab0:	d103      	bne.n	8004aba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e05f      	b.n	8004b7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004abe:	897b      	ldrh	r3, [r7, #10]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	6a3a      	ldr	r2, [r7, #32]
 8004ad2:	492d      	ldr	r1, [pc, #180]	@ (8004b88 <I2C_RequestMemoryWrite+0x128>)
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fa63 	bl	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e04c      	b.n	8004b7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afc:	6a39      	ldr	r1, [r7, #32]
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 faee 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d107      	bne.n	8004b22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e02b      	b.n	8004b7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d105      	bne.n	8004b38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2c:	893b      	ldrh	r3, [r7, #8]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	611a      	str	r2, [r3, #16]
 8004b36:	e021      	b.n	8004b7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b38:	893b      	ldrh	r3, [r7, #8]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b48:	6a39      	ldr	r1, [r7, #32]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fac8 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d107      	bne.n	8004b6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e005      	b.n	8004b7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b72:	893b      	ldrh	r3, [r7, #8]
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	00010002 	.word	0x00010002

08004b8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	4608      	mov	r0, r1
 8004b96:	4611      	mov	r1, r2
 8004b98:	461a      	mov	r2, r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	817b      	strh	r3, [r7, #10]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	813b      	strh	r3, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f96a 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00d      	beq.n	8004bfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bec:	d103      	bne.n	8004bf6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bf4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0aa      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bfa:	897b      	ldrh	r3, [r7, #10]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	4952      	ldr	r1, [pc, #328]	@ (8004d58 <I2C_RequestMemoryRead+0x1cc>)
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f9c5 	bl	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e097      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fa50 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e076      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d105      	bne.n	8004c74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c68:	893b      	ldrh	r3, [r7, #8]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]
 8004c72:	e021      	b.n	8004cb8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c74:	893b      	ldrh	r3, [r7, #8]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c84:	6a39      	ldr	r1, [r7, #32]
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa2a 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d107      	bne.n	8004caa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ca8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e050      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cae:	893b      	ldrh	r3, [r7, #8]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cba:	6a39      	ldr	r1, [r7, #32]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fa0f 	bl	80050e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d107      	bne.n	8004ce0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e035      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f8d3 	bl	8004eac <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d1a:	d103      	bne.n	8004d24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e013      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d28:	897b      	ldrh	r3, [r7, #10]
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	6a3a      	ldr	r2, [r7, #32]
 8004d3c:	4906      	ldr	r1, [pc, #24]	@ (8004d58 <I2C_RequestMemoryRead+0x1cc>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f92e 	bl	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	00010002 	.word	0x00010002

08004d5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d76:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea4 <I2C_DMAAbort+0x148>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	08db      	lsrs	r3, r3, #3
 8004d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea8 <I2C_DMAAbort+0x14c>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	0a1a      	lsrs	r2, r3, #8
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	00da      	lsls	r2, r3, #3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004da2:	e00a      	b.n	8004dba <I2C_DMAAbort+0x5e>
    }
    count--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db8:	d0ea      	beq.n	8004d90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0201 	bic.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b60      	cmp	r3, #96	@ 0x60
 8004e2a:	d10e      	bne.n	8004e4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e42:	6978      	ldr	r0, [r7, #20]
 8004e44:	f7fe fc7e 	bl	8003744 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e48:	e027      	b.n	8004e9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e50:	2b28      	cmp	r3, #40	@ 0x28
 8004e52:	d117      	bne.n	8004e84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2228      	movs	r2, #40	@ 0x28
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e82:	e007      	b.n	8004e94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e94:	6978      	ldr	r0, [r7, #20]
 8004e96:	f7fe fc4b 	bl	8003730 <HAL_I2C_ErrorCallback>
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	14f8b589 	.word	0x14f8b589

08004eac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ebc:	e048      	b.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ec4:	d044      	beq.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec6:	f7fc fd57 	bl	8001978 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d302      	bcc.n	8004edc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d139      	bne.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	0c1b      	lsrs	r3, r3, #16
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10d      	bne.n	8004f02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	43da      	mvns	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2301      	moveq	r3, #1
 8004efa:	2300      	movne	r3, #0
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	e00c      	b.n	8004f1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d116      	bne.n	8004f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e023      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d10d      	bne.n	8004f76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	43da      	mvns	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	e00c      	b.n	8004f90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	43da      	mvns	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4013      	ands	r3, r2
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	461a      	mov	r2, r3
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d093      	beq.n	8004ebe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fae:	e071      	b.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbe:	d123      	bne.n	8005008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	f043 0204 	orr.w	r2, r3, #4
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e067      	b.n	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800500e:	d041      	beq.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005010:	f7fc fcb2 	bl	8001978 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d136      	bne.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	0c1b      	lsrs	r3, r3, #16
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d10c      	bne.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	43da      	mvns	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf14      	ite	ne
 8005042:	2301      	movne	r3, #1
 8005044:	2300      	moveq	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e00b      	b.n	8005062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	43da      	mvns	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d016      	beq.n	8005094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e021      	b.n	80050d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	0c1b      	lsrs	r3, r3, #16
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d10c      	bne.n	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	43da      	mvns	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4013      	ands	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	e00b      	b.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	43da      	mvns	r2, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2300      	moveq	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f47f af6d 	bne.w	8004fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050ec:	e034      	b.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f915 	bl	800531e <I2C_IsAcknowledgeFailed>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e034      	b.n	8005168 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005104:	d028      	beq.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fc fc37 	bl	8001978 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11d      	bne.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b80      	cmp	r3, #128	@ 0x80
 8005128:	d016      	beq.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e007      	b.n	8005168 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d1c3      	bne.n	80050ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800517c:	e034      	b.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8cd 	bl	800531e <I2C_IsAcknowledgeFailed>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e034      	b.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005194:	d028      	beq.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fc fbef 	bl	8001978 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d11d      	bne.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d016      	beq.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	f043 0220 	orr.w	r2, r3, #32
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e007      	b.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d1c3      	bne.n	800517e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800520c:	4b13      	ldr	r3, [pc, #76]	@ (800525c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	4a13      	ldr	r2, [pc, #76]	@ (8005260 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	0a1a      	lsrs	r2, r3, #8
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b01      	subs	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	f043 0220 	orr.w	r2, r3, #32
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e008      	b.n	8005250 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524c:	d0e9      	beq.n	8005222 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000000 	.word	0x20000000
 8005260:	14f8b589 	.word	0x14f8b589

08005264 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005270:	e049      	b.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d119      	bne.n	80052b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0210 	mvn.w	r2, #16
 8005288:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e030      	b.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b4:	f7fc fb60 	bl	8001978 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d302      	bcc.n	80052ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d11d      	bne.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d4:	2b40      	cmp	r3, #64	@ 0x40
 80052d6:	d016      	beq.n	8005306 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	f043 0220 	orr.w	r2, r3, #32
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e007      	b.n	8005316 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005310:	2b40      	cmp	r3, #64	@ 0x40
 8005312:	d1ae      	bne.n	8005272 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800531e:	b480      	push	{r7}
 8005320:	b083      	sub	sp, #12
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005334:	d11b      	bne.n	800536e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800533e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f043 0204 	orr.w	r2, r3, #4
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005388:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800538c:	d103      	bne.n	8005396 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005394:	e007      	b.n	80053a6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800539e:	d102      	bne.n	80053a6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2208      	movs	r2, #8
 80053a4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e267      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d075      	beq.n	80054be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053d2:	4b88      	ldr	r3, [pc, #544]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d00c      	beq.n	80053f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053de:	4b85      	ldr	r3, [pc, #532]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d112      	bne.n	8005410 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ea:	4b82      	ldr	r3, [pc, #520]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053f6:	d10b      	bne.n	8005410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	4b7e      	ldr	r3, [pc, #504]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d05b      	beq.n	80054bc <HAL_RCC_OscConfig+0x108>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d157      	bne.n	80054bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e242      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005418:	d106      	bne.n	8005428 <HAL_RCC_OscConfig+0x74>
 800541a:	4b76      	ldr	r3, [pc, #472]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a75      	ldr	r2, [pc, #468]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e01d      	b.n	8005464 <HAL_RCC_OscConfig+0xb0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005430:	d10c      	bne.n	800544c <HAL_RCC_OscConfig+0x98>
 8005432:	4b70      	ldr	r3, [pc, #448]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6f      	ldr	r2, [pc, #444]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	4b6d      	ldr	r3, [pc, #436]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a6c      	ldr	r2, [pc, #432]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	e00b      	b.n	8005464 <HAL_RCC_OscConfig+0xb0>
 800544c:	4b69      	ldr	r3, [pc, #420]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a68      	ldr	r2, [pc, #416]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	4b66      	ldr	r3, [pc, #408]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a65      	ldr	r2, [pc, #404]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 800545e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fc fa84 	bl	8001978 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005474:	f7fc fa80 	bl	8001978 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	@ 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e207      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	4b5b      	ldr	r3, [pc, #364]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0xc0>
 8005492:	e014      	b.n	80054be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fc fa70 	bl	8001978 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800549c:	f7fc fa6c 	bl	8001978 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	@ 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e1f3      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ae:	4b51      	ldr	r3, [pc, #324]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0xe8>
 80054ba:	e000      	b.n	80054be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d063      	beq.n	8005592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054ca:	4b4a      	ldr	r3, [pc, #296]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00b      	beq.n	80054ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d6:	4b47      	ldr	r3, [pc, #284]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d11c      	bne.n	800551c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e2:	4b44      	ldr	r3, [pc, #272]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d116      	bne.n	800551c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ee:	4b41      	ldr	r3, [pc, #260]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_RCC_OscConfig+0x152>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e1c7      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b3b      	ldr	r3, [pc, #236]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4937      	ldr	r1, [pc, #220]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005516:	4313      	orrs	r3, r2
 8005518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	e03a      	b.n	8005592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005524:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCC_OscConfig+0x244>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552a:	f7fc fa25 	bl	8001978 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005532:	f7fc fa21 	bl	8001978 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e1a8      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005544:	4b2b      	ldr	r3, [pc, #172]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005550:	4b28      	ldr	r3, [pc, #160]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	4925      	ldr	r1, [pc, #148]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]
 8005564:	e015      	b.n	8005592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005566:	4b24      	ldr	r3, [pc, #144]	@ (80055f8 <HAL_RCC_OscConfig+0x244>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fc fa04 	bl	8001978 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005574:	f7fc fa00 	bl	8001978 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e187      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005586:	4b1b      	ldr	r3, [pc, #108]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d036      	beq.n	800560c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a6:	4b15      	ldr	r3, [pc, #84]	@ (80055fc <HAL_RCC_OscConfig+0x248>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fc f9e4 	bl	8001978 <HAL_GetTick>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b4:	f7fc f9e0 	bl	8001978 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e167      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c6:	4b0b      	ldr	r3, [pc, #44]	@ (80055f4 <HAL_RCC_OscConfig+0x240>)
 80055c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x200>
 80055d2:	e01b      	b.n	800560c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d4:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <HAL_RCC_OscConfig+0x248>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055da:	f7fc f9cd 	bl	8001978 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	e00e      	b.n	8005600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e2:	f7fc f9c9 	bl	8001978 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d907      	bls.n	8005600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e150      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
 80055f4:	40023800 	.word	0x40023800
 80055f8:	42470000 	.word	0x42470000
 80055fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005600:	4b88      	ldr	r3, [pc, #544]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1ea      	bne.n	80055e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8097 	beq.w	8005748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800561a:	2300      	movs	r3, #0
 800561c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800561e:	4b81      	ldr	r3, [pc, #516]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10f      	bne.n	800564a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	4b7d      	ldr	r3, [pc, #500]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	4a7c      	ldr	r2, [pc, #496]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005638:	6413      	str	r3, [r2, #64]	@ 0x40
 800563a:	4b7a      	ldr	r3, [pc, #488]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005642:	60bb      	str	r3, [r7, #8]
 8005644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564a:	4b77      	ldr	r3, [pc, #476]	@ (8005828 <HAL_RCC_OscConfig+0x474>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d118      	bne.n	8005688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005656:	4b74      	ldr	r3, [pc, #464]	@ (8005828 <HAL_RCC_OscConfig+0x474>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a73      	ldr	r2, [pc, #460]	@ (8005828 <HAL_RCC_OscConfig+0x474>)
 800565c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005662:	f7fc f989 	bl	8001978 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005668:	e008      	b.n	800567c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566a:	f7fc f985 	bl	8001978 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e10c      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567c:	4b6a      	ldr	r3, [pc, #424]	@ (8005828 <HAL_RCC_OscConfig+0x474>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f0      	beq.n	800566a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d106      	bne.n	800569e <HAL_RCC_OscConfig+0x2ea>
 8005690:	4b64      	ldr	r3, [pc, #400]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005694:	4a63      	ldr	r2, [pc, #396]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6713      	str	r3, [r2, #112]	@ 0x70
 800569c:	e01c      	b.n	80056d8 <HAL_RCC_OscConfig+0x324>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d10c      	bne.n	80056c0 <HAL_RCC_OscConfig+0x30c>
 80056a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056ac:	f043 0304 	orr.w	r3, r3, #4
 80056b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056be:	e00b      	b.n	80056d8 <HAL_RCC_OscConfig+0x324>
 80056c0:	4b58      	ldr	r3, [pc, #352]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	4a57      	ldr	r2, [pc, #348]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80056cc:	4b55      	ldr	r3, [pc, #340]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d0:	4a54      	ldr	r2, [pc, #336]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f023 0304 	bic.w	r3, r3, #4
 80056d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e0:	f7fc f94a 	bl	8001978 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e6:	e00a      	b.n	80056fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e8:	f7fc f946 	bl	8001978 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e0cb      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fe:	4b49      	ldr	r3, [pc, #292]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0ee      	beq.n	80056e8 <HAL_RCC_OscConfig+0x334>
 800570a:	e014      	b.n	8005736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570c:	f7fc f934 	bl	8001978 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005712:	e00a      	b.n	800572a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005714:	f7fc f930 	bl	8001978 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e0b5      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572a:	4b3e      	ldr	r3, [pc, #248]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ee      	bne.n	8005714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005736:	7dfb      	ldrb	r3, [r7, #23]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d105      	bne.n	8005748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573c:	4b39      	ldr	r3, [pc, #228]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	4a38      	ldr	r2, [pc, #224]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005746:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80a1 	beq.w	8005894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005752:	4b34      	ldr	r3, [pc, #208]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b08      	cmp	r3, #8
 800575c:	d05c      	beq.n	8005818 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d141      	bne.n	80057ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005766:	4b31      	ldr	r3, [pc, #196]	@ (800582c <HAL_RCC_OscConfig+0x478>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576c:	f7fc f904 	bl	8001978 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fc f900 	bl	8001978 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e087      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005786:	4b27      	ldr	r3, [pc, #156]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69da      	ldr	r2, [r3, #28]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	431a      	orrs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	019b      	lsls	r3, r3, #6
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	3b01      	subs	r3, #1
 80057ac:	041b      	lsls	r3, r3, #16
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	061b      	lsls	r3, r3, #24
 80057b6:	491b      	ldr	r1, [pc, #108]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057bc:	4b1b      	ldr	r3, [pc, #108]	@ (800582c <HAL_RCC_OscConfig+0x478>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fc f8d9 	bl	8001978 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ca:	f7fc f8d5 	bl	8001978 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e05c      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057dc:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x416>
 80057e8:	e054      	b.n	8005894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ea:	4b10      	ldr	r3, [pc, #64]	@ (800582c <HAL_RCC_OscConfig+0x478>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f0:	f7fc f8c2 	bl	8001978 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fc f8be 	bl	8001978 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e045      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580a:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <HAL_RCC_OscConfig+0x470>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x444>
 8005816:	e03d      	b.n	8005894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e038      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
 8005824:	40023800 	.word	0x40023800
 8005828:	40007000 	.word	0x40007000
 800582c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005830:	4b1b      	ldr	r3, [pc, #108]	@ (80058a0 <HAL_RCC_OscConfig+0x4ec>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d028      	beq.n	8005890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d121      	bne.n	8005890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d11a      	bne.n	8005890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005860:	4013      	ands	r3, r2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005868:	4293      	cmp	r3, r2
 800586a:	d111      	bne.n	8005890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	3b01      	subs	r3, #1
 800587a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d107      	bne.n	8005890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d001      	beq.n	8005894 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800

080058a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0cc      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b8:	4b68      	ldr	r3, [pc, #416]	@ (8005a5c <HAL_RCC_ClockConfig+0x1b8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d90c      	bls.n	80058e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c6:	4b65      	ldr	r3, [pc, #404]	@ (8005a5c <HAL_RCC_ClockConfig+0x1b8>)
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ce:	4b63      	ldr	r3, [pc, #396]	@ (8005a5c <HAL_RCC_ClockConfig+0x1b8>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0b8      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d020      	beq.n	800592e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058f8:	4b59      	ldr	r3, [pc, #356]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	4a58      	ldr	r2, [pc, #352]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005910:	4b53      	ldr	r3, [pc, #332]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a52      	ldr	r2, [pc, #328]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800591a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800591c:	4b50      	ldr	r3, [pc, #320]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	494d      	ldr	r1, [pc, #308]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	4313      	orrs	r3, r2
 800592c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d044      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005942:	4b47      	ldr	r3, [pc, #284]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d119      	bne.n	8005982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e07f      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d003      	beq.n	8005962 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800595e:	2b03      	cmp	r3, #3
 8005960:	d107      	bne.n	8005972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005962:	4b3f      	ldr	r3, [pc, #252]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e06f      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005972:	4b3b      	ldr	r3, [pc, #236]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e067      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005982:	4b37      	ldr	r3, [pc, #220]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 0203 	bic.w	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4934      	ldr	r1, [pc, #208]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	4313      	orrs	r3, r2
 8005992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005994:	f7fb fff0 	bl	8001978 <HAL_GetTick>
 8005998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	e00a      	b.n	80059b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fb ffec 	bl	8001978 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e04f      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 020c 	and.w	r2, r3, #12
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d1eb      	bne.n	800599c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059c4:	4b25      	ldr	r3, [pc, #148]	@ (8005a5c <HAL_RCC_ClockConfig+0x1b8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d20c      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b22      	ldr	r3, [pc, #136]	@ (8005a5c <HAL_RCC_ClockConfig+0x1b8>)
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b20      	ldr	r3, [pc, #128]	@ (8005a5c <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e032      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f8:	4b19      	ldr	r3, [pc, #100]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4916      	ldr	r1, [pc, #88]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a16:	4b12      	ldr	r3, [pc, #72]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	490e      	ldr	r1, [pc, #56]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a2a:	f000 f821 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	4b0b      	ldr	r3, [pc, #44]	@ (8005a60 <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	490a      	ldr	r1, [pc, #40]	@ (8005a64 <HAL_RCC_ClockConfig+0x1c0>)
 8005a3c:	5ccb      	ldrb	r3, [r1, r3]
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	4a09      	ldr	r2, [pc, #36]	@ (8005a68 <HAL_RCC_ClockConfig+0x1c4>)
 8005a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a46:	4b09      	ldr	r3, [pc, #36]	@ (8005a6c <HAL_RCC_ClockConfig+0x1c8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fb ff50 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023c00 	.word	0x40023c00
 8005a60:	40023800 	.word	0x40023800
 8005a64:	08008ebc 	.word	0x08008ebc
 8005a68:	20000000 	.word	0x20000000
 8005a6c:	20000004 	.word	0x20000004

08005a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a74:	b090      	sub	sp, #64	@ 0x40
 8005a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a88:	4b59      	ldr	r3, [pc, #356]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d00d      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	f200 80a1 	bhi.w	8005bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d003      	beq.n	8005aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8005aa2:	e09b      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aa4:	4b53      	ldr	r3, [pc, #332]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005aa8:	e09b      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005aaa:	4b53      	ldr	r3, [pc, #332]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005aac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005aae:	e098      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ab8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aba:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d028      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	099b      	lsrs	r3, r3, #6
 8005acc:	2200      	movs	r2, #0
 8005ace:	623b      	str	r3, [r7, #32]
 8005ad0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4b47      	ldr	r3, [pc, #284]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005adc:	fb03 f201 	mul.w	r2, r3, r1
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	fb00 f303 	mul.w	r3, r0, r3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	4a43      	ldr	r2, [pc, #268]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8005aea:	fba0 1202 	umull	r1, r2, r0, r2
 8005aee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005af0:	460a      	mov	r2, r1
 8005af2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005af4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005af6:	4413      	add	r3, r2
 8005af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afc:	2200      	movs	r2, #0
 8005afe:	61bb      	str	r3, [r7, #24]
 8005b00:	61fa      	str	r2, [r7, #28]
 8005b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005b0a:	f7fb f82f 	bl	8000b6c <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4613      	mov	r3, r2
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b16:	e053      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b18:	4b35      	ldr	r3, [pc, #212]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	2200      	movs	r2, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	617a      	str	r2, [r7, #20]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b2a:	f04f 0b00 	mov.w	fp, #0
 8005b2e:	4652      	mov	r2, sl
 8005b30:	465b      	mov	r3, fp
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f04f 0100 	mov.w	r1, #0
 8005b3a:	0159      	lsls	r1, r3, #5
 8005b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b40:	0150      	lsls	r0, r2, #5
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	ebb2 080a 	subs.w	r8, r2, sl
 8005b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b62:	ebb2 0408 	subs.w	r4, r2, r8
 8005b66:	eb63 0509 	sbc.w	r5, r3, r9
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	00eb      	lsls	r3, r5, #3
 8005b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b78:	00e2      	lsls	r2, r4, #3
 8005b7a:	4614      	mov	r4, r2
 8005b7c:	461d      	mov	r5, r3
 8005b7e:	eb14 030a 	adds.w	r3, r4, sl
 8005b82:	603b      	str	r3, [r7, #0]
 8005b84:	eb45 030b 	adc.w	r3, r5, fp
 8005b88:	607b      	str	r3, [r7, #4]
 8005b8a:	f04f 0200 	mov.w	r2, #0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b96:	4629      	mov	r1, r5
 8005b98:	028b      	lsls	r3, r1, #10
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	028a      	lsls	r2, r1, #10
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	2200      	movs	r2, #0
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	60fa      	str	r2, [r7, #12]
 8005bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bb4:	f7fa ffda 	bl	8000b6c <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005bd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005bda:	e002      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b05      	ldr	r3, [pc, #20]	@ (8005bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3740      	adds	r7, #64	@ 0x40
 8005be8:	46bd      	mov	sp, r7
 8005bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	00f42400 	.word	0x00f42400
 8005bf8:	017d7840 	.word	0x017d7840

08005bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c00:	4b03      	ldr	r3, [pc, #12]	@ (8005c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c02:	681b      	ldr	r3, [r3, #0]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000000 	.word	0x20000000

08005c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c18:	f7ff fff0 	bl	8005bfc <HAL_RCC_GetHCLKFreq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0a9b      	lsrs	r3, r3, #10
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	4903      	ldr	r1, [pc, #12]	@ (8005c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c2a:	5ccb      	ldrb	r3, [r1, r3]
 8005c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40023800 	.word	0x40023800
 8005c38:	08008ecc 	.word	0x08008ecc

08005c3c <MPU6050_ReadOneByte>:
//ŒŸŒ­·Î ºÎÅÍ 1¹ÙÀÌÆ® ÀÐ±â
// ÆÄ¶óžÞÅÍ1 : ŒŸŒ­ Ÿîµå·¹œº, ÆÄ¶óžÞÅÍ 2 : ŒŸŒ­³» ·¹ÁöœºÅÍ Ÿîµå·¹œº
// ž®ÅÏ°ª : ŒŸŒ­ÀÀŽä°ª

uint8_t MPU6050_ReadOneByte(uint8_t RegAddr)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af04      	add	r7, sp, #16
 8005c42:	4603      	mov	r3, r0
 8005c44:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,1,&Data,1,1000);
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c52:	9302      	str	r3, [sp, #8]
 8005c54:	2301      	movs	r3, #1
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f107 030f 	add.w	r3, r7, #15
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	2301      	movs	r3, #1
 8005c60:	21d0      	movs	r1, #208	@ 0xd0
 8005c62:	4804      	ldr	r0, [pc, #16]	@ (8005c74 <MPU6050_ReadOneByte+0x38>)
 8005c64:	f7fd f8ec 	bl	8002e40 <HAL_I2C_Mem_Read>
	return Data;
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200002b4 	.word	0x200002b4

08005c78 <MPU6050_WriteOneByte>:

//ŒŸŒ­¿¡  1¹ÙÀÌÆ® Ÿ²±â
// ÆÄ¶óžÞÅÍ1 : ŒŸŒ­ Ÿîµå·¹œº, ÆÄ¶óžÞÅÍ 2 : ŒŸŒ­³» ·¹ÁöœºÅÍ Ÿîµå·¹œº
// ž®ÅÏ°ª : ŒŸŒ­ÀÀŽä°ª
void MPU6050_WriteOneByte(uint8_t RegAddr, uint8_t Data)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af04      	add	r7, sp, #16
 8005c7e:	4603      	mov	r3, r0
 8005c80:	460a      	mov	r2, r1
 8005c82:	71fb      	strb	r3, [r7, #7]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&MPU6050_I2C_PORT,MPU6050_DEVICE_ADDR,RegAddr,I2C_MEMADD_SIZE_8BIT,&Data,1,1000);
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005c90:	9302      	str	r3, [sp, #8]
 8005c92:	2301      	movs	r3, #1
 8005c94:	9301      	str	r3, [sp, #4]
 8005c96:	1dbb      	adds	r3, r7, #6
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	21d0      	movs	r1, #208	@ 0xd0
 8005c9e:	4803      	ldr	r0, [pc, #12]	@ (8005cac <MPU6050_WriteOneByte+0x34>)
 8005ca0:	f7fc ffd4 	bl	8002c4c <HAL_I2C_Mem_Write>
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200002b4 	.word	0x200002b4

08005cb0 <MPU6050_WriteBits>:

bool MPU6050_WriteBits(uint8_t RegAddr, uint8_t BitStart, uint8_t Length, uint8_t Data)
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	71fb      	strb	r3, [r7, #7]
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	71bb      	strb	r3, [r7, #6]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	717b      	strb	r3, [r7, #5]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	713b      	strb	r3, [r7, #4]

   uint8_t Dat, Mask;

		Dat = MPU6050_ReadOneByte(RegAddr);
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ffb3 	bl	8005c3c <MPU6050_ReadOneByte>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	73fb      	strb	r3, [r7, #15]
    Mask = (0xFF << (BitStart + 1)) | 0xFF >> ((8 - BitStart) + Length - 1);
 8005cda:	79bb      	ldrb	r3, [r7, #6]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	22ff      	movs	r2, #255	@ 0xff
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	b25a      	sxtb	r2, r3
 8005ce6:	79bb      	ldrb	r3, [r7, #6]
 8005ce8:	f1c3 0108 	rsb	r1, r3, #8
 8005cec:	797b      	ldrb	r3, [r7, #5]
 8005cee:	440b      	add	r3, r1
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	21ff      	movs	r1, #255	@ 0xff
 8005cf4:	fa41 f303 	asr.w	r3, r1, r3
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	73bb      	strb	r3, [r7, #14]
    Data <<= (8 - Length);
 8005d00:	793a      	ldrb	r2, [r7, #4]
 8005d02:	797b      	ldrb	r3, [r7, #5]
 8005d04:	f1c3 0308 	rsb	r3, r3, #8
 8005d08:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0c:	713b      	strb	r3, [r7, #4]
    Data >>= (7 - BitStart);
 8005d0e:	793a      	ldrb	r2, [r7, #4]
 8005d10:	79bb      	ldrb	r3, [r7, #6]
 8005d12:	f1c3 0307 	rsb	r3, r3, #7
 8005d16:	fa42 f303 	asr.w	r3, r2, r3
 8005d1a:	713b      	strb	r3, [r7, #4]
    Dat &= Mask;
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	7bbb      	ldrb	r3, [r7, #14]
 8005d20:	4013      	ands	r3, r2
 8005d22:	73fb      	strb	r3, [r7, #15]
    Dat |= Data;
 8005d24:	7bfa      	ldrb	r2, [r7, #15]
 8005d26:	793b      	ldrb	r3, [r7, #4]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8005d2c:	7bfa      	ldrb	r2, [r7, #15]
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff ffa0 	bl	8005c78 <MPU6050_WriteOneByte>

    return true;
 8005d38:	2301      	movs	r3, #1
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}

08005d42 <MPU6050_WriteOneBit>:

bool MPU6050_WriteOneBit(uint8_t RegAddr, uint8_t BitNum, uint8_t Data)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	4603      	mov	r3, r0
 8005d4a:	71fb      	strb	r3, [r7, #7]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	71bb      	strb	r3, [r7, #6]
 8005d50:	4613      	mov	r3, r2
 8005d52:	717b      	strb	r3, [r7, #5]
    uint8_t Dat;

    Dat = MPU6050_ReadOneByte(RegAddr);
 8005d54:	79fb      	ldrb	r3, [r7, #7]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff70 	bl	8005c3c <MPU6050_ReadOneByte>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
    Dat = (Data != 0) ? (Dat | (1 << BitNum)) : (Dat & ~(1 << BitNum));
 8005d60:	797b      	ldrb	r3, [r7, #5]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <MPU6050_WriteOneBit+0x3a>
 8005d66:	79bb      	ldrb	r3, [r7, #6]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	b25a      	sxtb	r2, r3
 8005d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	b25b      	sxtb	r3, r3
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e00b      	b.n	8005d94 <MPU6050_WriteOneBit+0x52>
 8005d7c:	79bb      	ldrb	r3, [r7, #6]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	b25b      	sxtb	r3, r3
 8005d86:	43db      	mvns	r3, r3
 8005d88:	b25a      	sxtb	r2, r3
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteOneByte(RegAddr, Dat);
 8005d96:	7bfa      	ldrb	r2, [r7, #15]
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff ff6b 	bl	8005c78 <MPU6050_WriteOneByte>

    return true;
 8005da2:	2301      	movs	r3, #1
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <MPU6050_SetClockSource>:
  	}
  	*pOutVal >>= 3;
}

void MPU6050_SetClockSource(uint8_t source)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8005db6:	79fb      	ldrb	r3, [r7, #7]
 8005db8:	2203      	movs	r2, #3
 8005dba:	2102      	movs	r1, #2
 8005dbc:	206b      	movs	r0, #107	@ 0x6b
 8005dbe:	f7ff ff77 	bl	8005cb0 <MPU6050_WriteBits>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <MPU6050_SetFullScaleGyroRange>:

void MPU6050_SetFullScaleGyroRange(uint8_t range)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	2104      	movs	r1, #4
 8005dda:	201b      	movs	r0, #27
 8005ddc:	f7ff ff68 	bl	8005cb0 <MPU6050_WriteBits>
}
 8005de0:	bf00      	nop
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <MPU6050_SetLPF>:

void MPU6050_SetLPF(uint8_t	LowPassFilter)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
   MPU6050_WriteOneByte(MPU6050_RA_CONFIG, LowPassFilter);
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	4619      	mov	r1, r3
 8005df6:	201a      	movs	r0, #26
 8005df8:	f7ff ff3e 	bl	8005c78 <MPU6050_WriteOneByte>
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <MPU6050_SetFullScaleAccelRange>:

void MPU6050_SetFullScaleAccelRange(uint8_t range)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteBits(MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	2202      	movs	r2, #2
 8005e12:	2104      	movs	r1, #4
 8005e14:	201c      	movs	r0, #28
 8005e16:	f7ff ff4b 	bl	8005cb0 <MPU6050_WriteBits>
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <MPU6050_SetSleepEnabled>:

void MPU6050_SetSleepEnabled(uint8_t enabled)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b082      	sub	sp, #8
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	4603      	mov	r3, r0
 8005e2a:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 8005e2c:	79fb      	ldrb	r3, [r7, #7]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2106      	movs	r1, #6
 8005e32:	206b      	movs	r0, #107	@ 0x6b
 8005e34:	f7ff ff85 	bl	8005d42 <MPU6050_WriteOneBit>
}
 8005e38:	bf00      	nop
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <MPU6050_SetI2CMasterModeEnabled>:

void MPU6050_SetI2CMasterModeEnabled(uint8_t enabled)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	4603      	mov	r3, r0
 8005e48:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	2105      	movs	r1, #5
 8005e50:	206a      	movs	r0, #106	@ 0x6a
 8005e52:	f7ff ff76 	bl	8005d42 <MPU6050_WriteOneBit>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <MPU6050_SetI2CBypassEnabled>:

void MPU6050_SetI2CBypassEnabled(uint8_t enabled)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	71fb      	strb	r3, [r7, #7]
    MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	2037      	movs	r0, #55	@ 0x37
 8005e70:	f7ff ff67 	bl	8005d42 <MPU6050_WriteOneBit>
}
 8005e74:	bf00      	nop
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <MPU6050_Init>:
	MPU6050_GyroOffset.Z = TempGz >> 5;

}

void MPU6050_Init(uint8_t lpf)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
  MPU6050_SetClockSource(MPU6050_CLOCK_PLL_XGYRO);
 8005e86:	2001      	movs	r0, #1
 8005e88:	f7ff ff90 	bl	8005dac <MPU6050_SetClockSource>
  MPU6050_SetFullScaleGyroRange(MPU6050_GYRO_FS_1000);
 8005e8c:	2002      	movs	r0, #2
 8005e8e:	f7ff ff9c 	bl	8005dca <MPU6050_SetFullScaleGyroRange>
  MPU6050_SetFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8005e92:	2000      	movs	r0, #0
 8005e94:	f7ff ffb6 	bl	8005e04 <MPU6050_SetFullScaleAccelRange>
		MPU6050_DLPF_BW_42          0x03
		MPU6050_DLPF_BW_20          0x04
		MPU6050_DLPF_BW_10          0x05
		MPU6050_DLPF_BW_5           0x06
	*/
	MPU6050_SetLPF(lpf);
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff ffa4 	bl	8005de8 <MPU6050_SetLPF>

  MPU6050_SetSleepEnabled(0);
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	f7ff ffbe 	bl	8005e22 <MPU6050_SetSleepEnabled>
	MPU6050_SetI2CMasterModeEnabled(0);
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f7ff ffca 	bl	8005e40 <MPU6050_SetI2CMasterModeEnabled>
	MPU6050_SetI2CBypassEnabled(1);
 8005eac:	2001      	movs	r0, #1
 8005eae:	f7ff ffd6 	bl	8005e5e <MPU6050_SetI2CBypassEnabled>

	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, 0);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2107      	movs	r1, #7
 8005eb6:	2037      	movs	r0, #55	@ 0x37
 8005eb8:	f7ff ff43 	bl	8005d42 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit( MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, 0);
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2106      	movs	r1, #6
 8005ec0:	2037      	movs	r0, #55	@ 0x37
 8005ec2:	f7ff ff3e 	bl	8005d42 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, 1);
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	2105      	movs	r1, #5
 8005eca:	2037      	movs	r0, #55	@ 0x37
 8005ecc:	f7ff ff39 	bl	8005d42 <MPU6050_WriteOneBit>
	MPU6050_WriteOneBit(MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, 1);
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	2104      	movs	r1, #4
 8005ed4:	2037      	movs	r0, #55	@ 0x37
 8005ed6:	f7ff ff34 	bl	8005d42 <MPU6050_WriteOneBit>
  MPU6050_WriteOneBit(MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, 1);
 8005eda:	2201      	movs	r2, #1
 8005edc:	2100      	movs	r1, #0
 8005ede:	2038      	movs	r0, #56	@ 0x38
 8005ee0:	f7ff ff2f 	bl	8005d42 <MPU6050_WriteOneBit>
	HAL_Delay(100);  // ÀÚÀÌ·Î ŸÈÁ€È­ Žë±â
 8005ee4:	2064      	movs	r0, #100	@ 0x64
 8005ee6:	f7fb fd53 	bl	8001990 <HAL_Delay>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <sulp>:
 8005ef2:	b570      	push	{r4, r5, r6, lr}
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	460d      	mov	r5, r1
 8005ef8:	ec45 4b10 	vmov	d0, r4, r5
 8005efc:	4616      	mov	r6, r2
 8005efe:	f001 ff9f 	bl	8007e40 <__ulp>
 8005f02:	ec51 0b10 	vmov	r0, r1, d0
 8005f06:	b17e      	cbz	r6, 8005f28 <sulp+0x36>
 8005f08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f0c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	dd09      	ble.n	8005f28 <sulp+0x36>
 8005f14:	051b      	lsls	r3, r3, #20
 8005f16:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005f1a:	2400      	movs	r4, #0
 8005f1c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005f20:	4622      	mov	r2, r4
 8005f22:	462b      	mov	r3, r5
 8005f24:	f7fa fb68 	bl	80005f8 <__aeabi_dmul>
 8005f28:	ec41 0b10 	vmov	d0, r0, r1
 8005f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f30 <_strtod_l>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	b09f      	sub	sp, #124	@ 0x7c
 8005f36:	460c      	mov	r4, r1
 8005f38:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005f3e:	9005      	str	r0, [sp, #20]
 8005f40:	f04f 0a00 	mov.w	sl, #0
 8005f44:	f04f 0b00 	mov.w	fp, #0
 8005f48:	460a      	mov	r2, r1
 8005f4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f4c:	7811      	ldrb	r1, [r2, #0]
 8005f4e:	292b      	cmp	r1, #43	@ 0x2b
 8005f50:	d04a      	beq.n	8005fe8 <_strtod_l+0xb8>
 8005f52:	d838      	bhi.n	8005fc6 <_strtod_l+0x96>
 8005f54:	290d      	cmp	r1, #13
 8005f56:	d832      	bhi.n	8005fbe <_strtod_l+0x8e>
 8005f58:	2908      	cmp	r1, #8
 8005f5a:	d832      	bhi.n	8005fc2 <_strtod_l+0x92>
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d03b      	beq.n	8005fd8 <_strtod_l+0xa8>
 8005f60:	2200      	movs	r2, #0
 8005f62:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005f64:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005f66:	782a      	ldrb	r2, [r5, #0]
 8005f68:	2a30      	cmp	r2, #48	@ 0x30
 8005f6a:	f040 80b3 	bne.w	80060d4 <_strtod_l+0x1a4>
 8005f6e:	786a      	ldrb	r2, [r5, #1]
 8005f70:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f74:	2a58      	cmp	r2, #88	@ 0x58
 8005f76:	d16e      	bne.n	8006056 <_strtod_l+0x126>
 8005f78:	9302      	str	r3, [sp, #8]
 8005f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	4a8e      	ldr	r2, [pc, #568]	@ (80061bc <_strtod_l+0x28c>)
 8005f84:	9805      	ldr	r0, [sp, #20]
 8005f86:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005f88:	a919      	add	r1, sp, #100	@ 0x64
 8005f8a:	f001 f853 	bl	8007034 <__gethex>
 8005f8e:	f010 060f 	ands.w	r6, r0, #15
 8005f92:	4604      	mov	r4, r0
 8005f94:	d005      	beq.n	8005fa2 <_strtod_l+0x72>
 8005f96:	2e06      	cmp	r6, #6
 8005f98:	d128      	bne.n	8005fec <_strtod_l+0xbc>
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 858e 	bne.w	8006ac6 <_strtod_l+0xb96>
 8005faa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fac:	b1cb      	cbz	r3, 8005fe2 <_strtod_l+0xb2>
 8005fae:	4652      	mov	r2, sl
 8005fb0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005fb4:	ec43 2b10 	vmov	d0, r2, r3
 8005fb8:	b01f      	add	sp, #124	@ 0x7c
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	2920      	cmp	r1, #32
 8005fc0:	d1ce      	bne.n	8005f60 <_strtod_l+0x30>
 8005fc2:	3201      	adds	r2, #1
 8005fc4:	e7c1      	b.n	8005f4a <_strtod_l+0x1a>
 8005fc6:	292d      	cmp	r1, #45	@ 0x2d
 8005fc8:	d1ca      	bne.n	8005f60 <_strtod_l+0x30>
 8005fca:	2101      	movs	r1, #1
 8005fcc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005fce:	1c51      	adds	r1, r2, #1
 8005fd0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005fd2:	7852      	ldrb	r2, [r2, #1]
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	d1c5      	bne.n	8005f64 <_strtod_l+0x34>
 8005fd8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005fda:	9419      	str	r4, [sp, #100]	@ 0x64
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 8570 	bne.w	8006ac2 <_strtod_l+0xb92>
 8005fe2:	4652      	mov	r2, sl
 8005fe4:	465b      	mov	r3, fp
 8005fe6:	e7e5      	b.n	8005fb4 <_strtod_l+0x84>
 8005fe8:	2100      	movs	r1, #0
 8005fea:	e7ef      	b.n	8005fcc <_strtod_l+0x9c>
 8005fec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005fee:	b13a      	cbz	r2, 8006000 <_strtod_l+0xd0>
 8005ff0:	2135      	movs	r1, #53	@ 0x35
 8005ff2:	a81c      	add	r0, sp, #112	@ 0x70
 8005ff4:	f002 f81e 	bl	8008034 <__copybits>
 8005ff8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ffa:	9805      	ldr	r0, [sp, #20]
 8005ffc:	f001 fbec 	bl	80077d8 <_Bfree>
 8006000:	3e01      	subs	r6, #1
 8006002:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006004:	2e04      	cmp	r6, #4
 8006006:	d806      	bhi.n	8006016 <_strtod_l+0xe6>
 8006008:	e8df f006 	tbb	[pc, r6]
 800600c:	201d0314 	.word	0x201d0314
 8006010:	14          	.byte	0x14
 8006011:	00          	.byte	0x00
 8006012:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006016:	05e1      	lsls	r1, r4, #23
 8006018:	bf48      	it	mi
 800601a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800601e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006022:	0d1b      	lsrs	r3, r3, #20
 8006024:	051b      	lsls	r3, r3, #20
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1bb      	bne.n	8005fa2 <_strtod_l+0x72>
 800602a:	f000 ff0b 	bl	8006e44 <__errno>
 800602e:	2322      	movs	r3, #34	@ 0x22
 8006030:	6003      	str	r3, [r0, #0]
 8006032:	e7b6      	b.n	8005fa2 <_strtod_l+0x72>
 8006034:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006038:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800603c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006040:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006044:	e7e7      	b.n	8006016 <_strtod_l+0xe6>
 8006046:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80061c4 <_strtod_l+0x294>
 800604a:	e7e4      	b.n	8006016 <_strtod_l+0xe6>
 800604c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006050:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006054:	e7df      	b.n	8006016 <_strtod_l+0xe6>
 8006056:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	9219      	str	r2, [sp, #100]	@ 0x64
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b30      	cmp	r3, #48	@ 0x30
 8006060:	d0f9      	beq.n	8006056 <_strtod_l+0x126>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d09d      	beq.n	8005fa2 <_strtod_l+0x72>
 8006066:	2301      	movs	r3, #1
 8006068:	9309      	str	r3, [sp, #36]	@ 0x24
 800606a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800606c:	930c      	str	r3, [sp, #48]	@ 0x30
 800606e:	2300      	movs	r3, #0
 8006070:	9308      	str	r3, [sp, #32]
 8006072:	930a      	str	r3, [sp, #40]	@ 0x28
 8006074:	461f      	mov	r7, r3
 8006076:	220a      	movs	r2, #10
 8006078:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800607a:	7805      	ldrb	r5, [r0, #0]
 800607c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006080:	b2d9      	uxtb	r1, r3
 8006082:	2909      	cmp	r1, #9
 8006084:	d928      	bls.n	80060d8 <_strtod_l+0x1a8>
 8006086:	494e      	ldr	r1, [pc, #312]	@ (80061c0 <_strtod_l+0x290>)
 8006088:	2201      	movs	r2, #1
 800608a:	f000 fe82 	bl	8006d92 <strncmp>
 800608e:	2800      	cmp	r0, #0
 8006090:	d032      	beq.n	80060f8 <_strtod_l+0x1c8>
 8006092:	2000      	movs	r0, #0
 8006094:	462a      	mov	r2, r5
 8006096:	4681      	mov	r9, r0
 8006098:	463d      	mov	r5, r7
 800609a:	4603      	mov	r3, r0
 800609c:	2a65      	cmp	r2, #101	@ 0x65
 800609e:	d001      	beq.n	80060a4 <_strtod_l+0x174>
 80060a0:	2a45      	cmp	r2, #69	@ 0x45
 80060a2:	d114      	bne.n	80060ce <_strtod_l+0x19e>
 80060a4:	b91d      	cbnz	r5, 80060ae <_strtod_l+0x17e>
 80060a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060a8:	4302      	orrs	r2, r0
 80060aa:	d095      	beq.n	8005fd8 <_strtod_l+0xa8>
 80060ac:	2500      	movs	r5, #0
 80060ae:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80060b0:	1c62      	adds	r2, r4, #1
 80060b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80060b4:	7862      	ldrb	r2, [r4, #1]
 80060b6:	2a2b      	cmp	r2, #43	@ 0x2b
 80060b8:	d077      	beq.n	80061aa <_strtod_l+0x27a>
 80060ba:	2a2d      	cmp	r2, #45	@ 0x2d
 80060bc:	d07b      	beq.n	80061b6 <_strtod_l+0x286>
 80060be:	f04f 0c00 	mov.w	ip, #0
 80060c2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80060c6:	2909      	cmp	r1, #9
 80060c8:	f240 8082 	bls.w	80061d0 <_strtod_l+0x2a0>
 80060cc:	9419      	str	r4, [sp, #100]	@ 0x64
 80060ce:	f04f 0800 	mov.w	r8, #0
 80060d2:	e0a2      	b.n	800621a <_strtod_l+0x2ea>
 80060d4:	2300      	movs	r3, #0
 80060d6:	e7c7      	b.n	8006068 <_strtod_l+0x138>
 80060d8:	2f08      	cmp	r7, #8
 80060da:	bfd5      	itete	le
 80060dc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80060de:	9908      	ldrgt	r1, [sp, #32]
 80060e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80060e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80060e8:	f100 0001 	add.w	r0, r0, #1
 80060ec:	bfd4      	ite	le
 80060ee:	930a      	strle	r3, [sp, #40]	@ 0x28
 80060f0:	9308      	strgt	r3, [sp, #32]
 80060f2:	3701      	adds	r7, #1
 80060f4:	9019      	str	r0, [sp, #100]	@ 0x64
 80060f6:	e7bf      	b.n	8006078 <_strtod_l+0x148>
 80060f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80060fe:	785a      	ldrb	r2, [r3, #1]
 8006100:	b37f      	cbz	r7, 8006162 <_strtod_l+0x232>
 8006102:	4681      	mov	r9, r0
 8006104:	463d      	mov	r5, r7
 8006106:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800610a:	2b09      	cmp	r3, #9
 800610c:	d912      	bls.n	8006134 <_strtod_l+0x204>
 800610e:	2301      	movs	r3, #1
 8006110:	e7c4      	b.n	800609c <_strtod_l+0x16c>
 8006112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	9219      	str	r2, [sp, #100]	@ 0x64
 8006118:	785a      	ldrb	r2, [r3, #1]
 800611a:	3001      	adds	r0, #1
 800611c:	2a30      	cmp	r2, #48	@ 0x30
 800611e:	d0f8      	beq.n	8006112 <_strtod_l+0x1e2>
 8006120:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006124:	2b08      	cmp	r3, #8
 8006126:	f200 84d3 	bhi.w	8006ad0 <_strtod_l+0xba0>
 800612a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800612c:	930c      	str	r3, [sp, #48]	@ 0x30
 800612e:	4681      	mov	r9, r0
 8006130:	2000      	movs	r0, #0
 8006132:	4605      	mov	r5, r0
 8006134:	3a30      	subs	r2, #48	@ 0x30
 8006136:	f100 0301 	add.w	r3, r0, #1
 800613a:	d02a      	beq.n	8006192 <_strtod_l+0x262>
 800613c:	4499      	add	r9, r3
 800613e:	eb00 0c05 	add.w	ip, r0, r5
 8006142:	462b      	mov	r3, r5
 8006144:	210a      	movs	r1, #10
 8006146:	4563      	cmp	r3, ip
 8006148:	d10d      	bne.n	8006166 <_strtod_l+0x236>
 800614a:	1c69      	adds	r1, r5, #1
 800614c:	4401      	add	r1, r0
 800614e:	4428      	add	r0, r5
 8006150:	2808      	cmp	r0, #8
 8006152:	dc16      	bgt.n	8006182 <_strtod_l+0x252>
 8006154:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006156:	230a      	movs	r3, #10
 8006158:	fb03 2300 	mla	r3, r3, r0, r2
 800615c:	930a      	str	r3, [sp, #40]	@ 0x28
 800615e:	2300      	movs	r3, #0
 8006160:	e018      	b.n	8006194 <_strtod_l+0x264>
 8006162:	4638      	mov	r0, r7
 8006164:	e7da      	b.n	800611c <_strtod_l+0x1ec>
 8006166:	2b08      	cmp	r3, #8
 8006168:	f103 0301 	add.w	r3, r3, #1
 800616c:	dc03      	bgt.n	8006176 <_strtod_l+0x246>
 800616e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006170:	434e      	muls	r6, r1
 8006172:	960a      	str	r6, [sp, #40]	@ 0x28
 8006174:	e7e7      	b.n	8006146 <_strtod_l+0x216>
 8006176:	2b10      	cmp	r3, #16
 8006178:	bfde      	ittt	le
 800617a:	9e08      	ldrle	r6, [sp, #32]
 800617c:	434e      	mulle	r6, r1
 800617e:	9608      	strle	r6, [sp, #32]
 8006180:	e7e1      	b.n	8006146 <_strtod_l+0x216>
 8006182:	280f      	cmp	r0, #15
 8006184:	dceb      	bgt.n	800615e <_strtod_l+0x22e>
 8006186:	9808      	ldr	r0, [sp, #32]
 8006188:	230a      	movs	r3, #10
 800618a:	fb03 2300 	mla	r3, r3, r0, r2
 800618e:	9308      	str	r3, [sp, #32]
 8006190:	e7e5      	b.n	800615e <_strtod_l+0x22e>
 8006192:	4629      	mov	r1, r5
 8006194:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006196:	1c50      	adds	r0, r2, #1
 8006198:	9019      	str	r0, [sp, #100]	@ 0x64
 800619a:	7852      	ldrb	r2, [r2, #1]
 800619c:	4618      	mov	r0, r3
 800619e:	460d      	mov	r5, r1
 80061a0:	e7b1      	b.n	8006106 <_strtod_l+0x1d6>
 80061a2:	f04f 0900 	mov.w	r9, #0
 80061a6:	2301      	movs	r3, #1
 80061a8:	e77d      	b.n	80060a6 <_strtod_l+0x176>
 80061aa:	f04f 0c00 	mov.w	ip, #0
 80061ae:	1ca2      	adds	r2, r4, #2
 80061b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80061b2:	78a2      	ldrb	r2, [r4, #2]
 80061b4:	e785      	b.n	80060c2 <_strtod_l+0x192>
 80061b6:	f04f 0c01 	mov.w	ip, #1
 80061ba:	e7f8      	b.n	80061ae <_strtod_l+0x27e>
 80061bc:	08008ef8 	.word	0x08008ef8
 80061c0:	08008ed4 	.word	0x08008ed4
 80061c4:	7ff00000 	.word	0x7ff00000
 80061c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061ca:	1c51      	adds	r1, r2, #1
 80061cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80061ce:	7852      	ldrb	r2, [r2, #1]
 80061d0:	2a30      	cmp	r2, #48	@ 0x30
 80061d2:	d0f9      	beq.n	80061c8 <_strtod_l+0x298>
 80061d4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80061d8:	2908      	cmp	r1, #8
 80061da:	f63f af78 	bhi.w	80060ce <_strtod_l+0x19e>
 80061de:	3a30      	subs	r2, #48	@ 0x30
 80061e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80061e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80061e6:	f04f 080a 	mov.w	r8, #10
 80061ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061ec:	1c56      	adds	r6, r2, #1
 80061ee:	9619      	str	r6, [sp, #100]	@ 0x64
 80061f0:	7852      	ldrb	r2, [r2, #1]
 80061f2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80061f6:	f1be 0f09 	cmp.w	lr, #9
 80061fa:	d939      	bls.n	8006270 <_strtod_l+0x340>
 80061fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80061fe:	1a76      	subs	r6, r6, r1
 8006200:	2e08      	cmp	r6, #8
 8006202:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006206:	dc03      	bgt.n	8006210 <_strtod_l+0x2e0>
 8006208:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800620a:	4588      	cmp	r8, r1
 800620c:	bfa8      	it	ge
 800620e:	4688      	movge	r8, r1
 8006210:	f1bc 0f00 	cmp.w	ip, #0
 8006214:	d001      	beq.n	800621a <_strtod_l+0x2ea>
 8006216:	f1c8 0800 	rsb	r8, r8, #0
 800621a:	2d00      	cmp	r5, #0
 800621c:	d14e      	bne.n	80062bc <_strtod_l+0x38c>
 800621e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006220:	4308      	orrs	r0, r1
 8006222:	f47f aebe 	bne.w	8005fa2 <_strtod_l+0x72>
 8006226:	2b00      	cmp	r3, #0
 8006228:	f47f aed6 	bne.w	8005fd8 <_strtod_l+0xa8>
 800622c:	2a69      	cmp	r2, #105	@ 0x69
 800622e:	d028      	beq.n	8006282 <_strtod_l+0x352>
 8006230:	dc25      	bgt.n	800627e <_strtod_l+0x34e>
 8006232:	2a49      	cmp	r2, #73	@ 0x49
 8006234:	d025      	beq.n	8006282 <_strtod_l+0x352>
 8006236:	2a4e      	cmp	r2, #78	@ 0x4e
 8006238:	f47f aece 	bne.w	8005fd8 <_strtod_l+0xa8>
 800623c:	499b      	ldr	r1, [pc, #620]	@ (80064ac <_strtod_l+0x57c>)
 800623e:	a819      	add	r0, sp, #100	@ 0x64
 8006240:	f001 f91a 	bl	8007478 <__match>
 8006244:	2800      	cmp	r0, #0
 8006246:	f43f aec7 	beq.w	8005fd8 <_strtod_l+0xa8>
 800624a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	2b28      	cmp	r3, #40	@ 0x28
 8006250:	d12e      	bne.n	80062b0 <_strtod_l+0x380>
 8006252:	4997      	ldr	r1, [pc, #604]	@ (80064b0 <_strtod_l+0x580>)
 8006254:	aa1c      	add	r2, sp, #112	@ 0x70
 8006256:	a819      	add	r0, sp, #100	@ 0x64
 8006258:	f001 f922 	bl	80074a0 <__hexnan>
 800625c:	2805      	cmp	r0, #5
 800625e:	d127      	bne.n	80062b0 <_strtod_l+0x380>
 8006260:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006262:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006266:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800626a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800626e:	e698      	b.n	8005fa2 <_strtod_l+0x72>
 8006270:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006272:	fb08 2101 	mla	r1, r8, r1, r2
 8006276:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800627a:	920e      	str	r2, [sp, #56]	@ 0x38
 800627c:	e7b5      	b.n	80061ea <_strtod_l+0x2ba>
 800627e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006280:	e7da      	b.n	8006238 <_strtod_l+0x308>
 8006282:	498c      	ldr	r1, [pc, #560]	@ (80064b4 <_strtod_l+0x584>)
 8006284:	a819      	add	r0, sp, #100	@ 0x64
 8006286:	f001 f8f7 	bl	8007478 <__match>
 800628a:	2800      	cmp	r0, #0
 800628c:	f43f aea4 	beq.w	8005fd8 <_strtod_l+0xa8>
 8006290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006292:	4989      	ldr	r1, [pc, #548]	@ (80064b8 <_strtod_l+0x588>)
 8006294:	3b01      	subs	r3, #1
 8006296:	a819      	add	r0, sp, #100	@ 0x64
 8006298:	9319      	str	r3, [sp, #100]	@ 0x64
 800629a:	f001 f8ed 	bl	8007478 <__match>
 800629e:	b910      	cbnz	r0, 80062a6 <_strtod_l+0x376>
 80062a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062a2:	3301      	adds	r3, #1
 80062a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80062a6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80064c8 <_strtod_l+0x598>
 80062aa:	f04f 0a00 	mov.w	sl, #0
 80062ae:	e678      	b.n	8005fa2 <_strtod_l+0x72>
 80062b0:	4882      	ldr	r0, [pc, #520]	@ (80064bc <_strtod_l+0x58c>)
 80062b2:	f000 fe05 	bl	8006ec0 <nan>
 80062b6:	ec5b ab10 	vmov	sl, fp, d0
 80062ba:	e672      	b.n	8005fa2 <_strtod_l+0x72>
 80062bc:	eba8 0309 	sub.w	r3, r8, r9
 80062c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c4:	2f00      	cmp	r7, #0
 80062c6:	bf08      	it	eq
 80062c8:	462f      	moveq	r7, r5
 80062ca:	2d10      	cmp	r5, #16
 80062cc:	462c      	mov	r4, r5
 80062ce:	bfa8      	it	ge
 80062d0:	2410      	movge	r4, #16
 80062d2:	f7fa f917 	bl	8000504 <__aeabi_ui2d>
 80062d6:	2d09      	cmp	r5, #9
 80062d8:	4682      	mov	sl, r0
 80062da:	468b      	mov	fp, r1
 80062dc:	dc13      	bgt.n	8006306 <_strtod_l+0x3d6>
 80062de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f43f ae5e 	beq.w	8005fa2 <_strtod_l+0x72>
 80062e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e8:	dd78      	ble.n	80063dc <_strtod_l+0x4ac>
 80062ea:	2b16      	cmp	r3, #22
 80062ec:	dc5f      	bgt.n	80063ae <_strtod_l+0x47e>
 80062ee:	4974      	ldr	r1, [pc, #464]	@ (80064c0 <_strtod_l+0x590>)
 80062f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062f8:	4652      	mov	r2, sl
 80062fa:	465b      	mov	r3, fp
 80062fc:	f7fa f97c 	bl	80005f8 <__aeabi_dmul>
 8006300:	4682      	mov	sl, r0
 8006302:	468b      	mov	fp, r1
 8006304:	e64d      	b.n	8005fa2 <_strtod_l+0x72>
 8006306:	4b6e      	ldr	r3, [pc, #440]	@ (80064c0 <_strtod_l+0x590>)
 8006308:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800630c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006310:	f7fa f972 	bl	80005f8 <__aeabi_dmul>
 8006314:	4682      	mov	sl, r0
 8006316:	9808      	ldr	r0, [sp, #32]
 8006318:	468b      	mov	fp, r1
 800631a:	f7fa f8f3 	bl	8000504 <__aeabi_ui2d>
 800631e:	4602      	mov	r2, r0
 8006320:	460b      	mov	r3, r1
 8006322:	4650      	mov	r0, sl
 8006324:	4659      	mov	r1, fp
 8006326:	f7f9 ffb1 	bl	800028c <__adddf3>
 800632a:	2d0f      	cmp	r5, #15
 800632c:	4682      	mov	sl, r0
 800632e:	468b      	mov	fp, r1
 8006330:	ddd5      	ble.n	80062de <_strtod_l+0x3ae>
 8006332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006334:	1b2c      	subs	r4, r5, r4
 8006336:	441c      	add	r4, r3
 8006338:	2c00      	cmp	r4, #0
 800633a:	f340 8096 	ble.w	800646a <_strtod_l+0x53a>
 800633e:	f014 030f 	ands.w	r3, r4, #15
 8006342:	d00a      	beq.n	800635a <_strtod_l+0x42a>
 8006344:	495e      	ldr	r1, [pc, #376]	@ (80064c0 <_strtod_l+0x590>)
 8006346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800634a:	4652      	mov	r2, sl
 800634c:	465b      	mov	r3, fp
 800634e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006352:	f7fa f951 	bl	80005f8 <__aeabi_dmul>
 8006356:	4682      	mov	sl, r0
 8006358:	468b      	mov	fp, r1
 800635a:	f034 040f 	bics.w	r4, r4, #15
 800635e:	d073      	beq.n	8006448 <_strtod_l+0x518>
 8006360:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006364:	dd48      	ble.n	80063f8 <_strtod_l+0x4c8>
 8006366:	2400      	movs	r4, #0
 8006368:	46a0      	mov	r8, r4
 800636a:	940a      	str	r4, [sp, #40]	@ 0x28
 800636c:	46a1      	mov	r9, r4
 800636e:	9a05      	ldr	r2, [sp, #20]
 8006370:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80064c8 <_strtod_l+0x598>
 8006374:	2322      	movs	r3, #34	@ 0x22
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	f04f 0a00 	mov.w	sl, #0
 800637c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	f43f ae0f 	beq.w	8005fa2 <_strtod_l+0x72>
 8006384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006386:	9805      	ldr	r0, [sp, #20]
 8006388:	f001 fa26 	bl	80077d8 <_Bfree>
 800638c:	9805      	ldr	r0, [sp, #20]
 800638e:	4649      	mov	r1, r9
 8006390:	f001 fa22 	bl	80077d8 <_Bfree>
 8006394:	9805      	ldr	r0, [sp, #20]
 8006396:	4641      	mov	r1, r8
 8006398:	f001 fa1e 	bl	80077d8 <_Bfree>
 800639c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800639e:	9805      	ldr	r0, [sp, #20]
 80063a0:	f001 fa1a 	bl	80077d8 <_Bfree>
 80063a4:	9805      	ldr	r0, [sp, #20]
 80063a6:	4621      	mov	r1, r4
 80063a8:	f001 fa16 	bl	80077d8 <_Bfree>
 80063ac:	e5f9      	b.n	8005fa2 <_strtod_l+0x72>
 80063ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80063b4:	4293      	cmp	r3, r2
 80063b6:	dbbc      	blt.n	8006332 <_strtod_l+0x402>
 80063b8:	4c41      	ldr	r4, [pc, #260]	@ (80064c0 <_strtod_l+0x590>)
 80063ba:	f1c5 050f 	rsb	r5, r5, #15
 80063be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80063c2:	4652      	mov	r2, sl
 80063c4:	465b      	mov	r3, fp
 80063c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ca:	f7fa f915 	bl	80005f8 <__aeabi_dmul>
 80063ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d0:	1b5d      	subs	r5, r3, r5
 80063d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80063d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063da:	e78f      	b.n	80062fc <_strtod_l+0x3cc>
 80063dc:	3316      	adds	r3, #22
 80063de:	dba8      	blt.n	8006332 <_strtod_l+0x402>
 80063e0:	4b37      	ldr	r3, [pc, #220]	@ (80064c0 <_strtod_l+0x590>)
 80063e2:	eba9 0808 	sub.w	r8, r9, r8
 80063e6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80063ea:	e9d8 2300 	ldrd	r2, r3, [r8]
 80063ee:	4650      	mov	r0, sl
 80063f0:	4659      	mov	r1, fp
 80063f2:	f7fa fa2b 	bl	800084c <__aeabi_ddiv>
 80063f6:	e783      	b.n	8006300 <_strtod_l+0x3d0>
 80063f8:	4b32      	ldr	r3, [pc, #200]	@ (80064c4 <_strtod_l+0x594>)
 80063fa:	9308      	str	r3, [sp, #32]
 80063fc:	2300      	movs	r3, #0
 80063fe:	1124      	asrs	r4, r4, #4
 8006400:	4650      	mov	r0, sl
 8006402:	4659      	mov	r1, fp
 8006404:	461e      	mov	r6, r3
 8006406:	2c01      	cmp	r4, #1
 8006408:	dc21      	bgt.n	800644e <_strtod_l+0x51e>
 800640a:	b10b      	cbz	r3, 8006410 <_strtod_l+0x4e0>
 800640c:	4682      	mov	sl, r0
 800640e:	468b      	mov	fp, r1
 8006410:	492c      	ldr	r1, [pc, #176]	@ (80064c4 <_strtod_l+0x594>)
 8006412:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006416:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800641a:	4652      	mov	r2, sl
 800641c:	465b      	mov	r3, fp
 800641e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006422:	f7fa f8e9 	bl	80005f8 <__aeabi_dmul>
 8006426:	4b28      	ldr	r3, [pc, #160]	@ (80064c8 <_strtod_l+0x598>)
 8006428:	460a      	mov	r2, r1
 800642a:	400b      	ands	r3, r1
 800642c:	4927      	ldr	r1, [pc, #156]	@ (80064cc <_strtod_l+0x59c>)
 800642e:	428b      	cmp	r3, r1
 8006430:	4682      	mov	sl, r0
 8006432:	d898      	bhi.n	8006366 <_strtod_l+0x436>
 8006434:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006438:	428b      	cmp	r3, r1
 800643a:	bf86      	itte	hi
 800643c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80064d0 <_strtod_l+0x5a0>
 8006440:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006444:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006448:	2300      	movs	r3, #0
 800644a:	9308      	str	r3, [sp, #32]
 800644c:	e07a      	b.n	8006544 <_strtod_l+0x614>
 800644e:	07e2      	lsls	r2, r4, #31
 8006450:	d505      	bpl.n	800645e <_strtod_l+0x52e>
 8006452:	9b08      	ldr	r3, [sp, #32]
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f7fa f8ce 	bl	80005f8 <__aeabi_dmul>
 800645c:	2301      	movs	r3, #1
 800645e:	9a08      	ldr	r2, [sp, #32]
 8006460:	3208      	adds	r2, #8
 8006462:	3601      	adds	r6, #1
 8006464:	1064      	asrs	r4, r4, #1
 8006466:	9208      	str	r2, [sp, #32]
 8006468:	e7cd      	b.n	8006406 <_strtod_l+0x4d6>
 800646a:	d0ed      	beq.n	8006448 <_strtod_l+0x518>
 800646c:	4264      	negs	r4, r4
 800646e:	f014 020f 	ands.w	r2, r4, #15
 8006472:	d00a      	beq.n	800648a <_strtod_l+0x55a>
 8006474:	4b12      	ldr	r3, [pc, #72]	@ (80064c0 <_strtod_l+0x590>)
 8006476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800647a:	4650      	mov	r0, sl
 800647c:	4659      	mov	r1, fp
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7fa f9e3 	bl	800084c <__aeabi_ddiv>
 8006486:	4682      	mov	sl, r0
 8006488:	468b      	mov	fp, r1
 800648a:	1124      	asrs	r4, r4, #4
 800648c:	d0dc      	beq.n	8006448 <_strtod_l+0x518>
 800648e:	2c1f      	cmp	r4, #31
 8006490:	dd20      	ble.n	80064d4 <_strtod_l+0x5a4>
 8006492:	2400      	movs	r4, #0
 8006494:	46a0      	mov	r8, r4
 8006496:	940a      	str	r4, [sp, #40]	@ 0x28
 8006498:	46a1      	mov	r9, r4
 800649a:	9a05      	ldr	r2, [sp, #20]
 800649c:	2322      	movs	r3, #34	@ 0x22
 800649e:	f04f 0a00 	mov.w	sl, #0
 80064a2:	f04f 0b00 	mov.w	fp, #0
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e768      	b.n	800637c <_strtod_l+0x44c>
 80064aa:	bf00      	nop
 80064ac:	08008edf 	.word	0x08008edf
 80064b0:	08008ee4 	.word	0x08008ee4
 80064b4:	08008ed6 	.word	0x08008ed6
 80064b8:	08008ed9 	.word	0x08008ed9
 80064bc:	0800928f 	.word	0x0800928f
 80064c0:	08009058 	.word	0x08009058
 80064c4:	08009030 	.word	0x08009030
 80064c8:	7ff00000 	.word	0x7ff00000
 80064cc:	7ca00000 	.word	0x7ca00000
 80064d0:	7fefffff 	.word	0x7fefffff
 80064d4:	f014 0310 	ands.w	r3, r4, #16
 80064d8:	bf18      	it	ne
 80064da:	236a      	movne	r3, #106	@ 0x6a
 80064dc:	4ea9      	ldr	r6, [pc, #676]	@ (8006784 <_strtod_l+0x854>)
 80064de:	9308      	str	r3, [sp, #32]
 80064e0:	4650      	mov	r0, sl
 80064e2:	4659      	mov	r1, fp
 80064e4:	2300      	movs	r3, #0
 80064e6:	07e2      	lsls	r2, r4, #31
 80064e8:	d504      	bpl.n	80064f4 <_strtod_l+0x5c4>
 80064ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064ee:	f7fa f883 	bl	80005f8 <__aeabi_dmul>
 80064f2:	2301      	movs	r3, #1
 80064f4:	1064      	asrs	r4, r4, #1
 80064f6:	f106 0608 	add.w	r6, r6, #8
 80064fa:	d1f4      	bne.n	80064e6 <_strtod_l+0x5b6>
 80064fc:	b10b      	cbz	r3, 8006502 <_strtod_l+0x5d2>
 80064fe:	4682      	mov	sl, r0
 8006500:	468b      	mov	fp, r1
 8006502:	9b08      	ldr	r3, [sp, #32]
 8006504:	b1b3      	cbz	r3, 8006534 <_strtod_l+0x604>
 8006506:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800650a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800650e:	2b00      	cmp	r3, #0
 8006510:	4659      	mov	r1, fp
 8006512:	dd0f      	ble.n	8006534 <_strtod_l+0x604>
 8006514:	2b1f      	cmp	r3, #31
 8006516:	dd55      	ble.n	80065c4 <_strtod_l+0x694>
 8006518:	2b34      	cmp	r3, #52	@ 0x34
 800651a:	bfde      	ittt	le
 800651c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006520:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006524:	4093      	lslle	r3, r2
 8006526:	f04f 0a00 	mov.w	sl, #0
 800652a:	bfcc      	ite	gt
 800652c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006530:	ea03 0b01 	andle.w	fp, r3, r1
 8006534:	2200      	movs	r2, #0
 8006536:	2300      	movs	r3, #0
 8006538:	4650      	mov	r0, sl
 800653a:	4659      	mov	r1, fp
 800653c:	f7fa fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006540:	2800      	cmp	r0, #0
 8006542:	d1a6      	bne.n	8006492 <_strtod_l+0x562>
 8006544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800654a:	9805      	ldr	r0, [sp, #20]
 800654c:	462b      	mov	r3, r5
 800654e:	463a      	mov	r2, r7
 8006550:	f001 f9aa 	bl	80078a8 <__s2b>
 8006554:	900a      	str	r0, [sp, #40]	@ 0x28
 8006556:	2800      	cmp	r0, #0
 8006558:	f43f af05 	beq.w	8006366 <_strtod_l+0x436>
 800655c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800655e:	2a00      	cmp	r2, #0
 8006560:	eba9 0308 	sub.w	r3, r9, r8
 8006564:	bfa8      	it	ge
 8006566:	2300      	movge	r3, #0
 8006568:	9312      	str	r3, [sp, #72]	@ 0x48
 800656a:	2400      	movs	r4, #0
 800656c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006570:	9316      	str	r3, [sp, #88]	@ 0x58
 8006572:	46a0      	mov	r8, r4
 8006574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006576:	9805      	ldr	r0, [sp, #20]
 8006578:	6859      	ldr	r1, [r3, #4]
 800657a:	f001 f8ed 	bl	8007758 <_Balloc>
 800657e:	4681      	mov	r9, r0
 8006580:	2800      	cmp	r0, #0
 8006582:	f43f aef4 	beq.w	800636e <_strtod_l+0x43e>
 8006586:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	3202      	adds	r2, #2
 800658c:	f103 010c 	add.w	r1, r3, #12
 8006590:	0092      	lsls	r2, r2, #2
 8006592:	300c      	adds	r0, #12
 8006594:	f000 fc83 	bl	8006e9e <memcpy>
 8006598:	ec4b ab10 	vmov	d0, sl, fp
 800659c:	9805      	ldr	r0, [sp, #20]
 800659e:	aa1c      	add	r2, sp, #112	@ 0x70
 80065a0:	a91b      	add	r1, sp, #108	@ 0x6c
 80065a2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80065a6:	f001 fcbb 	bl	8007f20 <__d2b>
 80065aa:	901a      	str	r0, [sp, #104]	@ 0x68
 80065ac:	2800      	cmp	r0, #0
 80065ae:	f43f aede 	beq.w	800636e <_strtod_l+0x43e>
 80065b2:	9805      	ldr	r0, [sp, #20]
 80065b4:	2101      	movs	r1, #1
 80065b6:	f001 fa0d 	bl	80079d4 <__i2b>
 80065ba:	4680      	mov	r8, r0
 80065bc:	b948      	cbnz	r0, 80065d2 <_strtod_l+0x6a2>
 80065be:	f04f 0800 	mov.w	r8, #0
 80065c2:	e6d4      	b.n	800636e <_strtod_l+0x43e>
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	ea03 0a0a 	and.w	sl, r3, sl
 80065d0:	e7b0      	b.n	8006534 <_strtod_l+0x604>
 80065d2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80065d4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	bfab      	itete	ge
 80065da:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80065dc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80065de:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80065e0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80065e2:	bfac      	ite	ge
 80065e4:	18ef      	addge	r7, r5, r3
 80065e6:	1b5e      	sublt	r6, r3, r5
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	1aed      	subs	r5, r5, r3
 80065ec:	4415      	add	r5, r2
 80065ee:	4b66      	ldr	r3, [pc, #408]	@ (8006788 <_strtod_l+0x858>)
 80065f0:	3d01      	subs	r5, #1
 80065f2:	429d      	cmp	r5, r3
 80065f4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80065f8:	da50      	bge.n	800669c <_strtod_l+0x76c>
 80065fa:	1b5b      	subs	r3, r3, r5
 80065fc:	2b1f      	cmp	r3, #31
 80065fe:	eba2 0203 	sub.w	r2, r2, r3
 8006602:	f04f 0101 	mov.w	r1, #1
 8006606:	dc3d      	bgt.n	8006684 <_strtod_l+0x754>
 8006608:	fa01 f303 	lsl.w	r3, r1, r3
 800660c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800660e:	2300      	movs	r3, #0
 8006610:	9310      	str	r3, [sp, #64]	@ 0x40
 8006612:	18bd      	adds	r5, r7, r2
 8006614:	9b08      	ldr	r3, [sp, #32]
 8006616:	42af      	cmp	r7, r5
 8006618:	4416      	add	r6, r2
 800661a:	441e      	add	r6, r3
 800661c:	463b      	mov	r3, r7
 800661e:	bfa8      	it	ge
 8006620:	462b      	movge	r3, r5
 8006622:	42b3      	cmp	r3, r6
 8006624:	bfa8      	it	ge
 8006626:	4633      	movge	r3, r6
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfc2      	ittt	gt
 800662c:	1aed      	subgt	r5, r5, r3
 800662e:	1af6      	subgt	r6, r6, r3
 8006630:	1aff      	subgt	r7, r7, r3
 8006632:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006634:	2b00      	cmp	r3, #0
 8006636:	dd16      	ble.n	8006666 <_strtod_l+0x736>
 8006638:	4641      	mov	r1, r8
 800663a:	9805      	ldr	r0, [sp, #20]
 800663c:	461a      	mov	r2, r3
 800663e:	f001 fa89 	bl	8007b54 <__pow5mult>
 8006642:	4680      	mov	r8, r0
 8006644:	2800      	cmp	r0, #0
 8006646:	d0ba      	beq.n	80065be <_strtod_l+0x68e>
 8006648:	4601      	mov	r1, r0
 800664a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800664c:	9805      	ldr	r0, [sp, #20]
 800664e:	f001 f9d7 	bl	8007a00 <__multiply>
 8006652:	900e      	str	r0, [sp, #56]	@ 0x38
 8006654:	2800      	cmp	r0, #0
 8006656:	f43f ae8a 	beq.w	800636e <_strtod_l+0x43e>
 800665a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800665c:	9805      	ldr	r0, [sp, #20]
 800665e:	f001 f8bb 	bl	80077d8 <_Bfree>
 8006662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006664:	931a      	str	r3, [sp, #104]	@ 0x68
 8006666:	2d00      	cmp	r5, #0
 8006668:	dc1d      	bgt.n	80066a6 <_strtod_l+0x776>
 800666a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd23      	ble.n	80066b8 <_strtod_l+0x788>
 8006670:	4649      	mov	r1, r9
 8006672:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006674:	9805      	ldr	r0, [sp, #20]
 8006676:	f001 fa6d 	bl	8007b54 <__pow5mult>
 800667a:	4681      	mov	r9, r0
 800667c:	b9e0      	cbnz	r0, 80066b8 <_strtod_l+0x788>
 800667e:	f04f 0900 	mov.w	r9, #0
 8006682:	e674      	b.n	800636e <_strtod_l+0x43e>
 8006684:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006688:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800668c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006690:	35e2      	adds	r5, #226	@ 0xe2
 8006692:	fa01 f305 	lsl.w	r3, r1, r5
 8006696:	9310      	str	r3, [sp, #64]	@ 0x40
 8006698:	9113      	str	r1, [sp, #76]	@ 0x4c
 800669a:	e7ba      	b.n	8006612 <_strtod_l+0x6e2>
 800669c:	2300      	movs	r3, #0
 800669e:	9310      	str	r3, [sp, #64]	@ 0x40
 80066a0:	2301      	movs	r3, #1
 80066a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80066a4:	e7b5      	b.n	8006612 <_strtod_l+0x6e2>
 80066a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066a8:	9805      	ldr	r0, [sp, #20]
 80066aa:	462a      	mov	r2, r5
 80066ac:	f001 faac 	bl	8007c08 <__lshift>
 80066b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d1d9      	bne.n	800666a <_strtod_l+0x73a>
 80066b6:	e65a      	b.n	800636e <_strtod_l+0x43e>
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	dd07      	ble.n	80066cc <_strtod_l+0x79c>
 80066bc:	4649      	mov	r1, r9
 80066be:	9805      	ldr	r0, [sp, #20]
 80066c0:	4632      	mov	r2, r6
 80066c2:	f001 faa1 	bl	8007c08 <__lshift>
 80066c6:	4681      	mov	r9, r0
 80066c8:	2800      	cmp	r0, #0
 80066ca:	d0d8      	beq.n	800667e <_strtod_l+0x74e>
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	dd08      	ble.n	80066e2 <_strtod_l+0x7b2>
 80066d0:	4641      	mov	r1, r8
 80066d2:	9805      	ldr	r0, [sp, #20]
 80066d4:	463a      	mov	r2, r7
 80066d6:	f001 fa97 	bl	8007c08 <__lshift>
 80066da:	4680      	mov	r8, r0
 80066dc:	2800      	cmp	r0, #0
 80066de:	f43f ae46 	beq.w	800636e <_strtod_l+0x43e>
 80066e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80066e4:	9805      	ldr	r0, [sp, #20]
 80066e6:	464a      	mov	r2, r9
 80066e8:	f001 fb16 	bl	8007d18 <__mdiff>
 80066ec:	4604      	mov	r4, r0
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f43f ae3d 	beq.w	800636e <_strtod_l+0x43e>
 80066f4:	68c3      	ldr	r3, [r0, #12]
 80066f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066f8:	2300      	movs	r3, #0
 80066fa:	60c3      	str	r3, [r0, #12]
 80066fc:	4641      	mov	r1, r8
 80066fe:	f001 faef 	bl	8007ce0 <__mcmp>
 8006702:	2800      	cmp	r0, #0
 8006704:	da46      	bge.n	8006794 <_strtod_l+0x864>
 8006706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006708:	ea53 030a 	orrs.w	r3, r3, sl
 800670c:	d16c      	bne.n	80067e8 <_strtod_l+0x8b8>
 800670e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006712:	2b00      	cmp	r3, #0
 8006714:	d168      	bne.n	80067e8 <_strtod_l+0x8b8>
 8006716:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800671a:	0d1b      	lsrs	r3, r3, #20
 800671c:	051b      	lsls	r3, r3, #20
 800671e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006722:	d961      	bls.n	80067e8 <_strtod_l+0x8b8>
 8006724:	6963      	ldr	r3, [r4, #20]
 8006726:	b913      	cbnz	r3, 800672e <_strtod_l+0x7fe>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	2b01      	cmp	r3, #1
 800672c:	dd5c      	ble.n	80067e8 <_strtod_l+0x8b8>
 800672e:	4621      	mov	r1, r4
 8006730:	2201      	movs	r2, #1
 8006732:	9805      	ldr	r0, [sp, #20]
 8006734:	f001 fa68 	bl	8007c08 <__lshift>
 8006738:	4641      	mov	r1, r8
 800673a:	4604      	mov	r4, r0
 800673c:	f001 fad0 	bl	8007ce0 <__mcmp>
 8006740:	2800      	cmp	r0, #0
 8006742:	dd51      	ble.n	80067e8 <_strtod_l+0x8b8>
 8006744:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006748:	9a08      	ldr	r2, [sp, #32]
 800674a:	0d1b      	lsrs	r3, r3, #20
 800674c:	051b      	lsls	r3, r3, #20
 800674e:	2a00      	cmp	r2, #0
 8006750:	d06b      	beq.n	800682a <_strtod_l+0x8fa>
 8006752:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006756:	d868      	bhi.n	800682a <_strtod_l+0x8fa>
 8006758:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800675c:	f67f ae9d 	bls.w	800649a <_strtod_l+0x56a>
 8006760:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <_strtod_l+0x85c>)
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	2200      	movs	r2, #0
 8006768:	f7f9 ff46 	bl	80005f8 <__aeabi_dmul>
 800676c:	4b08      	ldr	r3, [pc, #32]	@ (8006790 <_strtod_l+0x860>)
 800676e:	400b      	ands	r3, r1
 8006770:	4682      	mov	sl, r0
 8006772:	468b      	mov	fp, r1
 8006774:	2b00      	cmp	r3, #0
 8006776:	f47f ae05 	bne.w	8006384 <_strtod_l+0x454>
 800677a:	9a05      	ldr	r2, [sp, #20]
 800677c:	2322      	movs	r3, #34	@ 0x22
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	e600      	b.n	8006384 <_strtod_l+0x454>
 8006782:	bf00      	nop
 8006784:	08008f10 	.word	0x08008f10
 8006788:	fffffc02 	.word	0xfffffc02
 800678c:	39500000 	.word	0x39500000
 8006790:	7ff00000 	.word	0x7ff00000
 8006794:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006798:	d165      	bne.n	8006866 <_strtod_l+0x936>
 800679a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800679c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067a0:	b35a      	cbz	r2, 80067fa <_strtod_l+0x8ca>
 80067a2:	4a9f      	ldr	r2, [pc, #636]	@ (8006a20 <_strtod_l+0xaf0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d12b      	bne.n	8006800 <_strtod_l+0x8d0>
 80067a8:	9b08      	ldr	r3, [sp, #32]
 80067aa:	4651      	mov	r1, sl
 80067ac:	b303      	cbz	r3, 80067f0 <_strtod_l+0x8c0>
 80067ae:	4b9d      	ldr	r3, [pc, #628]	@ (8006a24 <_strtod_l+0xaf4>)
 80067b0:	465a      	mov	r2, fp
 80067b2:	4013      	ands	r3, r2
 80067b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067bc:	d81b      	bhi.n	80067f6 <_strtod_l+0x8c6>
 80067be:	0d1b      	lsrs	r3, r3, #20
 80067c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d119      	bne.n	8006800 <_strtod_l+0x8d0>
 80067cc:	4b96      	ldr	r3, [pc, #600]	@ (8006a28 <_strtod_l+0xaf8>)
 80067ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d102      	bne.n	80067da <_strtod_l+0x8aa>
 80067d4:	3101      	adds	r1, #1
 80067d6:	f43f adca 	beq.w	800636e <_strtod_l+0x43e>
 80067da:	4b92      	ldr	r3, [pc, #584]	@ (8006a24 <_strtod_l+0xaf4>)
 80067dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067de:	401a      	ands	r2, r3
 80067e0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80067e4:	f04f 0a00 	mov.w	sl, #0
 80067e8:	9b08      	ldr	r3, [sp, #32]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1b8      	bne.n	8006760 <_strtod_l+0x830>
 80067ee:	e5c9      	b.n	8006384 <_strtod_l+0x454>
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067f4:	e7e8      	b.n	80067c8 <_strtod_l+0x898>
 80067f6:	4613      	mov	r3, r2
 80067f8:	e7e6      	b.n	80067c8 <_strtod_l+0x898>
 80067fa:	ea53 030a 	orrs.w	r3, r3, sl
 80067fe:	d0a1      	beq.n	8006744 <_strtod_l+0x814>
 8006800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006802:	b1db      	cbz	r3, 800683c <_strtod_l+0x90c>
 8006804:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006806:	4213      	tst	r3, r2
 8006808:	d0ee      	beq.n	80067e8 <_strtod_l+0x8b8>
 800680a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800680c:	9a08      	ldr	r2, [sp, #32]
 800680e:	4650      	mov	r0, sl
 8006810:	4659      	mov	r1, fp
 8006812:	b1bb      	cbz	r3, 8006844 <_strtod_l+0x914>
 8006814:	f7ff fb6d 	bl	8005ef2 <sulp>
 8006818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800681c:	ec53 2b10 	vmov	r2, r3, d0
 8006820:	f7f9 fd34 	bl	800028c <__adddf3>
 8006824:	4682      	mov	sl, r0
 8006826:	468b      	mov	fp, r1
 8006828:	e7de      	b.n	80067e8 <_strtod_l+0x8b8>
 800682a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800682e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006832:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006836:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800683a:	e7d5      	b.n	80067e8 <_strtod_l+0x8b8>
 800683c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800683e:	ea13 0f0a 	tst.w	r3, sl
 8006842:	e7e1      	b.n	8006808 <_strtod_l+0x8d8>
 8006844:	f7ff fb55 	bl	8005ef2 <sulp>
 8006848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800684c:	ec53 2b10 	vmov	r2, r3, d0
 8006850:	f7f9 fd1a 	bl	8000288 <__aeabi_dsub>
 8006854:	2200      	movs	r2, #0
 8006856:	2300      	movs	r3, #0
 8006858:	4682      	mov	sl, r0
 800685a:	468b      	mov	fp, r1
 800685c:	f7fa f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8006860:	2800      	cmp	r0, #0
 8006862:	d0c1      	beq.n	80067e8 <_strtod_l+0x8b8>
 8006864:	e619      	b.n	800649a <_strtod_l+0x56a>
 8006866:	4641      	mov	r1, r8
 8006868:	4620      	mov	r0, r4
 800686a:	f001 fbb1 	bl	8007fd0 <__ratio>
 800686e:	ec57 6b10 	vmov	r6, r7, d0
 8006872:	2200      	movs	r2, #0
 8006874:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006878:	4630      	mov	r0, r6
 800687a:	4639      	mov	r1, r7
 800687c:	f7fa f938 	bl	8000af0 <__aeabi_dcmple>
 8006880:	2800      	cmp	r0, #0
 8006882:	d06f      	beq.n	8006964 <_strtod_l+0xa34>
 8006884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006886:	2b00      	cmp	r3, #0
 8006888:	d17a      	bne.n	8006980 <_strtod_l+0xa50>
 800688a:	f1ba 0f00 	cmp.w	sl, #0
 800688e:	d158      	bne.n	8006942 <_strtod_l+0xa12>
 8006890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006896:	2b00      	cmp	r3, #0
 8006898:	d15a      	bne.n	8006950 <_strtod_l+0xa20>
 800689a:	4b64      	ldr	r3, [pc, #400]	@ (8006a2c <_strtod_l+0xafc>)
 800689c:	2200      	movs	r2, #0
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7fa f91b 	bl	8000adc <__aeabi_dcmplt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d159      	bne.n	800695e <_strtod_l+0xa2e>
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	4b60      	ldr	r3, [pc, #384]	@ (8006a30 <_strtod_l+0xb00>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	4606      	mov	r6, r0
 80068b8:	460f      	mov	r7, r1
 80068ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80068be:	9606      	str	r6, [sp, #24]
 80068c0:	9307      	str	r3, [sp, #28]
 80068c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068c6:	4d57      	ldr	r5, [pc, #348]	@ (8006a24 <_strtod_l+0xaf4>)
 80068c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80068cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068ce:	401d      	ands	r5, r3
 80068d0:	4b58      	ldr	r3, [pc, #352]	@ (8006a34 <_strtod_l+0xb04>)
 80068d2:	429d      	cmp	r5, r3
 80068d4:	f040 80b2 	bne.w	8006a3c <_strtod_l+0xb0c>
 80068d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80068de:	ec4b ab10 	vmov	d0, sl, fp
 80068e2:	f001 faad 	bl	8007e40 <__ulp>
 80068e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068ea:	ec51 0b10 	vmov	r0, r1, d0
 80068ee:	f7f9 fe83 	bl	80005f8 <__aeabi_dmul>
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	f7f9 fcc9 	bl	800028c <__adddf3>
 80068fa:	460b      	mov	r3, r1
 80068fc:	4949      	ldr	r1, [pc, #292]	@ (8006a24 <_strtod_l+0xaf4>)
 80068fe:	4a4e      	ldr	r2, [pc, #312]	@ (8006a38 <_strtod_l+0xb08>)
 8006900:	4019      	ands	r1, r3
 8006902:	4291      	cmp	r1, r2
 8006904:	4682      	mov	sl, r0
 8006906:	d942      	bls.n	800698e <_strtod_l+0xa5e>
 8006908:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800690a:	4b47      	ldr	r3, [pc, #284]	@ (8006a28 <_strtod_l+0xaf8>)
 800690c:	429a      	cmp	r2, r3
 800690e:	d103      	bne.n	8006918 <_strtod_l+0x9e8>
 8006910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006912:	3301      	adds	r3, #1
 8006914:	f43f ad2b 	beq.w	800636e <_strtod_l+0x43e>
 8006918:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006a28 <_strtod_l+0xaf8>
 800691c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006920:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006922:	9805      	ldr	r0, [sp, #20]
 8006924:	f000 ff58 	bl	80077d8 <_Bfree>
 8006928:	9805      	ldr	r0, [sp, #20]
 800692a:	4649      	mov	r1, r9
 800692c:	f000 ff54 	bl	80077d8 <_Bfree>
 8006930:	9805      	ldr	r0, [sp, #20]
 8006932:	4641      	mov	r1, r8
 8006934:	f000 ff50 	bl	80077d8 <_Bfree>
 8006938:	9805      	ldr	r0, [sp, #20]
 800693a:	4621      	mov	r1, r4
 800693c:	f000 ff4c 	bl	80077d8 <_Bfree>
 8006940:	e618      	b.n	8006574 <_strtod_l+0x644>
 8006942:	f1ba 0f01 	cmp.w	sl, #1
 8006946:	d103      	bne.n	8006950 <_strtod_l+0xa20>
 8006948:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800694a:	2b00      	cmp	r3, #0
 800694c:	f43f ada5 	beq.w	800649a <_strtod_l+0x56a>
 8006950:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006a00 <_strtod_l+0xad0>
 8006954:	4f35      	ldr	r7, [pc, #212]	@ (8006a2c <_strtod_l+0xafc>)
 8006956:	ed8d 7b06 	vstr	d7, [sp, #24]
 800695a:	2600      	movs	r6, #0
 800695c:	e7b1      	b.n	80068c2 <_strtod_l+0x992>
 800695e:	4f34      	ldr	r7, [pc, #208]	@ (8006a30 <_strtod_l+0xb00>)
 8006960:	2600      	movs	r6, #0
 8006962:	e7aa      	b.n	80068ba <_strtod_l+0x98a>
 8006964:	4b32      	ldr	r3, [pc, #200]	@ (8006a30 <_strtod_l+0xb00>)
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	2200      	movs	r2, #0
 800696c:	f7f9 fe44 	bl	80005f8 <__aeabi_dmul>
 8006970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006972:	4606      	mov	r6, r0
 8006974:	460f      	mov	r7, r1
 8006976:	2b00      	cmp	r3, #0
 8006978:	d09f      	beq.n	80068ba <_strtod_l+0x98a>
 800697a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800697e:	e7a0      	b.n	80068c2 <_strtod_l+0x992>
 8006980:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006a08 <_strtod_l+0xad8>
 8006984:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006988:	ec57 6b17 	vmov	r6, r7, d7
 800698c:	e799      	b.n	80068c2 <_strtod_l+0x992>
 800698e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006992:	9b08      	ldr	r3, [sp, #32]
 8006994:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1c1      	bne.n	8006920 <_strtod_l+0x9f0>
 800699c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	051b      	lsls	r3, r3, #20
 80069a4:	429d      	cmp	r5, r3
 80069a6:	d1bb      	bne.n	8006920 <_strtod_l+0x9f0>
 80069a8:	4630      	mov	r0, r6
 80069aa:	4639      	mov	r1, r7
 80069ac:	f7fa f8f6 	bl	8000b9c <__aeabi_d2lz>
 80069b0:	f7f9 fdf4 	bl	800059c <__aeabi_l2d>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 fc64 	bl	8000288 <__aeabi_dsub>
 80069c0:	460b      	mov	r3, r1
 80069c2:	4602      	mov	r2, r0
 80069c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80069c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80069cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ce:	ea46 060a 	orr.w	r6, r6, sl
 80069d2:	431e      	orrs	r6, r3
 80069d4:	d06f      	beq.n	8006ab6 <_strtod_l+0xb86>
 80069d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a10 <_strtod_l+0xae0>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7fa f87e 	bl	8000adc <__aeabi_dcmplt>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	f47f accf 	bne.w	8006384 <_strtod_l+0x454>
 80069e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006a18 <_strtod_l+0xae8>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069f0:	f7fa f892 	bl	8000b18 <__aeabi_dcmpgt>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d093      	beq.n	8006920 <_strtod_l+0x9f0>
 80069f8:	e4c4      	b.n	8006384 <_strtod_l+0x454>
 80069fa:	bf00      	nop
 80069fc:	f3af 8000 	nop.w
 8006a00:	00000000 	.word	0x00000000
 8006a04:	bff00000 	.word	0xbff00000
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	3ff00000 	.word	0x3ff00000
 8006a10:	94a03595 	.word	0x94a03595
 8006a14:	3fdfffff 	.word	0x3fdfffff
 8006a18:	35afe535 	.word	0x35afe535
 8006a1c:	3fe00000 	.word	0x3fe00000
 8006a20:	000fffff 	.word	0x000fffff
 8006a24:	7ff00000 	.word	0x7ff00000
 8006a28:	7fefffff 	.word	0x7fefffff
 8006a2c:	3ff00000 	.word	0x3ff00000
 8006a30:	3fe00000 	.word	0x3fe00000
 8006a34:	7fe00000 	.word	0x7fe00000
 8006a38:	7c9fffff 	.word	0x7c9fffff
 8006a3c:	9b08      	ldr	r3, [sp, #32]
 8006a3e:	b323      	cbz	r3, 8006a8a <_strtod_l+0xb5a>
 8006a40:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006a44:	d821      	bhi.n	8006a8a <_strtod_l+0xb5a>
 8006a46:	a328      	add	r3, pc, #160	@ (adr r3, 8006ae8 <_strtod_l+0xbb8>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f7fa f84e 	bl	8000af0 <__aeabi_dcmple>
 8006a54:	b1a0      	cbz	r0, 8006a80 <_strtod_l+0xb50>
 8006a56:	4639      	mov	r1, r7
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7fa f867 	bl	8000b2c <__aeabi_d2uiz>
 8006a5e:	2801      	cmp	r0, #1
 8006a60:	bf38      	it	cc
 8006a62:	2001      	movcc	r0, #1
 8006a64:	f7f9 fd4e 	bl	8000504 <__aeabi_ui2d>
 8006a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	b9fb      	cbnz	r3, 8006ab0 <_strtod_l+0xb80>
 8006a70:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a74:	9014      	str	r0, [sp, #80]	@ 0x50
 8006a76:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006a7c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006a80:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006a82:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006a86:	1b5b      	subs	r3, r3, r5
 8006a88:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a8a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a8e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006a92:	f001 f9d5 	bl	8007e40 <__ulp>
 8006a96:	4650      	mov	r0, sl
 8006a98:	ec53 2b10 	vmov	r2, r3, d0
 8006a9c:	4659      	mov	r1, fp
 8006a9e:	f7f9 fdab 	bl	80005f8 <__aeabi_dmul>
 8006aa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006aa6:	f7f9 fbf1 	bl	800028c <__adddf3>
 8006aaa:	4682      	mov	sl, r0
 8006aac:	468b      	mov	fp, r1
 8006aae:	e770      	b.n	8006992 <_strtod_l+0xa62>
 8006ab0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006ab4:	e7e0      	b.n	8006a78 <_strtod_l+0xb48>
 8006ab6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006af0 <_strtod_l+0xbc0>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7fa f80e 	bl	8000adc <__aeabi_dcmplt>
 8006ac0:	e798      	b.n	80069f4 <_strtod_l+0xac4>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ac6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006ac8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	f7ff ba6d 	b.w	8005faa <_strtod_l+0x7a>
 8006ad0:	2a65      	cmp	r2, #101	@ 0x65
 8006ad2:	f43f ab66 	beq.w	80061a2 <_strtod_l+0x272>
 8006ad6:	2a45      	cmp	r2, #69	@ 0x45
 8006ad8:	f43f ab63 	beq.w	80061a2 <_strtod_l+0x272>
 8006adc:	2301      	movs	r3, #1
 8006ade:	f7ff bb9e 	b.w	800621e <_strtod_l+0x2ee>
 8006ae2:	bf00      	nop
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	ffc00000 	.word	0xffc00000
 8006aec:	41dfffff 	.word	0x41dfffff
 8006af0:	94a03595 	.word	0x94a03595
 8006af4:	3fcfffff 	.word	0x3fcfffff

08006af8 <strtod>:
 8006af8:	460a      	mov	r2, r1
 8006afa:	4601      	mov	r1, r0
 8006afc:	4802      	ldr	r0, [pc, #8]	@ (8006b08 <strtod+0x10>)
 8006afe:	4b03      	ldr	r3, [pc, #12]	@ (8006b0c <strtod+0x14>)
 8006b00:	6800      	ldr	r0, [r0, #0]
 8006b02:	f7ff ba15 	b.w	8005f30 <_strtod_l>
 8006b06:	bf00      	nop
 8006b08:	20000184 	.word	0x20000184
 8006b0c:	20000018 	.word	0x20000018

08006b10 <std>:
 8006b10:	2300      	movs	r3, #0
 8006b12:	b510      	push	{r4, lr}
 8006b14:	4604      	mov	r4, r0
 8006b16:	e9c0 3300 	strd	r3, r3, [r0]
 8006b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b1e:	6083      	str	r3, [r0, #8]
 8006b20:	8181      	strh	r1, [r0, #12]
 8006b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b24:	81c2      	strh	r2, [r0, #14]
 8006b26:	6183      	str	r3, [r0, #24]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	305c      	adds	r0, #92	@ 0x5c
 8006b2e:	f000 f928 	bl	8006d82 <memset>
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <std+0x58>)
 8006b34:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <std+0x5c>)
 8006b38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <std+0x60>)
 8006b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x64>)
 8006b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x68>)
 8006b44:	6224      	str	r4, [r4, #32]
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d006      	beq.n	8006b58 <std+0x48>
 8006b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b4e:	4294      	cmp	r4, r2
 8006b50:	d002      	beq.n	8006b58 <std+0x48>
 8006b52:	33d0      	adds	r3, #208	@ 0xd0
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d105      	bne.n	8006b64 <std+0x54>
 8006b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	f000 b99a 	b.w	8006e98 <__retarget_lock_init_recursive>
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	08006cfd 	.word	0x08006cfd
 8006b6c:	08006d1f 	.word	0x08006d1f
 8006b70:	08006d57 	.word	0x08006d57
 8006b74:	08006d7b 	.word	0x08006d7b
 8006b78:	20000310 	.word	0x20000310

08006b7c <stdio_exit_handler>:
 8006b7c:	4a02      	ldr	r2, [pc, #8]	@ (8006b88 <stdio_exit_handler+0xc>)
 8006b7e:	4903      	ldr	r1, [pc, #12]	@ (8006b8c <stdio_exit_handler+0x10>)
 8006b80:	4803      	ldr	r0, [pc, #12]	@ (8006b90 <stdio_exit_handler+0x14>)
 8006b82:	f000 b869 	b.w	8006c58 <_fwalk_sglue>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c
 8006b8c:	080087a9 	.word	0x080087a9
 8006b90:	20000188 	.word	0x20000188

08006b94 <cleanup_stdio>:
 8006b94:	6841      	ldr	r1, [r0, #4]
 8006b96:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <cleanup_stdio+0x34>)
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	d001      	beq.n	8006ba4 <cleanup_stdio+0x10>
 8006ba0:	f001 fe02 	bl	80087a8 <_fflush_r>
 8006ba4:	68a1      	ldr	r1, [r4, #8]
 8006ba6:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <cleanup_stdio+0x38>)
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d002      	beq.n	8006bb2 <cleanup_stdio+0x1e>
 8006bac:	4620      	mov	r0, r4
 8006bae:	f001 fdfb 	bl	80087a8 <_fflush_r>
 8006bb2:	68e1      	ldr	r1, [r4, #12]
 8006bb4:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <cleanup_stdio+0x3c>)
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	d004      	beq.n	8006bc4 <cleanup_stdio+0x30>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc0:	f001 bdf2 	b.w	80087a8 <_fflush_r>
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000310 	.word	0x20000310
 8006bcc:	20000378 	.word	0x20000378
 8006bd0:	200003e0 	.word	0x200003e0

08006bd4 <global_stdio_init.part.0>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <global_stdio_init.part.0+0x30>)
 8006bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8006c08 <global_stdio_init.part.0+0x34>)
 8006bda:	4a0c      	ldr	r2, [pc, #48]	@ (8006c0c <global_stdio_init.part.0+0x38>)
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	4620      	mov	r0, r4
 8006be0:	2200      	movs	r2, #0
 8006be2:	2104      	movs	r1, #4
 8006be4:	f7ff ff94 	bl	8006b10 <std>
 8006be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bec:	2201      	movs	r2, #1
 8006bee:	2109      	movs	r1, #9
 8006bf0:	f7ff ff8e 	bl	8006b10 <std>
 8006bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfe:	2112      	movs	r1, #18
 8006c00:	f7ff bf86 	b.w	8006b10 <std>
 8006c04:	20000448 	.word	0x20000448
 8006c08:	20000310 	.word	0x20000310
 8006c0c:	08006b7d 	.word	0x08006b7d

08006c10 <__sfp_lock_acquire>:
 8006c10:	4801      	ldr	r0, [pc, #4]	@ (8006c18 <__sfp_lock_acquire+0x8>)
 8006c12:	f000 b942 	b.w	8006e9a <__retarget_lock_acquire_recursive>
 8006c16:	bf00      	nop
 8006c18:	20000451 	.word	0x20000451

08006c1c <__sfp_lock_release>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__sfp_lock_release+0x8>)
 8006c1e:	f000 b93d 	b.w	8006e9c <__retarget_lock_release_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000451 	.word	0x20000451

08006c28 <__sinit>:
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	f7ff fff0 	bl	8006c10 <__sfp_lock_acquire>
 8006c30:	6a23      	ldr	r3, [r4, #32]
 8006c32:	b11b      	cbz	r3, 8006c3c <__sinit+0x14>
 8006c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c38:	f7ff bff0 	b.w	8006c1c <__sfp_lock_release>
 8006c3c:	4b04      	ldr	r3, [pc, #16]	@ (8006c50 <__sinit+0x28>)
 8006c3e:	6223      	str	r3, [r4, #32]
 8006c40:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <__sinit+0x2c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f5      	bne.n	8006c34 <__sinit+0xc>
 8006c48:	f7ff ffc4 	bl	8006bd4 <global_stdio_init.part.0>
 8006c4c:	e7f2      	b.n	8006c34 <__sinit+0xc>
 8006c4e:	bf00      	nop
 8006c50:	08006b95 	.word	0x08006b95
 8006c54:	20000448 	.word	0x20000448

08006c58 <_fwalk_sglue>:
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	4688      	mov	r8, r1
 8006c60:	4614      	mov	r4, r2
 8006c62:	2600      	movs	r6, #0
 8006c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c68:	f1b9 0901 	subs.w	r9, r9, #1
 8006c6c:	d505      	bpl.n	8006c7a <_fwalk_sglue+0x22>
 8006c6e:	6824      	ldr	r4, [r4, #0]
 8006c70:	2c00      	cmp	r4, #0
 8006c72:	d1f7      	bne.n	8006c64 <_fwalk_sglue+0xc>
 8006c74:	4630      	mov	r0, r6
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d907      	bls.n	8006c90 <_fwalk_sglue+0x38>
 8006c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c84:	3301      	adds	r3, #1
 8006c86:	d003      	beq.n	8006c90 <_fwalk_sglue+0x38>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c0      	blx	r8
 8006c8e:	4306      	orrs	r6, r0
 8006c90:	3568      	adds	r5, #104	@ 0x68
 8006c92:	e7e9      	b.n	8006c68 <_fwalk_sglue+0x10>

08006c94 <sniprintf>:
 8006c94:	b40c      	push	{r2, r3}
 8006c96:	b530      	push	{r4, r5, lr}
 8006c98:	4b17      	ldr	r3, [pc, #92]	@ (8006cf8 <sniprintf+0x64>)
 8006c9a:	1e0c      	subs	r4, r1, #0
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	b09d      	sub	sp, #116	@ 0x74
 8006ca0:	da08      	bge.n	8006cb4 <sniprintf+0x20>
 8006ca2:	238b      	movs	r3, #139	@ 0x8b
 8006ca4:	602b      	str	r3, [r5, #0]
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006caa:	b01d      	add	sp, #116	@ 0x74
 8006cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cb0:	b002      	add	sp, #8
 8006cb2:	4770      	bx	lr
 8006cb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cbc:	bf14      	ite	ne
 8006cbe:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006cc2:	4623      	moveq	r3, r4
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	9307      	str	r3, [sp, #28]
 8006cc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ccc:	9002      	str	r0, [sp, #8]
 8006cce:	9006      	str	r0, [sp, #24]
 8006cd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cd4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006cd6:	ab21      	add	r3, sp, #132	@ 0x84
 8006cd8:	a902      	add	r1, sp, #8
 8006cda:	4628      	mov	r0, r5
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	f001 fa55 	bl	800818c <_svfiprintf_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	bfbc      	itt	lt
 8006ce6:	238b      	movlt	r3, #139	@ 0x8b
 8006ce8:	602b      	strlt	r3, [r5, #0]
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	d0dd      	beq.n	8006caa <sniprintf+0x16>
 8006cee:	9b02      	ldr	r3, [sp, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e7d9      	b.n	8006caa <sniprintf+0x16>
 8006cf6:	bf00      	nop
 8006cf8:	20000184 	.word	0x20000184

08006cfc <__sread>:
 8006cfc:	b510      	push	{r4, lr}
 8006cfe:	460c      	mov	r4, r1
 8006d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d04:	f000 f87a 	bl	8006dfc <_read_r>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	bfab      	itete	ge
 8006d0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d10:	181b      	addge	r3, r3, r0
 8006d12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d16:	bfac      	ite	ge
 8006d18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d1a:	81a3      	strhlt	r3, [r4, #12]
 8006d1c:	bd10      	pop	{r4, pc}

08006d1e <__swrite>:
 8006d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d22:	461f      	mov	r7, r3
 8006d24:	898b      	ldrh	r3, [r1, #12]
 8006d26:	05db      	lsls	r3, r3, #23
 8006d28:	4605      	mov	r5, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	d505      	bpl.n	8006d3c <__swrite+0x1e>
 8006d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d34:	2302      	movs	r3, #2
 8006d36:	2200      	movs	r2, #0
 8006d38:	f000 f84e 	bl	8006dd8 <_lseek_r>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d46:	81a3      	strh	r3, [r4, #12]
 8006d48:	4632      	mov	r2, r6
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d52:	f000 b865 	b.w	8006e20 <_write_r>

08006d56 <__sseek>:
 8006d56:	b510      	push	{r4, lr}
 8006d58:	460c      	mov	r4, r1
 8006d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5e:	f000 f83b 	bl	8006dd8 <_lseek_r>
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	bf15      	itete	ne
 8006d68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d72:	81a3      	strheq	r3, [r4, #12]
 8006d74:	bf18      	it	ne
 8006d76:	81a3      	strhne	r3, [r4, #12]
 8006d78:	bd10      	pop	{r4, pc}

08006d7a <__sclose>:
 8006d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7e:	f000 b81b 	b.w	8006db8 <_close_r>

08006d82 <memset>:
 8006d82:	4402      	add	r2, r0
 8006d84:	4603      	mov	r3, r0
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d100      	bne.n	8006d8c <memset+0xa>
 8006d8a:	4770      	bx	lr
 8006d8c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d90:	e7f9      	b.n	8006d86 <memset+0x4>

08006d92 <strncmp>:
 8006d92:	b510      	push	{r4, lr}
 8006d94:	b16a      	cbz	r2, 8006db2 <strncmp+0x20>
 8006d96:	3901      	subs	r1, #1
 8006d98:	1884      	adds	r4, r0, r2
 8006d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d103      	bne.n	8006dae <strncmp+0x1c>
 8006da6:	42a0      	cmp	r0, r4
 8006da8:	d001      	beq.n	8006dae <strncmp+0x1c>
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d1f5      	bne.n	8006d9a <strncmp+0x8>
 8006dae:	1ad0      	subs	r0, r2, r3
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	4610      	mov	r0, r2
 8006db4:	e7fc      	b.n	8006db0 <strncmp+0x1e>
	...

08006db8 <_close_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d06      	ldr	r5, [pc, #24]	@ (8006dd4 <_close_r+0x1c>)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	602b      	str	r3, [r5, #0]
 8006dc4:	f7fa fccc 	bl	8001760 <_close>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_close_r+0x1a>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_close_r+0x1a>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	2000044c 	.word	0x2000044c

08006dd8 <_lseek_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	@ (8006df8 <_lseek_r+0x20>)
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fa fce1 	bl	80017ae <_lseek>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_lseek_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_lseek_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	2000044c 	.word	0x2000044c

08006dfc <_read_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	@ (8006e1c <_read_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fa fc6f 	bl	80016ee <_read>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_read_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_read_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2000044c 	.word	0x2000044c

08006e20 <_write_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	@ (8006e40 <_write_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fa fc7a 	bl	8001728 <_write>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_write_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_write_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	2000044c 	.word	0x2000044c

08006e44 <__errno>:
 8006e44:	4b01      	ldr	r3, [pc, #4]	@ (8006e4c <__errno+0x8>)
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000184 	.word	0x20000184

08006e50 <__libc_init_array>:
 8006e50:	b570      	push	{r4, r5, r6, lr}
 8006e52:	4d0d      	ldr	r5, [pc, #52]	@ (8006e88 <__libc_init_array+0x38>)
 8006e54:	4c0d      	ldr	r4, [pc, #52]	@ (8006e8c <__libc_init_array+0x3c>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	42a6      	cmp	r6, r4
 8006e5e:	d109      	bne.n	8006e74 <__libc_init_array+0x24>
 8006e60:	4d0b      	ldr	r5, [pc, #44]	@ (8006e90 <__libc_init_array+0x40>)
 8006e62:	4c0c      	ldr	r4, [pc, #48]	@ (8006e94 <__libc_init_array+0x44>)
 8006e64:	f002 f818 	bl	8008e98 <_init>
 8006e68:	1b64      	subs	r4, r4, r5
 8006e6a:	10a4      	asrs	r4, r4, #2
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	42a6      	cmp	r6, r4
 8006e70:	d105      	bne.n	8006e7e <__libc_init_array+0x2e>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e78:	4798      	blx	r3
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	e7ee      	b.n	8006e5c <__libc_init_array+0xc>
 8006e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e82:	4798      	blx	r3
 8006e84:	3601      	adds	r6, #1
 8006e86:	e7f2      	b.n	8006e6e <__libc_init_array+0x1e>
 8006e88:	08009298 	.word	0x08009298
 8006e8c:	08009298 	.word	0x08009298
 8006e90:	08009298 	.word	0x08009298
 8006e94:	0800929c 	.word	0x0800929c

08006e98 <__retarget_lock_init_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <__retarget_lock_acquire_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <__retarget_lock_release_recursive>:
 8006e9c:	4770      	bx	lr

08006e9e <memcpy>:
 8006e9e:	440a      	add	r2, r1
 8006ea0:	4291      	cmp	r1, r2
 8006ea2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ea6:	d100      	bne.n	8006eaa <memcpy+0xc>
 8006ea8:	4770      	bx	lr
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eb4:	4291      	cmp	r1, r2
 8006eb6:	d1f9      	bne.n	8006eac <memcpy+0xe>
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	0000      	movs	r0, r0
 8006ebc:	0000      	movs	r0, r0
	...

08006ec0 <nan>:
 8006ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ec8 <nan+0x8>
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	7ff80000 	.word	0x7ff80000

08006ed0 <_free_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d041      	beq.n	8006f5c <_free_r+0x8c>
 8006ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006edc:	1f0c      	subs	r4, r1, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bfb8      	it	lt
 8006ee2:	18e4      	addlt	r4, r4, r3
 8006ee4:	f000 fc2c 	bl	8007740 <__malloc_lock>
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <_free_r+0x90>)
 8006eea:	6813      	ldr	r3, [r2, #0]
 8006eec:	b933      	cbnz	r3, 8006efc <_free_r+0x2c>
 8006eee:	6063      	str	r3, [r4, #4]
 8006ef0:	6014      	str	r4, [r2, #0]
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef8:	f000 bc28 	b.w	800774c <__malloc_unlock>
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	d908      	bls.n	8006f12 <_free_r+0x42>
 8006f00:	6820      	ldr	r0, [r4, #0]
 8006f02:	1821      	adds	r1, r4, r0
 8006f04:	428b      	cmp	r3, r1
 8006f06:	bf01      	itttt	eq
 8006f08:	6819      	ldreq	r1, [r3, #0]
 8006f0a:	685b      	ldreq	r3, [r3, #4]
 8006f0c:	1809      	addeq	r1, r1, r0
 8006f0e:	6021      	streq	r1, [r4, #0]
 8006f10:	e7ed      	b.n	8006eee <_free_r+0x1e>
 8006f12:	461a      	mov	r2, r3
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	b10b      	cbz	r3, 8006f1c <_free_r+0x4c>
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d9fa      	bls.n	8006f12 <_free_r+0x42>
 8006f1c:	6811      	ldr	r1, [r2, #0]
 8006f1e:	1850      	adds	r0, r2, r1
 8006f20:	42a0      	cmp	r0, r4
 8006f22:	d10b      	bne.n	8006f3c <_free_r+0x6c>
 8006f24:	6820      	ldr	r0, [r4, #0]
 8006f26:	4401      	add	r1, r0
 8006f28:	1850      	adds	r0, r2, r1
 8006f2a:	4283      	cmp	r3, r0
 8006f2c:	6011      	str	r1, [r2, #0]
 8006f2e:	d1e0      	bne.n	8006ef2 <_free_r+0x22>
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	6053      	str	r3, [r2, #4]
 8006f36:	4408      	add	r0, r1
 8006f38:	6010      	str	r0, [r2, #0]
 8006f3a:	e7da      	b.n	8006ef2 <_free_r+0x22>
 8006f3c:	d902      	bls.n	8006f44 <_free_r+0x74>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	e7d6      	b.n	8006ef2 <_free_r+0x22>
 8006f44:	6820      	ldr	r0, [r4, #0]
 8006f46:	1821      	adds	r1, r4, r0
 8006f48:	428b      	cmp	r3, r1
 8006f4a:	bf04      	itt	eq
 8006f4c:	6819      	ldreq	r1, [r3, #0]
 8006f4e:	685b      	ldreq	r3, [r3, #4]
 8006f50:	6063      	str	r3, [r4, #4]
 8006f52:	bf04      	itt	eq
 8006f54:	1809      	addeq	r1, r1, r0
 8006f56:	6021      	streq	r1, [r4, #0]
 8006f58:	6054      	str	r4, [r2, #4]
 8006f5a:	e7ca      	b.n	8006ef2 <_free_r+0x22>
 8006f5c:	bd38      	pop	{r3, r4, r5, pc}
 8006f5e:	bf00      	nop
 8006f60:	20000458 	.word	0x20000458

08006f64 <rshift>:
 8006f64:	6903      	ldr	r3, [r0, #16]
 8006f66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f72:	f100 0414 	add.w	r4, r0, #20
 8006f76:	dd45      	ble.n	8007004 <rshift+0xa0>
 8006f78:	f011 011f 	ands.w	r1, r1, #31
 8006f7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f84:	d10c      	bne.n	8006fa0 <rshift+0x3c>
 8006f86:	f100 0710 	add.w	r7, r0, #16
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	42b1      	cmp	r1, r6
 8006f8e:	d334      	bcc.n	8006ffa <rshift+0x96>
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	1eea      	subs	r2, r5, #3
 8006f96:	4296      	cmp	r6, r2
 8006f98:	bf38      	it	cc
 8006f9a:	2300      	movcc	r3, #0
 8006f9c:	4423      	add	r3, r4
 8006f9e:	e015      	b.n	8006fcc <rshift+0x68>
 8006fa0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006fa4:	f1c1 0820 	rsb	r8, r1, #32
 8006fa8:	40cf      	lsrs	r7, r1
 8006faa:	f105 0e04 	add.w	lr, r5, #4
 8006fae:	46a1      	mov	r9, r4
 8006fb0:	4576      	cmp	r6, lr
 8006fb2:	46f4      	mov	ip, lr
 8006fb4:	d815      	bhi.n	8006fe2 <rshift+0x7e>
 8006fb6:	1a9a      	subs	r2, r3, r2
 8006fb8:	0092      	lsls	r2, r2, #2
 8006fba:	3a04      	subs	r2, #4
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	42ae      	cmp	r6, r5
 8006fc0:	bf38      	it	cc
 8006fc2:	2200      	movcc	r2, #0
 8006fc4:	18a3      	adds	r3, r4, r2
 8006fc6:	50a7      	str	r7, [r4, r2]
 8006fc8:	b107      	cbz	r7, 8006fcc <rshift+0x68>
 8006fca:	3304      	adds	r3, #4
 8006fcc:	1b1a      	subs	r2, r3, r4
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006fd4:	bf08      	it	eq
 8006fd6:	2300      	moveq	r3, #0
 8006fd8:	6102      	str	r2, [r0, #16]
 8006fda:	bf08      	it	eq
 8006fdc:	6143      	streq	r3, [r0, #20]
 8006fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fe2:	f8dc c000 	ldr.w	ip, [ip]
 8006fe6:	fa0c fc08 	lsl.w	ip, ip, r8
 8006fea:	ea4c 0707 	orr.w	r7, ip, r7
 8006fee:	f849 7b04 	str.w	r7, [r9], #4
 8006ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ff6:	40cf      	lsrs	r7, r1
 8006ff8:	e7da      	b.n	8006fb0 <rshift+0x4c>
 8006ffa:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ffe:	f847 cf04 	str.w	ip, [r7, #4]!
 8007002:	e7c3      	b.n	8006f8c <rshift+0x28>
 8007004:	4623      	mov	r3, r4
 8007006:	e7e1      	b.n	8006fcc <rshift+0x68>

08007008 <__hexdig_fun>:
 8007008:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800700c:	2b09      	cmp	r3, #9
 800700e:	d802      	bhi.n	8007016 <__hexdig_fun+0xe>
 8007010:	3820      	subs	r0, #32
 8007012:	b2c0      	uxtb	r0, r0
 8007014:	4770      	bx	lr
 8007016:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800701a:	2b05      	cmp	r3, #5
 800701c:	d801      	bhi.n	8007022 <__hexdig_fun+0x1a>
 800701e:	3847      	subs	r0, #71	@ 0x47
 8007020:	e7f7      	b.n	8007012 <__hexdig_fun+0xa>
 8007022:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007026:	2b05      	cmp	r3, #5
 8007028:	d801      	bhi.n	800702e <__hexdig_fun+0x26>
 800702a:	3827      	subs	r0, #39	@ 0x27
 800702c:	e7f1      	b.n	8007012 <__hexdig_fun+0xa>
 800702e:	2000      	movs	r0, #0
 8007030:	4770      	bx	lr
	...

08007034 <__gethex>:
 8007034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007038:	b085      	sub	sp, #20
 800703a:	468a      	mov	sl, r1
 800703c:	9302      	str	r3, [sp, #8]
 800703e:	680b      	ldr	r3, [r1, #0]
 8007040:	9001      	str	r0, [sp, #4]
 8007042:	4690      	mov	r8, r2
 8007044:	1c9c      	adds	r4, r3, #2
 8007046:	46a1      	mov	r9, r4
 8007048:	f814 0b01 	ldrb.w	r0, [r4], #1
 800704c:	2830      	cmp	r0, #48	@ 0x30
 800704e:	d0fa      	beq.n	8007046 <__gethex+0x12>
 8007050:	eba9 0303 	sub.w	r3, r9, r3
 8007054:	f1a3 0b02 	sub.w	fp, r3, #2
 8007058:	f7ff ffd6 	bl	8007008 <__hexdig_fun>
 800705c:	4605      	mov	r5, r0
 800705e:	2800      	cmp	r0, #0
 8007060:	d168      	bne.n	8007134 <__gethex+0x100>
 8007062:	49a0      	ldr	r1, [pc, #640]	@ (80072e4 <__gethex+0x2b0>)
 8007064:	2201      	movs	r2, #1
 8007066:	4648      	mov	r0, r9
 8007068:	f7ff fe93 	bl	8006d92 <strncmp>
 800706c:	4607      	mov	r7, r0
 800706e:	2800      	cmp	r0, #0
 8007070:	d167      	bne.n	8007142 <__gethex+0x10e>
 8007072:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007076:	4626      	mov	r6, r4
 8007078:	f7ff ffc6 	bl	8007008 <__hexdig_fun>
 800707c:	2800      	cmp	r0, #0
 800707e:	d062      	beq.n	8007146 <__gethex+0x112>
 8007080:	4623      	mov	r3, r4
 8007082:	7818      	ldrb	r0, [r3, #0]
 8007084:	2830      	cmp	r0, #48	@ 0x30
 8007086:	4699      	mov	r9, r3
 8007088:	f103 0301 	add.w	r3, r3, #1
 800708c:	d0f9      	beq.n	8007082 <__gethex+0x4e>
 800708e:	f7ff ffbb 	bl	8007008 <__hexdig_fun>
 8007092:	fab0 f580 	clz	r5, r0
 8007096:	096d      	lsrs	r5, r5, #5
 8007098:	f04f 0b01 	mov.w	fp, #1
 800709c:	464a      	mov	r2, r9
 800709e:	4616      	mov	r6, r2
 80070a0:	3201      	adds	r2, #1
 80070a2:	7830      	ldrb	r0, [r6, #0]
 80070a4:	f7ff ffb0 	bl	8007008 <__hexdig_fun>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d1f8      	bne.n	800709e <__gethex+0x6a>
 80070ac:	498d      	ldr	r1, [pc, #564]	@ (80072e4 <__gethex+0x2b0>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff fe6e 	bl	8006d92 <strncmp>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d13f      	bne.n	800713a <__gethex+0x106>
 80070ba:	b944      	cbnz	r4, 80070ce <__gethex+0x9a>
 80070bc:	1c74      	adds	r4, r6, #1
 80070be:	4622      	mov	r2, r4
 80070c0:	4616      	mov	r6, r2
 80070c2:	3201      	adds	r2, #1
 80070c4:	7830      	ldrb	r0, [r6, #0]
 80070c6:	f7ff ff9f 	bl	8007008 <__hexdig_fun>
 80070ca:	2800      	cmp	r0, #0
 80070cc:	d1f8      	bne.n	80070c0 <__gethex+0x8c>
 80070ce:	1ba4      	subs	r4, r4, r6
 80070d0:	00a7      	lsls	r7, r4, #2
 80070d2:	7833      	ldrb	r3, [r6, #0]
 80070d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80070d8:	2b50      	cmp	r3, #80	@ 0x50
 80070da:	d13e      	bne.n	800715a <__gethex+0x126>
 80070dc:	7873      	ldrb	r3, [r6, #1]
 80070de:	2b2b      	cmp	r3, #43	@ 0x2b
 80070e0:	d033      	beq.n	800714a <__gethex+0x116>
 80070e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80070e4:	d034      	beq.n	8007150 <__gethex+0x11c>
 80070e6:	1c71      	adds	r1, r6, #1
 80070e8:	2400      	movs	r4, #0
 80070ea:	7808      	ldrb	r0, [r1, #0]
 80070ec:	f7ff ff8c 	bl	8007008 <__hexdig_fun>
 80070f0:	1e43      	subs	r3, r0, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b18      	cmp	r3, #24
 80070f6:	d830      	bhi.n	800715a <__gethex+0x126>
 80070f8:	f1a0 0210 	sub.w	r2, r0, #16
 80070fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007100:	f7ff ff82 	bl	8007008 <__hexdig_fun>
 8007104:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8007108:	fa5f fc8c 	uxtb.w	ip, ip
 800710c:	f1bc 0f18 	cmp.w	ip, #24
 8007110:	f04f 030a 	mov.w	r3, #10
 8007114:	d91e      	bls.n	8007154 <__gethex+0x120>
 8007116:	b104      	cbz	r4, 800711a <__gethex+0xe6>
 8007118:	4252      	negs	r2, r2
 800711a:	4417      	add	r7, r2
 800711c:	f8ca 1000 	str.w	r1, [sl]
 8007120:	b1ed      	cbz	r5, 800715e <__gethex+0x12a>
 8007122:	f1bb 0f00 	cmp.w	fp, #0
 8007126:	bf0c      	ite	eq
 8007128:	2506      	moveq	r5, #6
 800712a:	2500      	movne	r5, #0
 800712c:	4628      	mov	r0, r5
 800712e:	b005      	add	sp, #20
 8007130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007134:	2500      	movs	r5, #0
 8007136:	462c      	mov	r4, r5
 8007138:	e7b0      	b.n	800709c <__gethex+0x68>
 800713a:	2c00      	cmp	r4, #0
 800713c:	d1c7      	bne.n	80070ce <__gethex+0x9a>
 800713e:	4627      	mov	r7, r4
 8007140:	e7c7      	b.n	80070d2 <__gethex+0x9e>
 8007142:	464e      	mov	r6, r9
 8007144:	462f      	mov	r7, r5
 8007146:	2501      	movs	r5, #1
 8007148:	e7c3      	b.n	80070d2 <__gethex+0x9e>
 800714a:	2400      	movs	r4, #0
 800714c:	1cb1      	adds	r1, r6, #2
 800714e:	e7cc      	b.n	80070ea <__gethex+0xb6>
 8007150:	2401      	movs	r4, #1
 8007152:	e7fb      	b.n	800714c <__gethex+0x118>
 8007154:	fb03 0002 	mla	r0, r3, r2, r0
 8007158:	e7ce      	b.n	80070f8 <__gethex+0xc4>
 800715a:	4631      	mov	r1, r6
 800715c:	e7de      	b.n	800711c <__gethex+0xe8>
 800715e:	eba6 0309 	sub.w	r3, r6, r9
 8007162:	3b01      	subs	r3, #1
 8007164:	4629      	mov	r1, r5
 8007166:	2b07      	cmp	r3, #7
 8007168:	dc0a      	bgt.n	8007180 <__gethex+0x14c>
 800716a:	9801      	ldr	r0, [sp, #4]
 800716c:	f000 faf4 	bl	8007758 <_Balloc>
 8007170:	4604      	mov	r4, r0
 8007172:	b940      	cbnz	r0, 8007186 <__gethex+0x152>
 8007174:	4b5c      	ldr	r3, [pc, #368]	@ (80072e8 <__gethex+0x2b4>)
 8007176:	4602      	mov	r2, r0
 8007178:	21e4      	movs	r1, #228	@ 0xe4
 800717a:	485c      	ldr	r0, [pc, #368]	@ (80072ec <__gethex+0x2b8>)
 800717c:	f001 fb66 	bl	800884c <__assert_func>
 8007180:	3101      	adds	r1, #1
 8007182:	105b      	asrs	r3, r3, #1
 8007184:	e7ef      	b.n	8007166 <__gethex+0x132>
 8007186:	f100 0a14 	add.w	sl, r0, #20
 800718a:	2300      	movs	r3, #0
 800718c:	4655      	mov	r5, sl
 800718e:	469b      	mov	fp, r3
 8007190:	45b1      	cmp	r9, r6
 8007192:	d337      	bcc.n	8007204 <__gethex+0x1d0>
 8007194:	f845 bb04 	str.w	fp, [r5], #4
 8007198:	eba5 050a 	sub.w	r5, r5, sl
 800719c:	10ad      	asrs	r5, r5, #2
 800719e:	6125      	str	r5, [r4, #16]
 80071a0:	4658      	mov	r0, fp
 80071a2:	f000 fbcb 	bl	800793c <__hi0bits>
 80071a6:	016d      	lsls	r5, r5, #5
 80071a8:	f8d8 6000 	ldr.w	r6, [r8]
 80071ac:	1a2d      	subs	r5, r5, r0
 80071ae:	42b5      	cmp	r5, r6
 80071b0:	dd54      	ble.n	800725c <__gethex+0x228>
 80071b2:	1bad      	subs	r5, r5, r6
 80071b4:	4629      	mov	r1, r5
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 ff5f 	bl	800807a <__any_on>
 80071bc:	4681      	mov	r9, r0
 80071be:	b178      	cbz	r0, 80071e0 <__gethex+0x1ac>
 80071c0:	1e6b      	subs	r3, r5, #1
 80071c2:	1159      	asrs	r1, r3, #5
 80071c4:	f003 021f 	and.w	r2, r3, #31
 80071c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80071cc:	f04f 0901 	mov.w	r9, #1
 80071d0:	fa09 f202 	lsl.w	r2, r9, r2
 80071d4:	420a      	tst	r2, r1
 80071d6:	d003      	beq.n	80071e0 <__gethex+0x1ac>
 80071d8:	454b      	cmp	r3, r9
 80071da:	dc36      	bgt.n	800724a <__gethex+0x216>
 80071dc:	f04f 0902 	mov.w	r9, #2
 80071e0:	4629      	mov	r1, r5
 80071e2:	4620      	mov	r0, r4
 80071e4:	f7ff febe 	bl	8006f64 <rshift>
 80071e8:	442f      	add	r7, r5
 80071ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80071ee:	42bb      	cmp	r3, r7
 80071f0:	da42      	bge.n	8007278 <__gethex+0x244>
 80071f2:	9801      	ldr	r0, [sp, #4]
 80071f4:	4621      	mov	r1, r4
 80071f6:	f000 faef 	bl	80077d8 <_Bfree>
 80071fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071fc:	2300      	movs	r3, #0
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	25a3      	movs	r5, #163	@ 0xa3
 8007202:	e793      	b.n	800712c <__gethex+0xf8>
 8007204:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007208:	2a2e      	cmp	r2, #46	@ 0x2e
 800720a:	d012      	beq.n	8007232 <__gethex+0x1fe>
 800720c:	2b20      	cmp	r3, #32
 800720e:	d104      	bne.n	800721a <__gethex+0x1e6>
 8007210:	f845 bb04 	str.w	fp, [r5], #4
 8007214:	f04f 0b00 	mov.w	fp, #0
 8007218:	465b      	mov	r3, fp
 800721a:	7830      	ldrb	r0, [r6, #0]
 800721c:	9303      	str	r3, [sp, #12]
 800721e:	f7ff fef3 	bl	8007008 <__hexdig_fun>
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	f000 000f 	and.w	r0, r0, #15
 8007228:	4098      	lsls	r0, r3
 800722a:	ea4b 0b00 	orr.w	fp, fp, r0
 800722e:	3304      	adds	r3, #4
 8007230:	e7ae      	b.n	8007190 <__gethex+0x15c>
 8007232:	45b1      	cmp	r9, r6
 8007234:	d8ea      	bhi.n	800720c <__gethex+0x1d8>
 8007236:	492b      	ldr	r1, [pc, #172]	@ (80072e4 <__gethex+0x2b0>)
 8007238:	9303      	str	r3, [sp, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	4630      	mov	r0, r6
 800723e:	f7ff fda8 	bl	8006d92 <strncmp>
 8007242:	9b03      	ldr	r3, [sp, #12]
 8007244:	2800      	cmp	r0, #0
 8007246:	d1e1      	bne.n	800720c <__gethex+0x1d8>
 8007248:	e7a2      	b.n	8007190 <__gethex+0x15c>
 800724a:	1ea9      	subs	r1, r5, #2
 800724c:	4620      	mov	r0, r4
 800724e:	f000 ff14 	bl	800807a <__any_on>
 8007252:	2800      	cmp	r0, #0
 8007254:	d0c2      	beq.n	80071dc <__gethex+0x1a8>
 8007256:	f04f 0903 	mov.w	r9, #3
 800725a:	e7c1      	b.n	80071e0 <__gethex+0x1ac>
 800725c:	da09      	bge.n	8007272 <__gethex+0x23e>
 800725e:	1b75      	subs	r5, r6, r5
 8007260:	4621      	mov	r1, r4
 8007262:	9801      	ldr	r0, [sp, #4]
 8007264:	462a      	mov	r2, r5
 8007266:	f000 fccf 	bl	8007c08 <__lshift>
 800726a:	1b7f      	subs	r7, r7, r5
 800726c:	4604      	mov	r4, r0
 800726e:	f100 0a14 	add.w	sl, r0, #20
 8007272:	f04f 0900 	mov.w	r9, #0
 8007276:	e7b8      	b.n	80071ea <__gethex+0x1b6>
 8007278:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800727c:	42bd      	cmp	r5, r7
 800727e:	dd6f      	ble.n	8007360 <__gethex+0x32c>
 8007280:	1bed      	subs	r5, r5, r7
 8007282:	42ae      	cmp	r6, r5
 8007284:	dc34      	bgt.n	80072f0 <__gethex+0x2bc>
 8007286:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d022      	beq.n	80072d4 <__gethex+0x2a0>
 800728e:	2b03      	cmp	r3, #3
 8007290:	d024      	beq.n	80072dc <__gethex+0x2a8>
 8007292:	2b01      	cmp	r3, #1
 8007294:	d115      	bne.n	80072c2 <__gethex+0x28e>
 8007296:	42ae      	cmp	r6, r5
 8007298:	d113      	bne.n	80072c2 <__gethex+0x28e>
 800729a:	2e01      	cmp	r6, #1
 800729c:	d10b      	bne.n	80072b6 <__gethex+0x282>
 800729e:	9a02      	ldr	r2, [sp, #8]
 80072a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	2301      	movs	r3, #1
 80072a8:	6123      	str	r3, [r4, #16]
 80072aa:	f8ca 3000 	str.w	r3, [sl]
 80072ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072b0:	2562      	movs	r5, #98	@ 0x62
 80072b2:	601c      	str	r4, [r3, #0]
 80072b4:	e73a      	b.n	800712c <__gethex+0xf8>
 80072b6:	1e71      	subs	r1, r6, #1
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 fede 	bl	800807a <__any_on>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d1ed      	bne.n	800729e <__gethex+0x26a>
 80072c2:	9801      	ldr	r0, [sp, #4]
 80072c4:	4621      	mov	r1, r4
 80072c6:	f000 fa87 	bl	80077d8 <_Bfree>
 80072ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072cc:	2300      	movs	r3, #0
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	2550      	movs	r5, #80	@ 0x50
 80072d2:	e72b      	b.n	800712c <__gethex+0xf8>
 80072d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f3      	bne.n	80072c2 <__gethex+0x28e>
 80072da:	e7e0      	b.n	800729e <__gethex+0x26a>
 80072dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1dd      	bne.n	800729e <__gethex+0x26a>
 80072e2:	e7ee      	b.n	80072c2 <__gethex+0x28e>
 80072e4:	08008ed4 	.word	0x08008ed4
 80072e8:	08008f40 	.word	0x08008f40
 80072ec:	08008f51 	.word	0x08008f51
 80072f0:	1e6f      	subs	r7, r5, #1
 80072f2:	f1b9 0f00 	cmp.w	r9, #0
 80072f6:	d130      	bne.n	800735a <__gethex+0x326>
 80072f8:	b127      	cbz	r7, 8007304 <__gethex+0x2d0>
 80072fa:	4639      	mov	r1, r7
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 febc 	bl	800807a <__any_on>
 8007302:	4681      	mov	r9, r0
 8007304:	117a      	asrs	r2, r7, #5
 8007306:	2301      	movs	r3, #1
 8007308:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800730c:	f007 071f 	and.w	r7, r7, #31
 8007310:	40bb      	lsls	r3, r7
 8007312:	4213      	tst	r3, r2
 8007314:	4629      	mov	r1, r5
 8007316:	4620      	mov	r0, r4
 8007318:	bf18      	it	ne
 800731a:	f049 0902 	orrne.w	r9, r9, #2
 800731e:	f7ff fe21 	bl	8006f64 <rshift>
 8007322:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007326:	1b76      	subs	r6, r6, r5
 8007328:	2502      	movs	r5, #2
 800732a:	f1b9 0f00 	cmp.w	r9, #0
 800732e:	d047      	beq.n	80073c0 <__gethex+0x38c>
 8007330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d015      	beq.n	8007364 <__gethex+0x330>
 8007338:	2b03      	cmp	r3, #3
 800733a:	d017      	beq.n	800736c <__gethex+0x338>
 800733c:	2b01      	cmp	r3, #1
 800733e:	d109      	bne.n	8007354 <__gethex+0x320>
 8007340:	f019 0f02 	tst.w	r9, #2
 8007344:	d006      	beq.n	8007354 <__gethex+0x320>
 8007346:	f8da 3000 	ldr.w	r3, [sl]
 800734a:	ea49 0903 	orr.w	r9, r9, r3
 800734e:	f019 0f01 	tst.w	r9, #1
 8007352:	d10e      	bne.n	8007372 <__gethex+0x33e>
 8007354:	f045 0510 	orr.w	r5, r5, #16
 8007358:	e032      	b.n	80073c0 <__gethex+0x38c>
 800735a:	f04f 0901 	mov.w	r9, #1
 800735e:	e7d1      	b.n	8007304 <__gethex+0x2d0>
 8007360:	2501      	movs	r5, #1
 8007362:	e7e2      	b.n	800732a <__gethex+0x2f6>
 8007364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007366:	f1c3 0301 	rsb	r3, r3, #1
 800736a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800736c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800736e:	2b00      	cmp	r3, #0
 8007370:	d0f0      	beq.n	8007354 <__gethex+0x320>
 8007372:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007376:	f104 0314 	add.w	r3, r4, #20
 800737a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800737e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007382:	f04f 0c00 	mov.w	ip, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f853 2b04 	ldr.w	r2, [r3], #4
 800738c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007390:	d01b      	beq.n	80073ca <__gethex+0x396>
 8007392:	3201      	adds	r2, #1
 8007394:	6002      	str	r2, [r0, #0]
 8007396:	2d02      	cmp	r5, #2
 8007398:	f104 0314 	add.w	r3, r4, #20
 800739c:	d13c      	bne.n	8007418 <__gethex+0x3e4>
 800739e:	f8d8 2000 	ldr.w	r2, [r8]
 80073a2:	3a01      	subs	r2, #1
 80073a4:	42b2      	cmp	r2, r6
 80073a6:	d109      	bne.n	80073bc <__gethex+0x388>
 80073a8:	1171      	asrs	r1, r6, #5
 80073aa:	2201      	movs	r2, #1
 80073ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073b0:	f006 061f 	and.w	r6, r6, #31
 80073b4:	fa02 f606 	lsl.w	r6, r2, r6
 80073b8:	421e      	tst	r6, r3
 80073ba:	d13a      	bne.n	8007432 <__gethex+0x3fe>
 80073bc:	f045 0520 	orr.w	r5, r5, #32
 80073c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073c2:	601c      	str	r4, [r3, #0]
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	601f      	str	r7, [r3, #0]
 80073c8:	e6b0      	b.n	800712c <__gethex+0xf8>
 80073ca:	4299      	cmp	r1, r3
 80073cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80073d0:	d8d9      	bhi.n	8007386 <__gethex+0x352>
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	459b      	cmp	fp, r3
 80073d6:	db17      	blt.n	8007408 <__gethex+0x3d4>
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	9801      	ldr	r0, [sp, #4]
 80073dc:	3101      	adds	r1, #1
 80073de:	f000 f9bb 	bl	8007758 <_Balloc>
 80073e2:	4681      	mov	r9, r0
 80073e4:	b918      	cbnz	r0, 80073ee <__gethex+0x3ba>
 80073e6:	4b1a      	ldr	r3, [pc, #104]	@ (8007450 <__gethex+0x41c>)
 80073e8:	4602      	mov	r2, r0
 80073ea:	2184      	movs	r1, #132	@ 0x84
 80073ec:	e6c5      	b.n	800717a <__gethex+0x146>
 80073ee:	6922      	ldr	r2, [r4, #16]
 80073f0:	3202      	adds	r2, #2
 80073f2:	f104 010c 	add.w	r1, r4, #12
 80073f6:	0092      	lsls	r2, r2, #2
 80073f8:	300c      	adds	r0, #12
 80073fa:	f7ff fd50 	bl	8006e9e <memcpy>
 80073fe:	4621      	mov	r1, r4
 8007400:	9801      	ldr	r0, [sp, #4]
 8007402:	f000 f9e9 	bl	80077d8 <_Bfree>
 8007406:	464c      	mov	r4, r9
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007410:	6122      	str	r2, [r4, #16]
 8007412:	2201      	movs	r2, #1
 8007414:	615a      	str	r2, [r3, #20]
 8007416:	e7be      	b.n	8007396 <__gethex+0x362>
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	455a      	cmp	r2, fp
 800741c:	dd0b      	ble.n	8007436 <__gethex+0x402>
 800741e:	2101      	movs	r1, #1
 8007420:	4620      	mov	r0, r4
 8007422:	f7ff fd9f 	bl	8006f64 <rshift>
 8007426:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800742a:	3701      	adds	r7, #1
 800742c:	42bb      	cmp	r3, r7
 800742e:	f6ff aee0 	blt.w	80071f2 <__gethex+0x1be>
 8007432:	2501      	movs	r5, #1
 8007434:	e7c2      	b.n	80073bc <__gethex+0x388>
 8007436:	f016 061f 	ands.w	r6, r6, #31
 800743a:	d0fa      	beq.n	8007432 <__gethex+0x3fe>
 800743c:	4453      	add	r3, sl
 800743e:	f1c6 0620 	rsb	r6, r6, #32
 8007442:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007446:	f000 fa79 	bl	800793c <__hi0bits>
 800744a:	42b0      	cmp	r0, r6
 800744c:	dbe7      	blt.n	800741e <__gethex+0x3ea>
 800744e:	e7f0      	b.n	8007432 <__gethex+0x3fe>
 8007450:	08008f40 	.word	0x08008f40

08007454 <L_shift>:
 8007454:	f1c2 0208 	rsb	r2, r2, #8
 8007458:	0092      	lsls	r2, r2, #2
 800745a:	b570      	push	{r4, r5, r6, lr}
 800745c:	f1c2 0620 	rsb	r6, r2, #32
 8007460:	6843      	ldr	r3, [r0, #4]
 8007462:	6804      	ldr	r4, [r0, #0]
 8007464:	fa03 f506 	lsl.w	r5, r3, r6
 8007468:	432c      	orrs	r4, r5
 800746a:	40d3      	lsrs	r3, r2
 800746c:	6004      	str	r4, [r0, #0]
 800746e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007472:	4288      	cmp	r0, r1
 8007474:	d3f4      	bcc.n	8007460 <L_shift+0xc>
 8007476:	bd70      	pop	{r4, r5, r6, pc}

08007478 <__match>:
 8007478:	b530      	push	{r4, r5, lr}
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	3301      	adds	r3, #1
 800747e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007482:	b914      	cbnz	r4, 800748a <__match+0x12>
 8007484:	6003      	str	r3, [r0, #0]
 8007486:	2001      	movs	r0, #1
 8007488:	bd30      	pop	{r4, r5, pc}
 800748a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800748e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007492:	2d19      	cmp	r5, #25
 8007494:	bf98      	it	ls
 8007496:	3220      	addls	r2, #32
 8007498:	42a2      	cmp	r2, r4
 800749a:	d0f0      	beq.n	800747e <__match+0x6>
 800749c:	2000      	movs	r0, #0
 800749e:	e7f3      	b.n	8007488 <__match+0x10>

080074a0 <__hexnan>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	680b      	ldr	r3, [r1, #0]
 80074a6:	6801      	ldr	r1, [r0, #0]
 80074a8:	115e      	asrs	r6, r3, #5
 80074aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074ae:	f013 031f 	ands.w	r3, r3, #31
 80074b2:	b087      	sub	sp, #28
 80074b4:	bf18      	it	ne
 80074b6:	3604      	addne	r6, #4
 80074b8:	2500      	movs	r5, #0
 80074ba:	1f37      	subs	r7, r6, #4
 80074bc:	4682      	mov	sl, r0
 80074be:	4690      	mov	r8, r2
 80074c0:	9301      	str	r3, [sp, #4]
 80074c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80074c6:	46b9      	mov	r9, r7
 80074c8:	463c      	mov	r4, r7
 80074ca:	9502      	str	r5, [sp, #8]
 80074cc:	46ab      	mov	fp, r5
 80074ce:	784a      	ldrb	r2, [r1, #1]
 80074d0:	1c4b      	adds	r3, r1, #1
 80074d2:	9303      	str	r3, [sp, #12]
 80074d4:	b342      	cbz	r2, 8007528 <__hexnan+0x88>
 80074d6:	4610      	mov	r0, r2
 80074d8:	9105      	str	r1, [sp, #20]
 80074da:	9204      	str	r2, [sp, #16]
 80074dc:	f7ff fd94 	bl	8007008 <__hexdig_fun>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d151      	bne.n	8007588 <__hexnan+0xe8>
 80074e4:	9a04      	ldr	r2, [sp, #16]
 80074e6:	9905      	ldr	r1, [sp, #20]
 80074e8:	2a20      	cmp	r2, #32
 80074ea:	d818      	bhi.n	800751e <__hexnan+0x7e>
 80074ec:	9b02      	ldr	r3, [sp, #8]
 80074ee:	459b      	cmp	fp, r3
 80074f0:	dd13      	ble.n	800751a <__hexnan+0x7a>
 80074f2:	454c      	cmp	r4, r9
 80074f4:	d206      	bcs.n	8007504 <__hexnan+0x64>
 80074f6:	2d07      	cmp	r5, #7
 80074f8:	dc04      	bgt.n	8007504 <__hexnan+0x64>
 80074fa:	462a      	mov	r2, r5
 80074fc:	4649      	mov	r1, r9
 80074fe:	4620      	mov	r0, r4
 8007500:	f7ff ffa8 	bl	8007454 <L_shift>
 8007504:	4544      	cmp	r4, r8
 8007506:	d952      	bls.n	80075ae <__hexnan+0x10e>
 8007508:	2300      	movs	r3, #0
 800750a:	f1a4 0904 	sub.w	r9, r4, #4
 800750e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007512:	f8cd b008 	str.w	fp, [sp, #8]
 8007516:	464c      	mov	r4, r9
 8007518:	461d      	mov	r5, r3
 800751a:	9903      	ldr	r1, [sp, #12]
 800751c:	e7d7      	b.n	80074ce <__hexnan+0x2e>
 800751e:	2a29      	cmp	r2, #41	@ 0x29
 8007520:	d157      	bne.n	80075d2 <__hexnan+0x132>
 8007522:	3102      	adds	r1, #2
 8007524:	f8ca 1000 	str.w	r1, [sl]
 8007528:	f1bb 0f00 	cmp.w	fp, #0
 800752c:	d051      	beq.n	80075d2 <__hexnan+0x132>
 800752e:	454c      	cmp	r4, r9
 8007530:	d206      	bcs.n	8007540 <__hexnan+0xa0>
 8007532:	2d07      	cmp	r5, #7
 8007534:	dc04      	bgt.n	8007540 <__hexnan+0xa0>
 8007536:	462a      	mov	r2, r5
 8007538:	4649      	mov	r1, r9
 800753a:	4620      	mov	r0, r4
 800753c:	f7ff ff8a 	bl	8007454 <L_shift>
 8007540:	4544      	cmp	r4, r8
 8007542:	d936      	bls.n	80075b2 <__hexnan+0x112>
 8007544:	f1a8 0204 	sub.w	r2, r8, #4
 8007548:	4623      	mov	r3, r4
 800754a:	f853 1b04 	ldr.w	r1, [r3], #4
 800754e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007552:	429f      	cmp	r7, r3
 8007554:	d2f9      	bcs.n	800754a <__hexnan+0xaa>
 8007556:	1b3b      	subs	r3, r7, r4
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	3304      	adds	r3, #4
 800755e:	3401      	adds	r4, #1
 8007560:	3e03      	subs	r6, #3
 8007562:	42b4      	cmp	r4, r6
 8007564:	bf88      	it	hi
 8007566:	2304      	movhi	r3, #4
 8007568:	4443      	add	r3, r8
 800756a:	2200      	movs	r2, #0
 800756c:	f843 2b04 	str.w	r2, [r3], #4
 8007570:	429f      	cmp	r7, r3
 8007572:	d2fb      	bcs.n	800756c <__hexnan+0xcc>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	b91b      	cbnz	r3, 8007580 <__hexnan+0xe0>
 8007578:	4547      	cmp	r7, r8
 800757a:	d128      	bne.n	80075ce <__hexnan+0x12e>
 800757c:	2301      	movs	r3, #1
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	2005      	movs	r0, #5
 8007582:	b007      	add	sp, #28
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	3501      	adds	r5, #1
 800758a:	2d08      	cmp	r5, #8
 800758c:	f10b 0b01 	add.w	fp, fp, #1
 8007590:	dd06      	ble.n	80075a0 <__hexnan+0x100>
 8007592:	4544      	cmp	r4, r8
 8007594:	d9c1      	bls.n	800751a <__hexnan+0x7a>
 8007596:	2300      	movs	r3, #0
 8007598:	f844 3c04 	str.w	r3, [r4, #-4]
 800759c:	2501      	movs	r5, #1
 800759e:	3c04      	subs	r4, #4
 80075a0:	6822      	ldr	r2, [r4, #0]
 80075a2:	f000 000f 	and.w	r0, r0, #15
 80075a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80075aa:	6020      	str	r0, [r4, #0]
 80075ac:	e7b5      	b.n	800751a <__hexnan+0x7a>
 80075ae:	2508      	movs	r5, #8
 80075b0:	e7b3      	b.n	800751a <__hexnan+0x7a>
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0dd      	beq.n	8007574 <__hexnan+0xd4>
 80075b8:	f1c3 0320 	rsb	r3, r3, #32
 80075bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80075c0:	40da      	lsrs	r2, r3
 80075c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80075c6:	4013      	ands	r3, r2
 80075c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80075cc:	e7d2      	b.n	8007574 <__hexnan+0xd4>
 80075ce:	3f04      	subs	r7, #4
 80075d0:	e7d0      	b.n	8007574 <__hexnan+0xd4>
 80075d2:	2004      	movs	r0, #4
 80075d4:	e7d5      	b.n	8007582 <__hexnan+0xe2>
	...

080075d8 <sbrk_aligned>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4e0f      	ldr	r6, [pc, #60]	@ (8007618 <sbrk_aligned+0x40>)
 80075dc:	460c      	mov	r4, r1
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	4605      	mov	r5, r0
 80075e2:	b911      	cbnz	r1, 80075ea <sbrk_aligned+0x12>
 80075e4:	f001 f922 	bl	800882c <_sbrk_r>
 80075e8:	6030      	str	r0, [r6, #0]
 80075ea:	4621      	mov	r1, r4
 80075ec:	4628      	mov	r0, r5
 80075ee:	f001 f91d 	bl	800882c <_sbrk_r>
 80075f2:	1c43      	adds	r3, r0, #1
 80075f4:	d103      	bne.n	80075fe <sbrk_aligned+0x26>
 80075f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80075fa:	4620      	mov	r0, r4
 80075fc:	bd70      	pop	{r4, r5, r6, pc}
 80075fe:	1cc4      	adds	r4, r0, #3
 8007600:	f024 0403 	bic.w	r4, r4, #3
 8007604:	42a0      	cmp	r0, r4
 8007606:	d0f8      	beq.n	80075fa <sbrk_aligned+0x22>
 8007608:	1a21      	subs	r1, r4, r0
 800760a:	4628      	mov	r0, r5
 800760c:	f001 f90e 	bl	800882c <_sbrk_r>
 8007610:	3001      	adds	r0, #1
 8007612:	d1f2      	bne.n	80075fa <sbrk_aligned+0x22>
 8007614:	e7ef      	b.n	80075f6 <sbrk_aligned+0x1e>
 8007616:	bf00      	nop
 8007618:	20000454 	.word	0x20000454

0800761c <_malloc_r>:
 800761c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007620:	1ccd      	adds	r5, r1, #3
 8007622:	f025 0503 	bic.w	r5, r5, #3
 8007626:	3508      	adds	r5, #8
 8007628:	2d0c      	cmp	r5, #12
 800762a:	bf38      	it	cc
 800762c:	250c      	movcc	r5, #12
 800762e:	2d00      	cmp	r5, #0
 8007630:	4606      	mov	r6, r0
 8007632:	db01      	blt.n	8007638 <_malloc_r+0x1c>
 8007634:	42a9      	cmp	r1, r5
 8007636:	d904      	bls.n	8007642 <_malloc_r+0x26>
 8007638:	230c      	movs	r3, #12
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	2000      	movs	r0, #0
 800763e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007718 <_malloc_r+0xfc>
 8007646:	f000 f87b 	bl	8007740 <__malloc_lock>
 800764a:	f8d8 3000 	ldr.w	r3, [r8]
 800764e:	461c      	mov	r4, r3
 8007650:	bb44      	cbnz	r4, 80076a4 <_malloc_r+0x88>
 8007652:	4629      	mov	r1, r5
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff ffbf 	bl	80075d8 <sbrk_aligned>
 800765a:	1c43      	adds	r3, r0, #1
 800765c:	4604      	mov	r4, r0
 800765e:	d158      	bne.n	8007712 <_malloc_r+0xf6>
 8007660:	f8d8 4000 	ldr.w	r4, [r8]
 8007664:	4627      	mov	r7, r4
 8007666:	2f00      	cmp	r7, #0
 8007668:	d143      	bne.n	80076f2 <_malloc_r+0xd6>
 800766a:	2c00      	cmp	r4, #0
 800766c:	d04b      	beq.n	8007706 <_malloc_r+0xea>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	4639      	mov	r1, r7
 8007672:	4630      	mov	r0, r6
 8007674:	eb04 0903 	add.w	r9, r4, r3
 8007678:	f001 f8d8 	bl	800882c <_sbrk_r>
 800767c:	4581      	cmp	r9, r0
 800767e:	d142      	bne.n	8007706 <_malloc_r+0xea>
 8007680:	6821      	ldr	r1, [r4, #0]
 8007682:	1a6d      	subs	r5, r5, r1
 8007684:	4629      	mov	r1, r5
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff ffa6 	bl	80075d8 <sbrk_aligned>
 800768c:	3001      	adds	r0, #1
 800768e:	d03a      	beq.n	8007706 <_malloc_r+0xea>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	442b      	add	r3, r5
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	f8d8 3000 	ldr.w	r3, [r8]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	bb62      	cbnz	r2, 80076f8 <_malloc_r+0xdc>
 800769e:	f8c8 7000 	str.w	r7, [r8]
 80076a2:	e00f      	b.n	80076c4 <_malloc_r+0xa8>
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	1b52      	subs	r2, r2, r5
 80076a8:	d420      	bmi.n	80076ec <_malloc_r+0xd0>
 80076aa:	2a0b      	cmp	r2, #11
 80076ac:	d917      	bls.n	80076de <_malloc_r+0xc2>
 80076ae:	1961      	adds	r1, r4, r5
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	6025      	str	r5, [r4, #0]
 80076b4:	bf18      	it	ne
 80076b6:	6059      	strne	r1, [r3, #4]
 80076b8:	6863      	ldr	r3, [r4, #4]
 80076ba:	bf08      	it	eq
 80076bc:	f8c8 1000 	streq.w	r1, [r8]
 80076c0:	5162      	str	r2, [r4, r5]
 80076c2:	604b      	str	r3, [r1, #4]
 80076c4:	4630      	mov	r0, r6
 80076c6:	f000 f841 	bl	800774c <__malloc_unlock>
 80076ca:	f104 000b 	add.w	r0, r4, #11
 80076ce:	1d23      	adds	r3, r4, #4
 80076d0:	f020 0007 	bic.w	r0, r0, #7
 80076d4:	1ac2      	subs	r2, r0, r3
 80076d6:	bf1c      	itt	ne
 80076d8:	1a1b      	subne	r3, r3, r0
 80076da:	50a3      	strne	r3, [r4, r2]
 80076dc:	e7af      	b.n	800763e <_malloc_r+0x22>
 80076de:	6862      	ldr	r2, [r4, #4]
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	bf0c      	ite	eq
 80076e4:	f8c8 2000 	streq.w	r2, [r8]
 80076e8:	605a      	strne	r2, [r3, #4]
 80076ea:	e7eb      	b.n	80076c4 <_malloc_r+0xa8>
 80076ec:	4623      	mov	r3, r4
 80076ee:	6864      	ldr	r4, [r4, #4]
 80076f0:	e7ae      	b.n	8007650 <_malloc_r+0x34>
 80076f2:	463c      	mov	r4, r7
 80076f4:	687f      	ldr	r7, [r7, #4]
 80076f6:	e7b6      	b.n	8007666 <_malloc_r+0x4a>
 80076f8:	461a      	mov	r2, r3
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d1fb      	bne.n	80076f8 <_malloc_r+0xdc>
 8007700:	2300      	movs	r3, #0
 8007702:	6053      	str	r3, [r2, #4]
 8007704:	e7de      	b.n	80076c4 <_malloc_r+0xa8>
 8007706:	230c      	movs	r3, #12
 8007708:	6033      	str	r3, [r6, #0]
 800770a:	4630      	mov	r0, r6
 800770c:	f000 f81e 	bl	800774c <__malloc_unlock>
 8007710:	e794      	b.n	800763c <_malloc_r+0x20>
 8007712:	6005      	str	r5, [r0, #0]
 8007714:	e7d6      	b.n	80076c4 <_malloc_r+0xa8>
 8007716:	bf00      	nop
 8007718:	20000458 	.word	0x20000458

0800771c <__ascii_mbtowc>:
 800771c:	b082      	sub	sp, #8
 800771e:	b901      	cbnz	r1, 8007722 <__ascii_mbtowc+0x6>
 8007720:	a901      	add	r1, sp, #4
 8007722:	b142      	cbz	r2, 8007736 <__ascii_mbtowc+0x1a>
 8007724:	b14b      	cbz	r3, 800773a <__ascii_mbtowc+0x1e>
 8007726:	7813      	ldrb	r3, [r2, #0]
 8007728:	600b      	str	r3, [r1, #0]
 800772a:	7812      	ldrb	r2, [r2, #0]
 800772c:	1e10      	subs	r0, r2, #0
 800772e:	bf18      	it	ne
 8007730:	2001      	movne	r0, #1
 8007732:	b002      	add	sp, #8
 8007734:	4770      	bx	lr
 8007736:	4610      	mov	r0, r2
 8007738:	e7fb      	b.n	8007732 <__ascii_mbtowc+0x16>
 800773a:	f06f 0001 	mvn.w	r0, #1
 800773e:	e7f8      	b.n	8007732 <__ascii_mbtowc+0x16>

08007740 <__malloc_lock>:
 8007740:	4801      	ldr	r0, [pc, #4]	@ (8007748 <__malloc_lock+0x8>)
 8007742:	f7ff bbaa 	b.w	8006e9a <__retarget_lock_acquire_recursive>
 8007746:	bf00      	nop
 8007748:	20000450 	.word	0x20000450

0800774c <__malloc_unlock>:
 800774c:	4801      	ldr	r0, [pc, #4]	@ (8007754 <__malloc_unlock+0x8>)
 800774e:	f7ff bba5 	b.w	8006e9c <__retarget_lock_release_recursive>
 8007752:	bf00      	nop
 8007754:	20000450 	.word	0x20000450

08007758 <_Balloc>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	69c6      	ldr	r6, [r0, #28]
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	b976      	cbnz	r6, 8007780 <_Balloc+0x28>
 8007762:	2010      	movs	r0, #16
 8007764:	f001 f8a4 	bl	80088b0 <malloc>
 8007768:	4602      	mov	r2, r0
 800776a:	61e0      	str	r0, [r4, #28]
 800776c:	b920      	cbnz	r0, 8007778 <_Balloc+0x20>
 800776e:	4b18      	ldr	r3, [pc, #96]	@ (80077d0 <_Balloc+0x78>)
 8007770:	4818      	ldr	r0, [pc, #96]	@ (80077d4 <_Balloc+0x7c>)
 8007772:	216b      	movs	r1, #107	@ 0x6b
 8007774:	f001 f86a 	bl	800884c <__assert_func>
 8007778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800777c:	6006      	str	r6, [r0, #0]
 800777e:	60c6      	str	r6, [r0, #12]
 8007780:	69e6      	ldr	r6, [r4, #28]
 8007782:	68f3      	ldr	r3, [r6, #12]
 8007784:	b183      	cbz	r3, 80077a8 <_Balloc+0x50>
 8007786:	69e3      	ldr	r3, [r4, #28]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800778e:	b9b8      	cbnz	r0, 80077c0 <_Balloc+0x68>
 8007790:	2101      	movs	r1, #1
 8007792:	fa01 f605 	lsl.w	r6, r1, r5
 8007796:	1d72      	adds	r2, r6, #5
 8007798:	0092      	lsls	r2, r2, #2
 800779a:	4620      	mov	r0, r4
 800779c:	f001 f874 	bl	8008888 <_calloc_r>
 80077a0:	b160      	cbz	r0, 80077bc <_Balloc+0x64>
 80077a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077a6:	e00e      	b.n	80077c6 <_Balloc+0x6e>
 80077a8:	2221      	movs	r2, #33	@ 0x21
 80077aa:	2104      	movs	r1, #4
 80077ac:	4620      	mov	r0, r4
 80077ae:	f001 f86b 	bl	8008888 <_calloc_r>
 80077b2:	69e3      	ldr	r3, [r4, #28]
 80077b4:	60f0      	str	r0, [r6, #12]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e4      	bne.n	8007786 <_Balloc+0x2e>
 80077bc:	2000      	movs	r0, #0
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	6802      	ldr	r2, [r0, #0]
 80077c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077c6:	2300      	movs	r3, #0
 80077c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077cc:	e7f7      	b.n	80077be <_Balloc+0x66>
 80077ce:	bf00      	nop
 80077d0:	08008fb1 	.word	0x08008fb1
 80077d4:	08008fc8 	.word	0x08008fc8

080077d8 <_Bfree>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	69c6      	ldr	r6, [r0, #28]
 80077dc:	4605      	mov	r5, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	b976      	cbnz	r6, 8007800 <_Bfree+0x28>
 80077e2:	2010      	movs	r0, #16
 80077e4:	f001 f864 	bl	80088b0 <malloc>
 80077e8:	4602      	mov	r2, r0
 80077ea:	61e8      	str	r0, [r5, #28]
 80077ec:	b920      	cbnz	r0, 80077f8 <_Bfree+0x20>
 80077ee:	4b09      	ldr	r3, [pc, #36]	@ (8007814 <_Bfree+0x3c>)
 80077f0:	4809      	ldr	r0, [pc, #36]	@ (8007818 <_Bfree+0x40>)
 80077f2:	218f      	movs	r1, #143	@ 0x8f
 80077f4:	f001 f82a 	bl	800884c <__assert_func>
 80077f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077fc:	6006      	str	r6, [r0, #0]
 80077fe:	60c6      	str	r6, [r0, #12]
 8007800:	b13c      	cbz	r4, 8007812 <_Bfree+0x3a>
 8007802:	69eb      	ldr	r3, [r5, #28]
 8007804:	6862      	ldr	r2, [r4, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800780c:	6021      	str	r1, [r4, #0]
 800780e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	08008fb1 	.word	0x08008fb1
 8007818:	08008fc8 	.word	0x08008fc8

0800781c <__multadd>:
 800781c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007820:	690d      	ldr	r5, [r1, #16]
 8007822:	4607      	mov	r7, r0
 8007824:	460c      	mov	r4, r1
 8007826:	461e      	mov	r6, r3
 8007828:	f101 0c14 	add.w	ip, r1, #20
 800782c:	2000      	movs	r0, #0
 800782e:	f8dc 3000 	ldr.w	r3, [ip]
 8007832:	b299      	uxth	r1, r3
 8007834:	fb02 6101 	mla	r1, r2, r1, r6
 8007838:	0c1e      	lsrs	r6, r3, #16
 800783a:	0c0b      	lsrs	r3, r1, #16
 800783c:	fb02 3306 	mla	r3, r2, r6, r3
 8007840:	b289      	uxth	r1, r1
 8007842:	3001      	adds	r0, #1
 8007844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007848:	4285      	cmp	r5, r0
 800784a:	f84c 1b04 	str.w	r1, [ip], #4
 800784e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007852:	dcec      	bgt.n	800782e <__multadd+0x12>
 8007854:	b30e      	cbz	r6, 800789a <__multadd+0x7e>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	42ab      	cmp	r3, r5
 800785a:	dc19      	bgt.n	8007890 <__multadd+0x74>
 800785c:	6861      	ldr	r1, [r4, #4]
 800785e:	4638      	mov	r0, r7
 8007860:	3101      	adds	r1, #1
 8007862:	f7ff ff79 	bl	8007758 <_Balloc>
 8007866:	4680      	mov	r8, r0
 8007868:	b928      	cbnz	r0, 8007876 <__multadd+0x5a>
 800786a:	4602      	mov	r2, r0
 800786c:	4b0c      	ldr	r3, [pc, #48]	@ (80078a0 <__multadd+0x84>)
 800786e:	480d      	ldr	r0, [pc, #52]	@ (80078a4 <__multadd+0x88>)
 8007870:	21ba      	movs	r1, #186	@ 0xba
 8007872:	f000 ffeb 	bl	800884c <__assert_func>
 8007876:	6922      	ldr	r2, [r4, #16]
 8007878:	3202      	adds	r2, #2
 800787a:	f104 010c 	add.w	r1, r4, #12
 800787e:	0092      	lsls	r2, r2, #2
 8007880:	300c      	adds	r0, #12
 8007882:	f7ff fb0c 	bl	8006e9e <memcpy>
 8007886:	4621      	mov	r1, r4
 8007888:	4638      	mov	r0, r7
 800788a:	f7ff ffa5 	bl	80077d8 <_Bfree>
 800788e:	4644      	mov	r4, r8
 8007890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007894:	3501      	adds	r5, #1
 8007896:	615e      	str	r6, [r3, #20]
 8007898:	6125      	str	r5, [r4, #16]
 800789a:	4620      	mov	r0, r4
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	08008f40 	.word	0x08008f40
 80078a4:	08008fc8 	.word	0x08008fc8

080078a8 <__s2b>:
 80078a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	4615      	mov	r5, r2
 80078b0:	461f      	mov	r7, r3
 80078b2:	2209      	movs	r2, #9
 80078b4:	3308      	adds	r3, #8
 80078b6:	4606      	mov	r6, r0
 80078b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078bc:	2100      	movs	r1, #0
 80078be:	2201      	movs	r2, #1
 80078c0:	429a      	cmp	r2, r3
 80078c2:	db09      	blt.n	80078d8 <__s2b+0x30>
 80078c4:	4630      	mov	r0, r6
 80078c6:	f7ff ff47 	bl	8007758 <_Balloc>
 80078ca:	b940      	cbnz	r0, 80078de <__s2b+0x36>
 80078cc:	4602      	mov	r2, r0
 80078ce:	4b19      	ldr	r3, [pc, #100]	@ (8007934 <__s2b+0x8c>)
 80078d0:	4819      	ldr	r0, [pc, #100]	@ (8007938 <__s2b+0x90>)
 80078d2:	21d3      	movs	r1, #211	@ 0xd3
 80078d4:	f000 ffba 	bl	800884c <__assert_func>
 80078d8:	0052      	lsls	r2, r2, #1
 80078da:	3101      	adds	r1, #1
 80078dc:	e7f0      	b.n	80078c0 <__s2b+0x18>
 80078de:	9b08      	ldr	r3, [sp, #32]
 80078e0:	6143      	str	r3, [r0, #20]
 80078e2:	2d09      	cmp	r5, #9
 80078e4:	f04f 0301 	mov.w	r3, #1
 80078e8:	6103      	str	r3, [r0, #16]
 80078ea:	dd16      	ble.n	800791a <__s2b+0x72>
 80078ec:	f104 0909 	add.w	r9, r4, #9
 80078f0:	46c8      	mov	r8, r9
 80078f2:	442c      	add	r4, r5
 80078f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078f8:	4601      	mov	r1, r0
 80078fa:	3b30      	subs	r3, #48	@ 0x30
 80078fc:	220a      	movs	r2, #10
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ff8c 	bl	800781c <__multadd>
 8007904:	45a0      	cmp	r8, r4
 8007906:	d1f5      	bne.n	80078f4 <__s2b+0x4c>
 8007908:	f1a5 0408 	sub.w	r4, r5, #8
 800790c:	444c      	add	r4, r9
 800790e:	1b2d      	subs	r5, r5, r4
 8007910:	1963      	adds	r3, r4, r5
 8007912:	42bb      	cmp	r3, r7
 8007914:	db04      	blt.n	8007920 <__s2b+0x78>
 8007916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791a:	340a      	adds	r4, #10
 800791c:	2509      	movs	r5, #9
 800791e:	e7f6      	b.n	800790e <__s2b+0x66>
 8007920:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007924:	4601      	mov	r1, r0
 8007926:	3b30      	subs	r3, #48	@ 0x30
 8007928:	220a      	movs	r2, #10
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff ff76 	bl	800781c <__multadd>
 8007930:	e7ee      	b.n	8007910 <__s2b+0x68>
 8007932:	bf00      	nop
 8007934:	08008f40 	.word	0x08008f40
 8007938:	08008fc8 	.word	0x08008fc8

0800793c <__hi0bits>:
 800793c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007940:	4603      	mov	r3, r0
 8007942:	bf36      	itet	cc
 8007944:	0403      	lslcc	r3, r0, #16
 8007946:	2000      	movcs	r0, #0
 8007948:	2010      	movcc	r0, #16
 800794a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800794e:	bf3c      	itt	cc
 8007950:	021b      	lslcc	r3, r3, #8
 8007952:	3008      	addcc	r0, #8
 8007954:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007958:	bf3c      	itt	cc
 800795a:	011b      	lslcc	r3, r3, #4
 800795c:	3004      	addcc	r0, #4
 800795e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007962:	bf3c      	itt	cc
 8007964:	009b      	lslcc	r3, r3, #2
 8007966:	3002      	addcc	r0, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	db05      	blt.n	8007978 <__hi0bits+0x3c>
 800796c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007970:	f100 0001 	add.w	r0, r0, #1
 8007974:	bf08      	it	eq
 8007976:	2020      	moveq	r0, #32
 8007978:	4770      	bx	lr

0800797a <__lo0bits>:
 800797a:	6803      	ldr	r3, [r0, #0]
 800797c:	4602      	mov	r2, r0
 800797e:	f013 0007 	ands.w	r0, r3, #7
 8007982:	d00b      	beq.n	800799c <__lo0bits+0x22>
 8007984:	07d9      	lsls	r1, r3, #31
 8007986:	d421      	bmi.n	80079cc <__lo0bits+0x52>
 8007988:	0798      	lsls	r0, r3, #30
 800798a:	bf49      	itett	mi
 800798c:	085b      	lsrmi	r3, r3, #1
 800798e:	089b      	lsrpl	r3, r3, #2
 8007990:	2001      	movmi	r0, #1
 8007992:	6013      	strmi	r3, [r2, #0]
 8007994:	bf5c      	itt	pl
 8007996:	6013      	strpl	r3, [r2, #0]
 8007998:	2002      	movpl	r0, #2
 800799a:	4770      	bx	lr
 800799c:	b299      	uxth	r1, r3
 800799e:	b909      	cbnz	r1, 80079a4 <__lo0bits+0x2a>
 80079a0:	0c1b      	lsrs	r3, r3, #16
 80079a2:	2010      	movs	r0, #16
 80079a4:	b2d9      	uxtb	r1, r3
 80079a6:	b909      	cbnz	r1, 80079ac <__lo0bits+0x32>
 80079a8:	3008      	adds	r0, #8
 80079aa:	0a1b      	lsrs	r3, r3, #8
 80079ac:	0719      	lsls	r1, r3, #28
 80079ae:	bf04      	itt	eq
 80079b0:	091b      	lsreq	r3, r3, #4
 80079b2:	3004      	addeq	r0, #4
 80079b4:	0799      	lsls	r1, r3, #30
 80079b6:	bf04      	itt	eq
 80079b8:	089b      	lsreq	r3, r3, #2
 80079ba:	3002      	addeq	r0, #2
 80079bc:	07d9      	lsls	r1, r3, #31
 80079be:	d403      	bmi.n	80079c8 <__lo0bits+0x4e>
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	f100 0001 	add.w	r0, r0, #1
 80079c6:	d003      	beq.n	80079d0 <__lo0bits+0x56>
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	4770      	bx	lr
 80079cc:	2000      	movs	r0, #0
 80079ce:	4770      	bx	lr
 80079d0:	2020      	movs	r0, #32
 80079d2:	4770      	bx	lr

080079d4 <__i2b>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	2101      	movs	r1, #1
 80079da:	f7ff febd 	bl	8007758 <_Balloc>
 80079de:	4602      	mov	r2, r0
 80079e0:	b928      	cbnz	r0, 80079ee <__i2b+0x1a>
 80079e2:	4b05      	ldr	r3, [pc, #20]	@ (80079f8 <__i2b+0x24>)
 80079e4:	4805      	ldr	r0, [pc, #20]	@ (80079fc <__i2b+0x28>)
 80079e6:	f240 1145 	movw	r1, #325	@ 0x145
 80079ea:	f000 ff2f 	bl	800884c <__assert_func>
 80079ee:	2301      	movs	r3, #1
 80079f0:	6144      	str	r4, [r0, #20]
 80079f2:	6103      	str	r3, [r0, #16]
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	bf00      	nop
 80079f8:	08008f40 	.word	0x08008f40
 80079fc:	08008fc8 	.word	0x08008fc8

08007a00 <__multiply>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4614      	mov	r4, r2
 8007a06:	690a      	ldr	r2, [r1, #16]
 8007a08:	6923      	ldr	r3, [r4, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	bfa8      	it	ge
 8007a0e:	4623      	movge	r3, r4
 8007a10:	460f      	mov	r7, r1
 8007a12:	bfa4      	itt	ge
 8007a14:	460c      	movge	r4, r1
 8007a16:	461f      	movge	r7, r3
 8007a18:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a1c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a20:	68a3      	ldr	r3, [r4, #8]
 8007a22:	6861      	ldr	r1, [r4, #4]
 8007a24:	eb0a 0609 	add.w	r6, sl, r9
 8007a28:	42b3      	cmp	r3, r6
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	bfb8      	it	lt
 8007a2e:	3101      	addlt	r1, #1
 8007a30:	f7ff fe92 	bl	8007758 <_Balloc>
 8007a34:	b930      	cbnz	r0, 8007a44 <__multiply+0x44>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b44      	ldr	r3, [pc, #272]	@ (8007b4c <__multiply+0x14c>)
 8007a3a:	4845      	ldr	r0, [pc, #276]	@ (8007b50 <__multiply+0x150>)
 8007a3c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a40:	f000 ff04 	bl	800884c <__assert_func>
 8007a44:	f100 0514 	add.w	r5, r0, #20
 8007a48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	2200      	movs	r2, #0
 8007a50:	4543      	cmp	r3, r8
 8007a52:	d321      	bcc.n	8007a98 <__multiply+0x98>
 8007a54:	f107 0114 	add.w	r1, r7, #20
 8007a58:	f104 0214 	add.w	r2, r4, #20
 8007a5c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a60:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a64:	9302      	str	r3, [sp, #8]
 8007a66:	1b13      	subs	r3, r2, r4
 8007a68:	3b15      	subs	r3, #21
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	3304      	adds	r3, #4
 8007a70:	f104 0715 	add.w	r7, r4, #21
 8007a74:	42ba      	cmp	r2, r7
 8007a76:	bf38      	it	cc
 8007a78:	2304      	movcc	r3, #4
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	9b02      	ldr	r3, [sp, #8]
 8007a7e:	9103      	str	r1, [sp, #12]
 8007a80:	428b      	cmp	r3, r1
 8007a82:	d80c      	bhi.n	8007a9e <__multiply+0x9e>
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	dd03      	ble.n	8007a90 <__multiply+0x90>
 8007a88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d05b      	beq.n	8007b48 <__multiply+0x148>
 8007a90:	6106      	str	r6, [r0, #16]
 8007a92:	b005      	add	sp, #20
 8007a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	f843 2b04 	str.w	r2, [r3], #4
 8007a9c:	e7d8      	b.n	8007a50 <__multiply+0x50>
 8007a9e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007aa2:	f1ba 0f00 	cmp.w	sl, #0
 8007aa6:	d024      	beq.n	8007af2 <__multiply+0xf2>
 8007aa8:	f104 0e14 	add.w	lr, r4, #20
 8007aac:	46a9      	mov	r9, r5
 8007aae:	f04f 0c00 	mov.w	ip, #0
 8007ab2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ab6:	f8d9 3000 	ldr.w	r3, [r9]
 8007aba:	fa1f fb87 	uxth.w	fp, r7
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ac4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ac8:	f8d9 7000 	ldr.w	r7, [r9]
 8007acc:	4463      	add	r3, ip
 8007ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ad2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ad6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ae0:	4572      	cmp	r2, lr
 8007ae2:	f849 3b04 	str.w	r3, [r9], #4
 8007ae6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007aea:	d8e2      	bhi.n	8007ab2 <__multiply+0xb2>
 8007aec:	9b01      	ldr	r3, [sp, #4]
 8007aee:	f845 c003 	str.w	ip, [r5, r3]
 8007af2:	9b03      	ldr	r3, [sp, #12]
 8007af4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007af8:	3104      	adds	r1, #4
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	d021      	beq.n	8007b44 <__multiply+0x144>
 8007b00:	682b      	ldr	r3, [r5, #0]
 8007b02:	f104 0c14 	add.w	ip, r4, #20
 8007b06:	46ae      	mov	lr, r5
 8007b08:	f04f 0a00 	mov.w	sl, #0
 8007b0c:	f8bc b000 	ldrh.w	fp, [ip]
 8007b10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b14:	fb09 770b 	mla	r7, r9, fp, r7
 8007b18:	4457      	add	r7, sl
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b20:	f84e 3b04 	str.w	r3, [lr], #4
 8007b24:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b2c:	f8be 3000 	ldrh.w	r3, [lr]
 8007b30:	fb09 330a 	mla	r3, r9, sl, r3
 8007b34:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b38:	4562      	cmp	r2, ip
 8007b3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b3e:	d8e5      	bhi.n	8007b0c <__multiply+0x10c>
 8007b40:	9f01      	ldr	r7, [sp, #4]
 8007b42:	51eb      	str	r3, [r5, r7]
 8007b44:	3504      	adds	r5, #4
 8007b46:	e799      	b.n	8007a7c <__multiply+0x7c>
 8007b48:	3e01      	subs	r6, #1
 8007b4a:	e79b      	b.n	8007a84 <__multiply+0x84>
 8007b4c:	08008f40 	.word	0x08008f40
 8007b50:	08008fc8 	.word	0x08008fc8

08007b54 <__pow5mult>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4615      	mov	r5, r2
 8007b5a:	f012 0203 	ands.w	r2, r2, #3
 8007b5e:	4607      	mov	r7, r0
 8007b60:	460e      	mov	r6, r1
 8007b62:	d007      	beq.n	8007b74 <__pow5mult+0x20>
 8007b64:	4c25      	ldr	r4, [pc, #148]	@ (8007bfc <__pow5mult+0xa8>)
 8007b66:	3a01      	subs	r2, #1
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b6e:	f7ff fe55 	bl	800781c <__multadd>
 8007b72:	4606      	mov	r6, r0
 8007b74:	10ad      	asrs	r5, r5, #2
 8007b76:	d03d      	beq.n	8007bf4 <__pow5mult+0xa0>
 8007b78:	69fc      	ldr	r4, [r7, #28]
 8007b7a:	b97c      	cbnz	r4, 8007b9c <__pow5mult+0x48>
 8007b7c:	2010      	movs	r0, #16
 8007b7e:	f000 fe97 	bl	80088b0 <malloc>
 8007b82:	4602      	mov	r2, r0
 8007b84:	61f8      	str	r0, [r7, #28]
 8007b86:	b928      	cbnz	r0, 8007b94 <__pow5mult+0x40>
 8007b88:	4b1d      	ldr	r3, [pc, #116]	@ (8007c00 <__pow5mult+0xac>)
 8007b8a:	481e      	ldr	r0, [pc, #120]	@ (8007c04 <__pow5mult+0xb0>)
 8007b8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b90:	f000 fe5c 	bl	800884c <__assert_func>
 8007b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b98:	6004      	str	r4, [r0, #0]
 8007b9a:	60c4      	str	r4, [r0, #12]
 8007b9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba4:	b94c      	cbnz	r4, 8007bba <__pow5mult+0x66>
 8007ba6:	f240 2171 	movw	r1, #625	@ 0x271
 8007baa:	4638      	mov	r0, r7
 8007bac:	f7ff ff12 	bl	80079d4 <__i2b>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	07eb      	lsls	r3, r5, #31
 8007bc0:	d50a      	bpl.n	8007bd8 <__pow5mult+0x84>
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f7ff ff1a 	bl	8007a00 <__multiply>
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff fe01 	bl	80077d8 <_Bfree>
 8007bd6:	4646      	mov	r6, r8
 8007bd8:	106d      	asrs	r5, r5, #1
 8007bda:	d00b      	beq.n	8007bf4 <__pow5mult+0xa0>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	b938      	cbnz	r0, 8007bf0 <__pow5mult+0x9c>
 8007be0:	4622      	mov	r2, r4
 8007be2:	4621      	mov	r1, r4
 8007be4:	4638      	mov	r0, r7
 8007be6:	f7ff ff0b 	bl	8007a00 <__multiply>
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	f8c0 9000 	str.w	r9, [r0]
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	e7e4      	b.n	8007bbe <__pow5mult+0x6a>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	bf00      	nop
 8007bfc:	08009024 	.word	0x08009024
 8007c00:	08008fb1 	.word	0x08008fb1
 8007c04:	08008fc8 	.word	0x08008fc8

08007c08 <__lshift>:
 8007c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	6849      	ldr	r1, [r1, #4]
 8007c10:	6923      	ldr	r3, [r4, #16]
 8007c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	4607      	mov	r7, r0
 8007c1a:	4691      	mov	r9, r2
 8007c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c20:	f108 0601 	add.w	r6, r8, #1
 8007c24:	42b3      	cmp	r3, r6
 8007c26:	db0b      	blt.n	8007c40 <__lshift+0x38>
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff fd95 	bl	8007758 <_Balloc>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b948      	cbnz	r0, 8007c46 <__lshift+0x3e>
 8007c32:	4602      	mov	r2, r0
 8007c34:	4b28      	ldr	r3, [pc, #160]	@ (8007cd8 <__lshift+0xd0>)
 8007c36:	4829      	ldr	r0, [pc, #164]	@ (8007cdc <__lshift+0xd4>)
 8007c38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c3c:	f000 fe06 	bl	800884c <__assert_func>
 8007c40:	3101      	adds	r1, #1
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	e7ee      	b.n	8007c24 <__lshift+0x1c>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f100 0114 	add.w	r1, r0, #20
 8007c4c:	f100 0210 	add.w	r2, r0, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	4553      	cmp	r3, sl
 8007c54:	db33      	blt.n	8007cbe <__lshift+0xb6>
 8007c56:	6920      	ldr	r0, [r4, #16]
 8007c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c5c:	f104 0314 	add.w	r3, r4, #20
 8007c60:	f019 091f 	ands.w	r9, r9, #31
 8007c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c6c:	d02b      	beq.n	8007cc6 <__lshift+0xbe>
 8007c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c72:	468a      	mov	sl, r1
 8007c74:	2200      	movs	r2, #0
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	fa00 f009 	lsl.w	r0, r0, r9
 8007c7c:	4310      	orrs	r0, r2
 8007c7e:	f84a 0b04 	str.w	r0, [sl], #4
 8007c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c86:	459c      	cmp	ip, r3
 8007c88:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c8c:	d8f3      	bhi.n	8007c76 <__lshift+0x6e>
 8007c8e:	ebac 0304 	sub.w	r3, ip, r4
 8007c92:	3b15      	subs	r3, #21
 8007c94:	f023 0303 	bic.w	r3, r3, #3
 8007c98:	3304      	adds	r3, #4
 8007c9a:	f104 0015 	add.w	r0, r4, #21
 8007c9e:	4584      	cmp	ip, r0
 8007ca0:	bf38      	it	cc
 8007ca2:	2304      	movcc	r3, #4
 8007ca4:	50ca      	str	r2, [r1, r3]
 8007ca6:	b10a      	cbz	r2, 8007cac <__lshift+0xa4>
 8007ca8:	f108 0602 	add.w	r6, r8, #2
 8007cac:	3e01      	subs	r6, #1
 8007cae:	4638      	mov	r0, r7
 8007cb0:	612e      	str	r6, [r5, #16]
 8007cb2:	4621      	mov	r1, r4
 8007cb4:	f7ff fd90 	bl	80077d8 <_Bfree>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	e7c5      	b.n	8007c52 <__lshift+0x4a>
 8007cc6:	3904      	subs	r1, #4
 8007cc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ccc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cd0:	459c      	cmp	ip, r3
 8007cd2:	d8f9      	bhi.n	8007cc8 <__lshift+0xc0>
 8007cd4:	e7ea      	b.n	8007cac <__lshift+0xa4>
 8007cd6:	bf00      	nop
 8007cd8:	08008f40 	.word	0x08008f40
 8007cdc:	08008fc8 	.word	0x08008fc8

08007ce0 <__mcmp>:
 8007ce0:	690a      	ldr	r2, [r1, #16]
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6900      	ldr	r0, [r0, #16]
 8007ce6:	1a80      	subs	r0, r0, r2
 8007ce8:	b530      	push	{r4, r5, lr}
 8007cea:	d10e      	bne.n	8007d0a <__mcmp+0x2a>
 8007cec:	3314      	adds	r3, #20
 8007cee:	3114      	adds	r1, #20
 8007cf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d00:	4295      	cmp	r5, r2
 8007d02:	d003      	beq.n	8007d0c <__mcmp+0x2c>
 8007d04:	d205      	bcs.n	8007d12 <__mcmp+0x32>
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d0a:	bd30      	pop	{r4, r5, pc}
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d3f3      	bcc.n	8007cf8 <__mcmp+0x18>
 8007d10:	e7fb      	b.n	8007d0a <__mcmp+0x2a>
 8007d12:	2001      	movs	r0, #1
 8007d14:	e7f9      	b.n	8007d0a <__mcmp+0x2a>
	...

08007d18 <__mdiff>:
 8007d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	4689      	mov	r9, r1
 8007d1e:	4606      	mov	r6, r0
 8007d20:	4611      	mov	r1, r2
 8007d22:	4648      	mov	r0, r9
 8007d24:	4614      	mov	r4, r2
 8007d26:	f7ff ffdb 	bl	8007ce0 <__mcmp>
 8007d2a:	1e05      	subs	r5, r0, #0
 8007d2c:	d112      	bne.n	8007d54 <__mdiff+0x3c>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff fd11 	bl	8007758 <_Balloc>
 8007d36:	4602      	mov	r2, r0
 8007d38:	b928      	cbnz	r0, 8007d46 <__mdiff+0x2e>
 8007d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8007e38 <__mdiff+0x120>)
 8007d3c:	f240 2137 	movw	r1, #567	@ 0x237
 8007d40:	483e      	ldr	r0, [pc, #248]	@ (8007e3c <__mdiff+0x124>)
 8007d42:	f000 fd83 	bl	800884c <__assert_func>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	b003      	add	sp, #12
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	bfbc      	itt	lt
 8007d56:	464b      	movlt	r3, r9
 8007d58:	46a1      	movlt	r9, r4
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d60:	bfba      	itte	lt
 8007d62:	461c      	movlt	r4, r3
 8007d64:	2501      	movlt	r5, #1
 8007d66:	2500      	movge	r5, #0
 8007d68:	f7ff fcf6 	bl	8007758 <_Balloc>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	b918      	cbnz	r0, 8007d78 <__mdiff+0x60>
 8007d70:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <__mdiff+0x120>)
 8007d72:	f240 2145 	movw	r1, #581	@ 0x245
 8007d76:	e7e3      	b.n	8007d40 <__mdiff+0x28>
 8007d78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d7c:	6926      	ldr	r6, [r4, #16]
 8007d7e:	60c5      	str	r5, [r0, #12]
 8007d80:	f109 0310 	add.w	r3, r9, #16
 8007d84:	f109 0514 	add.w	r5, r9, #20
 8007d88:	f104 0e14 	add.w	lr, r4, #20
 8007d8c:	f100 0b14 	add.w	fp, r0, #20
 8007d90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	46d9      	mov	r9, fp
 8007d9c:	f04f 0c00 	mov.w	ip, #0
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007da6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007daa:	9301      	str	r3, [sp, #4]
 8007dac:	fa1f f38a 	uxth.w	r3, sl
 8007db0:	4619      	mov	r1, r3
 8007db2:	b283      	uxth	r3, r0
 8007db4:	1acb      	subs	r3, r1, r3
 8007db6:	0c00      	lsrs	r0, r0, #16
 8007db8:	4463      	add	r3, ip
 8007dba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007dc8:	4576      	cmp	r6, lr
 8007dca:	f849 3b04 	str.w	r3, [r9], #4
 8007dce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dd2:	d8e5      	bhi.n	8007da0 <__mdiff+0x88>
 8007dd4:	1b33      	subs	r3, r6, r4
 8007dd6:	3b15      	subs	r3, #21
 8007dd8:	f023 0303 	bic.w	r3, r3, #3
 8007ddc:	3415      	adds	r4, #21
 8007dde:	3304      	adds	r3, #4
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	bf38      	it	cc
 8007de4:	2304      	movcc	r3, #4
 8007de6:	441d      	add	r5, r3
 8007de8:	445b      	add	r3, fp
 8007dea:	461e      	mov	r6, r3
 8007dec:	462c      	mov	r4, r5
 8007dee:	4544      	cmp	r4, r8
 8007df0:	d30e      	bcc.n	8007e10 <__mdiff+0xf8>
 8007df2:	f108 0103 	add.w	r1, r8, #3
 8007df6:	1b49      	subs	r1, r1, r5
 8007df8:	f021 0103 	bic.w	r1, r1, #3
 8007dfc:	3d03      	subs	r5, #3
 8007dfe:	45a8      	cmp	r8, r5
 8007e00:	bf38      	it	cc
 8007e02:	2100      	movcc	r1, #0
 8007e04:	440b      	add	r3, r1
 8007e06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e0a:	b191      	cbz	r1, 8007e32 <__mdiff+0x11a>
 8007e0c:	6117      	str	r7, [r2, #16]
 8007e0e:	e79d      	b.n	8007d4c <__mdiff+0x34>
 8007e10:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e14:	46e6      	mov	lr, ip
 8007e16:	0c08      	lsrs	r0, r1, #16
 8007e18:	fa1c fc81 	uxtah	ip, ip, r1
 8007e1c:	4471      	add	r1, lr
 8007e1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e22:	b289      	uxth	r1, r1
 8007e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e28:	f846 1b04 	str.w	r1, [r6], #4
 8007e2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e30:	e7dd      	b.n	8007dee <__mdiff+0xd6>
 8007e32:	3f01      	subs	r7, #1
 8007e34:	e7e7      	b.n	8007e06 <__mdiff+0xee>
 8007e36:	bf00      	nop
 8007e38:	08008f40 	.word	0x08008f40
 8007e3c:	08008fc8 	.word	0x08008fc8

08007e40 <__ulp>:
 8007e40:	b082      	sub	sp, #8
 8007e42:	ed8d 0b00 	vstr	d0, [sp]
 8007e46:	9a01      	ldr	r2, [sp, #4]
 8007e48:	4b0f      	ldr	r3, [pc, #60]	@ (8007e88 <__ulp+0x48>)
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dc08      	bgt.n	8007e66 <__ulp+0x26>
 8007e54:	425b      	negs	r3, r3
 8007e56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e5e:	da04      	bge.n	8007e6a <__ulp+0x2a>
 8007e60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e64:	4113      	asrs	r3, r2
 8007e66:	2200      	movs	r2, #0
 8007e68:	e008      	b.n	8007e7c <__ulp+0x3c>
 8007e6a:	f1a2 0314 	sub.w	r3, r2, #20
 8007e6e:	2b1e      	cmp	r3, #30
 8007e70:	bfda      	itte	le
 8007e72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e76:	40da      	lsrle	r2, r3
 8007e78:	2201      	movgt	r2, #1
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	ec41 0b10 	vmov	d0, r0, r1
 8007e84:	b002      	add	sp, #8
 8007e86:	4770      	bx	lr
 8007e88:	7ff00000 	.word	0x7ff00000

08007e8c <__b2d>:
 8007e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	6906      	ldr	r6, [r0, #16]
 8007e92:	f100 0814 	add.w	r8, r0, #20
 8007e96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e9a:	1f37      	subs	r7, r6, #4
 8007e9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f7ff fd4b 	bl	800793c <__hi0bits>
 8007ea6:	f1c0 0320 	rsb	r3, r0, #32
 8007eaa:	280a      	cmp	r0, #10
 8007eac:	600b      	str	r3, [r1, #0]
 8007eae:	491b      	ldr	r1, [pc, #108]	@ (8007f1c <__b2d+0x90>)
 8007eb0:	dc15      	bgt.n	8007ede <__b2d+0x52>
 8007eb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8007eb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8007eba:	45b8      	cmp	r8, r7
 8007ebc:	ea43 0501 	orr.w	r5, r3, r1
 8007ec0:	bf34      	ite	cc
 8007ec2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ec6:	2300      	movcs	r3, #0
 8007ec8:	3015      	adds	r0, #21
 8007eca:	fa02 f000 	lsl.w	r0, r2, r0
 8007ece:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ed2:	4303      	orrs	r3, r0
 8007ed4:	461c      	mov	r4, r3
 8007ed6:	ec45 4b10 	vmov	d0, r4, r5
 8007eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ede:	45b8      	cmp	r8, r7
 8007ee0:	bf3a      	itte	cc
 8007ee2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ee6:	f1a6 0708 	subcc.w	r7, r6, #8
 8007eea:	2300      	movcs	r3, #0
 8007eec:	380b      	subs	r0, #11
 8007eee:	d012      	beq.n	8007f16 <__b2d+0x8a>
 8007ef0:	f1c0 0120 	rsb	r1, r0, #32
 8007ef4:	fa23 f401 	lsr.w	r4, r3, r1
 8007ef8:	4082      	lsls	r2, r0
 8007efa:	4322      	orrs	r2, r4
 8007efc:	4547      	cmp	r7, r8
 8007efe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f02:	bf8c      	ite	hi
 8007f04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f08:	2200      	movls	r2, #0
 8007f0a:	4083      	lsls	r3, r0
 8007f0c:	40ca      	lsrs	r2, r1
 8007f0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f12:	4313      	orrs	r3, r2
 8007f14:	e7de      	b.n	8007ed4 <__b2d+0x48>
 8007f16:	ea42 0501 	orr.w	r5, r2, r1
 8007f1a:	e7db      	b.n	8007ed4 <__b2d+0x48>
 8007f1c:	3ff00000 	.word	0x3ff00000

08007f20 <__d2b>:
 8007f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f24:	460f      	mov	r7, r1
 8007f26:	2101      	movs	r1, #1
 8007f28:	ec59 8b10 	vmov	r8, r9, d0
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	f7ff fc13 	bl	8007758 <_Balloc>
 8007f32:	4604      	mov	r4, r0
 8007f34:	b930      	cbnz	r0, 8007f44 <__d2b+0x24>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b23      	ldr	r3, [pc, #140]	@ (8007fc8 <__d2b+0xa8>)
 8007f3a:	4824      	ldr	r0, [pc, #144]	@ (8007fcc <__d2b+0xac>)
 8007f3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f40:	f000 fc84 	bl	800884c <__assert_func>
 8007f44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f4c:	b10d      	cbz	r5, 8007f52 <__d2b+0x32>
 8007f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f52:	9301      	str	r3, [sp, #4]
 8007f54:	f1b8 0300 	subs.w	r3, r8, #0
 8007f58:	d023      	beq.n	8007fa2 <__d2b+0x82>
 8007f5a:	4668      	mov	r0, sp
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	f7ff fd0c 	bl	800797a <__lo0bits>
 8007f62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f66:	b1d0      	cbz	r0, 8007f9e <__d2b+0x7e>
 8007f68:	f1c0 0320 	rsb	r3, r0, #32
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	430b      	orrs	r3, r1
 8007f72:	40c2      	lsrs	r2, r0
 8007f74:	6163      	str	r3, [r4, #20]
 8007f76:	9201      	str	r2, [sp, #4]
 8007f78:	9b01      	ldr	r3, [sp, #4]
 8007f7a:	61a3      	str	r3, [r4, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	bf0c      	ite	eq
 8007f80:	2201      	moveq	r2, #1
 8007f82:	2202      	movne	r2, #2
 8007f84:	6122      	str	r2, [r4, #16]
 8007f86:	b1a5      	cbz	r5, 8007fb2 <__d2b+0x92>
 8007f88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f8c:	4405      	add	r5, r0
 8007f8e:	603d      	str	r5, [r7, #0]
 8007f90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f94:	6030      	str	r0, [r6, #0]
 8007f96:	4620      	mov	r0, r4
 8007f98:	b003      	add	sp, #12
 8007f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f9e:	6161      	str	r1, [r4, #20]
 8007fa0:	e7ea      	b.n	8007f78 <__d2b+0x58>
 8007fa2:	a801      	add	r0, sp, #4
 8007fa4:	f7ff fce9 	bl	800797a <__lo0bits>
 8007fa8:	9b01      	ldr	r3, [sp, #4]
 8007faa:	6163      	str	r3, [r4, #20]
 8007fac:	3020      	adds	r0, #32
 8007fae:	2201      	movs	r2, #1
 8007fb0:	e7e8      	b.n	8007f84 <__d2b+0x64>
 8007fb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fba:	6038      	str	r0, [r7, #0]
 8007fbc:	6918      	ldr	r0, [r3, #16]
 8007fbe:	f7ff fcbd 	bl	800793c <__hi0bits>
 8007fc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fc6:	e7e5      	b.n	8007f94 <__d2b+0x74>
 8007fc8:	08008f40 	.word	0x08008f40
 8007fcc:	08008fc8 	.word	0x08008fc8

08007fd0 <__ratio>:
 8007fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	e9cd 1000 	strd	r1, r0, [sp]
 8007fda:	a902      	add	r1, sp, #8
 8007fdc:	f7ff ff56 	bl	8007e8c <__b2d>
 8007fe0:	9800      	ldr	r0, [sp, #0]
 8007fe2:	a903      	add	r1, sp, #12
 8007fe4:	ec55 4b10 	vmov	r4, r5, d0
 8007fe8:	f7ff ff50 	bl	8007e8c <__b2d>
 8007fec:	9b01      	ldr	r3, [sp, #4]
 8007fee:	6919      	ldr	r1, [r3, #16]
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	1ac9      	subs	r1, r1, r3
 8007ff6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007ffa:	1a9b      	subs	r3, r3, r2
 8007ffc:	ec5b ab10 	vmov	sl, fp, d0
 8008000:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008004:	2b00      	cmp	r3, #0
 8008006:	bfce      	itee	gt
 8008008:	462a      	movgt	r2, r5
 800800a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800800e:	465a      	movle	r2, fp
 8008010:	462f      	mov	r7, r5
 8008012:	46d9      	mov	r9, fp
 8008014:	bfcc      	ite	gt
 8008016:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800801a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800801e:	464b      	mov	r3, r9
 8008020:	4652      	mov	r2, sl
 8008022:	4620      	mov	r0, r4
 8008024:	4639      	mov	r1, r7
 8008026:	f7f8 fc11 	bl	800084c <__aeabi_ddiv>
 800802a:	ec41 0b10 	vmov	d0, r0, r1
 800802e:	b005      	add	sp, #20
 8008030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008034 <__copybits>:
 8008034:	3901      	subs	r1, #1
 8008036:	b570      	push	{r4, r5, r6, lr}
 8008038:	1149      	asrs	r1, r1, #5
 800803a:	6914      	ldr	r4, [r2, #16]
 800803c:	3101      	adds	r1, #1
 800803e:	f102 0314 	add.w	r3, r2, #20
 8008042:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008046:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800804a:	1f05      	subs	r5, r0, #4
 800804c:	42a3      	cmp	r3, r4
 800804e:	d30c      	bcc.n	800806a <__copybits+0x36>
 8008050:	1aa3      	subs	r3, r4, r2
 8008052:	3b11      	subs	r3, #17
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	3211      	adds	r2, #17
 800805a:	42a2      	cmp	r2, r4
 800805c:	bf88      	it	hi
 800805e:	2300      	movhi	r3, #0
 8008060:	4418      	add	r0, r3
 8008062:	2300      	movs	r3, #0
 8008064:	4288      	cmp	r0, r1
 8008066:	d305      	bcc.n	8008074 <__copybits+0x40>
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	f853 6b04 	ldr.w	r6, [r3], #4
 800806e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008072:	e7eb      	b.n	800804c <__copybits+0x18>
 8008074:	f840 3b04 	str.w	r3, [r0], #4
 8008078:	e7f4      	b.n	8008064 <__copybits+0x30>

0800807a <__any_on>:
 800807a:	f100 0214 	add.w	r2, r0, #20
 800807e:	6900      	ldr	r0, [r0, #16]
 8008080:	114b      	asrs	r3, r1, #5
 8008082:	4298      	cmp	r0, r3
 8008084:	b510      	push	{r4, lr}
 8008086:	db11      	blt.n	80080ac <__any_on+0x32>
 8008088:	dd0a      	ble.n	80080a0 <__any_on+0x26>
 800808a:	f011 011f 	ands.w	r1, r1, #31
 800808e:	d007      	beq.n	80080a0 <__any_on+0x26>
 8008090:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008094:	fa24 f001 	lsr.w	r0, r4, r1
 8008098:	fa00 f101 	lsl.w	r1, r0, r1
 800809c:	428c      	cmp	r4, r1
 800809e:	d10b      	bne.n	80080b8 <__any_on+0x3e>
 80080a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d803      	bhi.n	80080b0 <__any_on+0x36>
 80080a8:	2000      	movs	r0, #0
 80080aa:	bd10      	pop	{r4, pc}
 80080ac:	4603      	mov	r3, r0
 80080ae:	e7f7      	b.n	80080a0 <__any_on+0x26>
 80080b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080b4:	2900      	cmp	r1, #0
 80080b6:	d0f5      	beq.n	80080a4 <__any_on+0x2a>
 80080b8:	2001      	movs	r0, #1
 80080ba:	e7f6      	b.n	80080aa <__any_on+0x30>

080080bc <__ascii_wctomb>:
 80080bc:	4603      	mov	r3, r0
 80080be:	4608      	mov	r0, r1
 80080c0:	b141      	cbz	r1, 80080d4 <__ascii_wctomb+0x18>
 80080c2:	2aff      	cmp	r2, #255	@ 0xff
 80080c4:	d904      	bls.n	80080d0 <__ascii_wctomb+0x14>
 80080c6:	228a      	movs	r2, #138	@ 0x8a
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080ce:	4770      	bx	lr
 80080d0:	700a      	strb	r2, [r1, #0]
 80080d2:	2001      	movs	r0, #1
 80080d4:	4770      	bx	lr

080080d6 <__ssputs_r>:
 80080d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080da:	688e      	ldr	r6, [r1, #8]
 80080dc:	461f      	mov	r7, r3
 80080de:	42be      	cmp	r6, r7
 80080e0:	680b      	ldr	r3, [r1, #0]
 80080e2:	4682      	mov	sl, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	4690      	mov	r8, r2
 80080e8:	d82d      	bhi.n	8008146 <__ssputs_r+0x70>
 80080ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080f2:	d026      	beq.n	8008142 <__ssputs_r+0x6c>
 80080f4:	6965      	ldr	r5, [r4, #20]
 80080f6:	6909      	ldr	r1, [r1, #16]
 80080f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080fc:	eba3 0901 	sub.w	r9, r3, r1
 8008100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008104:	1c7b      	adds	r3, r7, #1
 8008106:	444b      	add	r3, r9
 8008108:	106d      	asrs	r5, r5, #1
 800810a:	429d      	cmp	r5, r3
 800810c:	bf38      	it	cc
 800810e:	461d      	movcc	r5, r3
 8008110:	0553      	lsls	r3, r2, #21
 8008112:	d527      	bpl.n	8008164 <__ssputs_r+0x8e>
 8008114:	4629      	mov	r1, r5
 8008116:	f7ff fa81 	bl	800761c <_malloc_r>
 800811a:	4606      	mov	r6, r0
 800811c:	b360      	cbz	r0, 8008178 <__ssputs_r+0xa2>
 800811e:	6921      	ldr	r1, [r4, #16]
 8008120:	464a      	mov	r2, r9
 8008122:	f7fe febc 	bl	8006e9e <memcpy>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800812c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008130:	81a3      	strh	r3, [r4, #12]
 8008132:	6126      	str	r6, [r4, #16]
 8008134:	6165      	str	r5, [r4, #20]
 8008136:	444e      	add	r6, r9
 8008138:	eba5 0509 	sub.w	r5, r5, r9
 800813c:	6026      	str	r6, [r4, #0]
 800813e:	60a5      	str	r5, [r4, #8]
 8008140:	463e      	mov	r6, r7
 8008142:	42be      	cmp	r6, r7
 8008144:	d900      	bls.n	8008148 <__ssputs_r+0x72>
 8008146:	463e      	mov	r6, r7
 8008148:	6820      	ldr	r0, [r4, #0]
 800814a:	4632      	mov	r2, r6
 800814c:	4641      	mov	r1, r8
 800814e:	f000 fb53 	bl	80087f8 <memmove>
 8008152:	68a3      	ldr	r3, [r4, #8]
 8008154:	1b9b      	subs	r3, r3, r6
 8008156:	60a3      	str	r3, [r4, #8]
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	4433      	add	r3, r6
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	2000      	movs	r0, #0
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008164:	462a      	mov	r2, r5
 8008166:	f000 fbab 	bl	80088c0 <_realloc_r>
 800816a:	4606      	mov	r6, r0
 800816c:	2800      	cmp	r0, #0
 800816e:	d1e0      	bne.n	8008132 <__ssputs_r+0x5c>
 8008170:	6921      	ldr	r1, [r4, #16]
 8008172:	4650      	mov	r0, sl
 8008174:	f7fe feac 	bl	8006ed0 <_free_r>
 8008178:	230c      	movs	r3, #12
 800817a:	f8ca 3000 	str.w	r3, [sl]
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800818a:	e7e9      	b.n	8008160 <__ssputs_r+0x8a>

0800818c <_svfiprintf_r>:
 800818c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008190:	4698      	mov	r8, r3
 8008192:	898b      	ldrh	r3, [r1, #12]
 8008194:	061b      	lsls	r3, r3, #24
 8008196:	b09d      	sub	sp, #116	@ 0x74
 8008198:	4607      	mov	r7, r0
 800819a:	460d      	mov	r5, r1
 800819c:	4614      	mov	r4, r2
 800819e:	d510      	bpl.n	80081c2 <_svfiprintf_r+0x36>
 80081a0:	690b      	ldr	r3, [r1, #16]
 80081a2:	b973      	cbnz	r3, 80081c2 <_svfiprintf_r+0x36>
 80081a4:	2140      	movs	r1, #64	@ 0x40
 80081a6:	f7ff fa39 	bl	800761c <_malloc_r>
 80081aa:	6028      	str	r0, [r5, #0]
 80081ac:	6128      	str	r0, [r5, #16]
 80081ae:	b930      	cbnz	r0, 80081be <_svfiprintf_r+0x32>
 80081b0:	230c      	movs	r3, #12
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b8:	b01d      	add	sp, #116	@ 0x74
 80081ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081be:	2340      	movs	r3, #64	@ 0x40
 80081c0:	616b      	str	r3, [r5, #20]
 80081c2:	2300      	movs	r3, #0
 80081c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c6:	2320      	movs	r3, #32
 80081c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d0:	2330      	movs	r3, #48	@ 0x30
 80081d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008370 <_svfiprintf_r+0x1e4>
 80081d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081da:	f04f 0901 	mov.w	r9, #1
 80081de:	4623      	mov	r3, r4
 80081e0:	469a      	mov	sl, r3
 80081e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e6:	b10a      	cbz	r2, 80081ec <_svfiprintf_r+0x60>
 80081e8:	2a25      	cmp	r2, #37	@ 0x25
 80081ea:	d1f9      	bne.n	80081e0 <_svfiprintf_r+0x54>
 80081ec:	ebba 0b04 	subs.w	fp, sl, r4
 80081f0:	d00b      	beq.n	800820a <_svfiprintf_r+0x7e>
 80081f2:	465b      	mov	r3, fp
 80081f4:	4622      	mov	r2, r4
 80081f6:	4629      	mov	r1, r5
 80081f8:	4638      	mov	r0, r7
 80081fa:	f7ff ff6c 	bl	80080d6 <__ssputs_r>
 80081fe:	3001      	adds	r0, #1
 8008200:	f000 80a7 	beq.w	8008352 <_svfiprintf_r+0x1c6>
 8008204:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008206:	445a      	add	r2, fp
 8008208:	9209      	str	r2, [sp, #36]	@ 0x24
 800820a:	f89a 3000 	ldrb.w	r3, [sl]
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 809f 	beq.w	8008352 <_svfiprintf_r+0x1c6>
 8008214:	2300      	movs	r3, #0
 8008216:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800821a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800821e:	f10a 0a01 	add.w	sl, sl, #1
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	9307      	str	r3, [sp, #28]
 8008226:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800822a:	931a      	str	r3, [sp, #104]	@ 0x68
 800822c:	4654      	mov	r4, sl
 800822e:	2205      	movs	r2, #5
 8008230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008234:	484e      	ldr	r0, [pc, #312]	@ (8008370 <_svfiprintf_r+0x1e4>)
 8008236:	f7f7 ffd3 	bl	80001e0 <memchr>
 800823a:	9a04      	ldr	r2, [sp, #16]
 800823c:	b9d8      	cbnz	r0, 8008276 <_svfiprintf_r+0xea>
 800823e:	06d0      	lsls	r0, r2, #27
 8008240:	bf44      	itt	mi
 8008242:	2320      	movmi	r3, #32
 8008244:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008248:	0711      	lsls	r1, r2, #28
 800824a:	bf44      	itt	mi
 800824c:	232b      	movmi	r3, #43	@ 0x2b
 800824e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008252:	f89a 3000 	ldrb.w	r3, [sl]
 8008256:	2b2a      	cmp	r3, #42	@ 0x2a
 8008258:	d015      	beq.n	8008286 <_svfiprintf_r+0xfa>
 800825a:	9a07      	ldr	r2, [sp, #28]
 800825c:	4654      	mov	r4, sl
 800825e:	2000      	movs	r0, #0
 8008260:	f04f 0c0a 	mov.w	ip, #10
 8008264:	4621      	mov	r1, r4
 8008266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800826a:	3b30      	subs	r3, #48	@ 0x30
 800826c:	2b09      	cmp	r3, #9
 800826e:	d94b      	bls.n	8008308 <_svfiprintf_r+0x17c>
 8008270:	b1b0      	cbz	r0, 80082a0 <_svfiprintf_r+0x114>
 8008272:	9207      	str	r2, [sp, #28]
 8008274:	e014      	b.n	80082a0 <_svfiprintf_r+0x114>
 8008276:	eba0 0308 	sub.w	r3, r0, r8
 800827a:	fa09 f303 	lsl.w	r3, r9, r3
 800827e:	4313      	orrs	r3, r2
 8008280:	9304      	str	r3, [sp, #16]
 8008282:	46a2      	mov	sl, r4
 8008284:	e7d2      	b.n	800822c <_svfiprintf_r+0xa0>
 8008286:	9b03      	ldr	r3, [sp, #12]
 8008288:	1d19      	adds	r1, r3, #4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	9103      	str	r1, [sp, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	bfbb      	ittet	lt
 8008292:	425b      	neglt	r3, r3
 8008294:	f042 0202 	orrlt.w	r2, r2, #2
 8008298:	9307      	strge	r3, [sp, #28]
 800829a:	9307      	strlt	r3, [sp, #28]
 800829c:	bfb8      	it	lt
 800829e:	9204      	strlt	r2, [sp, #16]
 80082a0:	7823      	ldrb	r3, [r4, #0]
 80082a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80082a4:	d10a      	bne.n	80082bc <_svfiprintf_r+0x130>
 80082a6:	7863      	ldrb	r3, [r4, #1]
 80082a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082aa:	d132      	bne.n	8008312 <_svfiprintf_r+0x186>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	1d1a      	adds	r2, r3, #4
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	9203      	str	r2, [sp, #12]
 80082b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082b8:	3402      	adds	r4, #2
 80082ba:	9305      	str	r3, [sp, #20]
 80082bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008380 <_svfiprintf_r+0x1f4>
 80082c0:	7821      	ldrb	r1, [r4, #0]
 80082c2:	2203      	movs	r2, #3
 80082c4:	4650      	mov	r0, sl
 80082c6:	f7f7 ff8b 	bl	80001e0 <memchr>
 80082ca:	b138      	cbz	r0, 80082dc <_svfiprintf_r+0x150>
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	eba0 000a 	sub.w	r0, r0, sl
 80082d2:	2240      	movs	r2, #64	@ 0x40
 80082d4:	4082      	lsls	r2, r0
 80082d6:	4313      	orrs	r3, r2
 80082d8:	3401      	adds	r4, #1
 80082da:	9304      	str	r3, [sp, #16]
 80082dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e0:	4824      	ldr	r0, [pc, #144]	@ (8008374 <_svfiprintf_r+0x1e8>)
 80082e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082e6:	2206      	movs	r2, #6
 80082e8:	f7f7 ff7a 	bl	80001e0 <memchr>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d036      	beq.n	800835e <_svfiprintf_r+0x1d2>
 80082f0:	4b21      	ldr	r3, [pc, #132]	@ (8008378 <_svfiprintf_r+0x1ec>)
 80082f2:	bb1b      	cbnz	r3, 800833c <_svfiprintf_r+0x1b0>
 80082f4:	9b03      	ldr	r3, [sp, #12]
 80082f6:	3307      	adds	r3, #7
 80082f8:	f023 0307 	bic.w	r3, r3, #7
 80082fc:	3308      	adds	r3, #8
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008302:	4433      	add	r3, r6
 8008304:	9309      	str	r3, [sp, #36]	@ 0x24
 8008306:	e76a      	b.n	80081de <_svfiprintf_r+0x52>
 8008308:	fb0c 3202 	mla	r2, ip, r2, r3
 800830c:	460c      	mov	r4, r1
 800830e:	2001      	movs	r0, #1
 8008310:	e7a8      	b.n	8008264 <_svfiprintf_r+0xd8>
 8008312:	2300      	movs	r3, #0
 8008314:	3401      	adds	r4, #1
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	4619      	mov	r1, r3
 800831a:	f04f 0c0a 	mov.w	ip, #10
 800831e:	4620      	mov	r0, r4
 8008320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008324:	3a30      	subs	r2, #48	@ 0x30
 8008326:	2a09      	cmp	r2, #9
 8008328:	d903      	bls.n	8008332 <_svfiprintf_r+0x1a6>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0c6      	beq.n	80082bc <_svfiprintf_r+0x130>
 800832e:	9105      	str	r1, [sp, #20]
 8008330:	e7c4      	b.n	80082bc <_svfiprintf_r+0x130>
 8008332:	fb0c 2101 	mla	r1, ip, r1, r2
 8008336:	4604      	mov	r4, r0
 8008338:	2301      	movs	r3, #1
 800833a:	e7f0      	b.n	800831e <_svfiprintf_r+0x192>
 800833c:	ab03      	add	r3, sp, #12
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	462a      	mov	r2, r5
 8008342:	4b0e      	ldr	r3, [pc, #56]	@ (800837c <_svfiprintf_r+0x1f0>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	4638      	mov	r0, r7
 8008348:	f3af 8000 	nop.w
 800834c:	1c42      	adds	r2, r0, #1
 800834e:	4606      	mov	r6, r0
 8008350:	d1d6      	bne.n	8008300 <_svfiprintf_r+0x174>
 8008352:	89ab      	ldrh	r3, [r5, #12]
 8008354:	065b      	lsls	r3, r3, #25
 8008356:	f53f af2d 	bmi.w	80081b4 <_svfiprintf_r+0x28>
 800835a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800835c:	e72c      	b.n	80081b8 <_svfiprintf_r+0x2c>
 800835e:	ab03      	add	r3, sp, #12
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	462a      	mov	r2, r5
 8008364:	4b05      	ldr	r3, [pc, #20]	@ (800837c <_svfiprintf_r+0x1f0>)
 8008366:	a904      	add	r1, sp, #16
 8008368:	4638      	mov	r0, r7
 800836a:	f000 f879 	bl	8008460 <_printf_i>
 800836e:	e7ed      	b.n	800834c <_svfiprintf_r+0x1c0>
 8008370:	08009221 	.word	0x08009221
 8008374:	0800922b 	.word	0x0800922b
 8008378:	00000000 	.word	0x00000000
 800837c:	080080d7 	.word	0x080080d7
 8008380:	08009227 	.word	0x08009227

08008384 <_printf_common>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	4616      	mov	r6, r2
 800838a:	4698      	mov	r8, r3
 800838c:	688a      	ldr	r2, [r1, #8]
 800838e:	690b      	ldr	r3, [r1, #16]
 8008390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008394:	4293      	cmp	r3, r2
 8008396:	bfb8      	it	lt
 8008398:	4613      	movlt	r3, r2
 800839a:	6033      	str	r3, [r6, #0]
 800839c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083a0:	4607      	mov	r7, r0
 80083a2:	460c      	mov	r4, r1
 80083a4:	b10a      	cbz	r2, 80083aa <_printf_common+0x26>
 80083a6:	3301      	adds	r3, #1
 80083a8:	6033      	str	r3, [r6, #0]
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	0699      	lsls	r1, r3, #26
 80083ae:	bf42      	ittt	mi
 80083b0:	6833      	ldrmi	r3, [r6, #0]
 80083b2:	3302      	addmi	r3, #2
 80083b4:	6033      	strmi	r3, [r6, #0]
 80083b6:	6825      	ldr	r5, [r4, #0]
 80083b8:	f015 0506 	ands.w	r5, r5, #6
 80083bc:	d106      	bne.n	80083cc <_printf_common+0x48>
 80083be:	f104 0a19 	add.w	sl, r4, #25
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	6832      	ldr	r2, [r6, #0]
 80083c6:	1a9b      	subs	r3, r3, r2
 80083c8:	42ab      	cmp	r3, r5
 80083ca:	dc26      	bgt.n	800841a <_printf_common+0x96>
 80083cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	3b00      	subs	r3, #0
 80083d4:	bf18      	it	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	0692      	lsls	r2, r2, #26
 80083da:	d42b      	bmi.n	8008434 <_printf_common+0xb0>
 80083dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083e0:	4641      	mov	r1, r8
 80083e2:	4638      	mov	r0, r7
 80083e4:	47c8      	blx	r9
 80083e6:	3001      	adds	r0, #1
 80083e8:	d01e      	beq.n	8008428 <_printf_common+0xa4>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	6922      	ldr	r2, [r4, #16]
 80083ee:	f003 0306 	and.w	r3, r3, #6
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	bf02      	ittt	eq
 80083f6:	68e5      	ldreq	r5, [r4, #12]
 80083f8:	6833      	ldreq	r3, [r6, #0]
 80083fa:	1aed      	subeq	r5, r5, r3
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	bf0c      	ite	eq
 8008400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008404:	2500      	movne	r5, #0
 8008406:	4293      	cmp	r3, r2
 8008408:	bfc4      	itt	gt
 800840a:	1a9b      	subgt	r3, r3, r2
 800840c:	18ed      	addgt	r5, r5, r3
 800840e:	2600      	movs	r6, #0
 8008410:	341a      	adds	r4, #26
 8008412:	42b5      	cmp	r5, r6
 8008414:	d11a      	bne.n	800844c <_printf_common+0xc8>
 8008416:	2000      	movs	r0, #0
 8008418:	e008      	b.n	800842c <_printf_common+0xa8>
 800841a:	2301      	movs	r3, #1
 800841c:	4652      	mov	r2, sl
 800841e:	4641      	mov	r1, r8
 8008420:	4638      	mov	r0, r7
 8008422:	47c8      	blx	r9
 8008424:	3001      	adds	r0, #1
 8008426:	d103      	bne.n	8008430 <_printf_common+0xac>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800842c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008430:	3501      	adds	r5, #1
 8008432:	e7c6      	b.n	80083c2 <_printf_common+0x3e>
 8008434:	18e1      	adds	r1, r4, r3
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	2030      	movs	r0, #48	@ 0x30
 800843a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800843e:	4422      	add	r2, r4
 8008440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008448:	3302      	adds	r3, #2
 800844a:	e7c7      	b.n	80083dc <_printf_common+0x58>
 800844c:	2301      	movs	r3, #1
 800844e:	4622      	mov	r2, r4
 8008450:	4641      	mov	r1, r8
 8008452:	4638      	mov	r0, r7
 8008454:	47c8      	blx	r9
 8008456:	3001      	adds	r0, #1
 8008458:	d0e6      	beq.n	8008428 <_printf_common+0xa4>
 800845a:	3601      	adds	r6, #1
 800845c:	e7d9      	b.n	8008412 <_printf_common+0x8e>
	...

08008460 <_printf_i>:
 8008460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008464:	7e0f      	ldrb	r7, [r1, #24]
 8008466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008468:	2f78      	cmp	r7, #120	@ 0x78
 800846a:	4691      	mov	r9, r2
 800846c:	4680      	mov	r8, r0
 800846e:	460c      	mov	r4, r1
 8008470:	469a      	mov	sl, r3
 8008472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008476:	d807      	bhi.n	8008488 <_printf_i+0x28>
 8008478:	2f62      	cmp	r7, #98	@ 0x62
 800847a:	d80a      	bhi.n	8008492 <_printf_i+0x32>
 800847c:	2f00      	cmp	r7, #0
 800847e:	f000 80d2 	beq.w	8008626 <_printf_i+0x1c6>
 8008482:	2f58      	cmp	r7, #88	@ 0x58
 8008484:	f000 80b9 	beq.w	80085fa <_printf_i+0x19a>
 8008488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800848c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008490:	e03a      	b.n	8008508 <_printf_i+0xa8>
 8008492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008496:	2b15      	cmp	r3, #21
 8008498:	d8f6      	bhi.n	8008488 <_printf_i+0x28>
 800849a:	a101      	add	r1, pc, #4	@ (adr r1, 80084a0 <_printf_i+0x40>)
 800849c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084a0:	080084f9 	.word	0x080084f9
 80084a4:	0800850d 	.word	0x0800850d
 80084a8:	08008489 	.word	0x08008489
 80084ac:	08008489 	.word	0x08008489
 80084b0:	08008489 	.word	0x08008489
 80084b4:	08008489 	.word	0x08008489
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008489 	.word	0x08008489
 80084c0:	08008489 	.word	0x08008489
 80084c4:	08008489 	.word	0x08008489
 80084c8:	08008489 	.word	0x08008489
 80084cc:	0800860d 	.word	0x0800860d
 80084d0:	08008537 	.word	0x08008537
 80084d4:	080085c7 	.word	0x080085c7
 80084d8:	08008489 	.word	0x08008489
 80084dc:	08008489 	.word	0x08008489
 80084e0:	0800862f 	.word	0x0800862f
 80084e4:	08008489 	.word	0x08008489
 80084e8:	08008537 	.word	0x08008537
 80084ec:	08008489 	.word	0x08008489
 80084f0:	08008489 	.word	0x08008489
 80084f4:	080085cf 	.word	0x080085cf
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	1d1a      	adds	r2, r3, #4
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6032      	str	r2, [r6, #0]
 8008500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008508:	2301      	movs	r3, #1
 800850a:	e09d      	b.n	8008648 <_printf_i+0x1e8>
 800850c:	6833      	ldr	r3, [r6, #0]
 800850e:	6820      	ldr	r0, [r4, #0]
 8008510:	1d19      	adds	r1, r3, #4
 8008512:	6031      	str	r1, [r6, #0]
 8008514:	0606      	lsls	r6, r0, #24
 8008516:	d501      	bpl.n	800851c <_printf_i+0xbc>
 8008518:	681d      	ldr	r5, [r3, #0]
 800851a:	e003      	b.n	8008524 <_printf_i+0xc4>
 800851c:	0645      	lsls	r5, r0, #25
 800851e:	d5fb      	bpl.n	8008518 <_printf_i+0xb8>
 8008520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008524:	2d00      	cmp	r5, #0
 8008526:	da03      	bge.n	8008530 <_printf_i+0xd0>
 8008528:	232d      	movs	r3, #45	@ 0x2d
 800852a:	426d      	negs	r5, r5
 800852c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008530:	4859      	ldr	r0, [pc, #356]	@ (8008698 <_printf_i+0x238>)
 8008532:	230a      	movs	r3, #10
 8008534:	e011      	b.n	800855a <_printf_i+0xfa>
 8008536:	6821      	ldr	r1, [r4, #0]
 8008538:	6833      	ldr	r3, [r6, #0]
 800853a:	0608      	lsls	r0, r1, #24
 800853c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008540:	d402      	bmi.n	8008548 <_printf_i+0xe8>
 8008542:	0649      	lsls	r1, r1, #25
 8008544:	bf48      	it	mi
 8008546:	b2ad      	uxthmi	r5, r5
 8008548:	2f6f      	cmp	r7, #111	@ 0x6f
 800854a:	4853      	ldr	r0, [pc, #332]	@ (8008698 <_printf_i+0x238>)
 800854c:	6033      	str	r3, [r6, #0]
 800854e:	bf14      	ite	ne
 8008550:	230a      	movne	r3, #10
 8008552:	2308      	moveq	r3, #8
 8008554:	2100      	movs	r1, #0
 8008556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800855a:	6866      	ldr	r6, [r4, #4]
 800855c:	60a6      	str	r6, [r4, #8]
 800855e:	2e00      	cmp	r6, #0
 8008560:	bfa2      	ittt	ge
 8008562:	6821      	ldrge	r1, [r4, #0]
 8008564:	f021 0104 	bicge.w	r1, r1, #4
 8008568:	6021      	strge	r1, [r4, #0]
 800856a:	b90d      	cbnz	r5, 8008570 <_printf_i+0x110>
 800856c:	2e00      	cmp	r6, #0
 800856e:	d04b      	beq.n	8008608 <_printf_i+0x1a8>
 8008570:	4616      	mov	r6, r2
 8008572:	fbb5 f1f3 	udiv	r1, r5, r3
 8008576:	fb03 5711 	mls	r7, r3, r1, r5
 800857a:	5dc7      	ldrb	r7, [r0, r7]
 800857c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008580:	462f      	mov	r7, r5
 8008582:	42bb      	cmp	r3, r7
 8008584:	460d      	mov	r5, r1
 8008586:	d9f4      	bls.n	8008572 <_printf_i+0x112>
 8008588:	2b08      	cmp	r3, #8
 800858a:	d10b      	bne.n	80085a4 <_printf_i+0x144>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	07df      	lsls	r7, r3, #31
 8008590:	d508      	bpl.n	80085a4 <_printf_i+0x144>
 8008592:	6923      	ldr	r3, [r4, #16]
 8008594:	6861      	ldr	r1, [r4, #4]
 8008596:	4299      	cmp	r1, r3
 8008598:	bfde      	ittt	le
 800859a:	2330      	movle	r3, #48	@ 0x30
 800859c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085a0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80085a4:	1b92      	subs	r2, r2, r6
 80085a6:	6122      	str	r2, [r4, #16]
 80085a8:	f8cd a000 	str.w	sl, [sp]
 80085ac:	464b      	mov	r3, r9
 80085ae:	aa03      	add	r2, sp, #12
 80085b0:	4621      	mov	r1, r4
 80085b2:	4640      	mov	r0, r8
 80085b4:	f7ff fee6 	bl	8008384 <_printf_common>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d14a      	bne.n	8008652 <_printf_i+0x1f2>
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085c0:	b004      	add	sp, #16
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	f043 0320 	orr.w	r3, r3, #32
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	4833      	ldr	r0, [pc, #204]	@ (800869c <_printf_i+0x23c>)
 80085d0:	2778      	movs	r7, #120	@ 0x78
 80085d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	6831      	ldr	r1, [r6, #0]
 80085da:	061f      	lsls	r7, r3, #24
 80085dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80085e0:	d402      	bmi.n	80085e8 <_printf_i+0x188>
 80085e2:	065f      	lsls	r7, r3, #25
 80085e4:	bf48      	it	mi
 80085e6:	b2ad      	uxthmi	r5, r5
 80085e8:	6031      	str	r1, [r6, #0]
 80085ea:	07d9      	lsls	r1, r3, #31
 80085ec:	bf44      	itt	mi
 80085ee:	f043 0320 	orrmi.w	r3, r3, #32
 80085f2:	6023      	strmi	r3, [r4, #0]
 80085f4:	b11d      	cbz	r5, 80085fe <_printf_i+0x19e>
 80085f6:	2310      	movs	r3, #16
 80085f8:	e7ac      	b.n	8008554 <_printf_i+0xf4>
 80085fa:	4827      	ldr	r0, [pc, #156]	@ (8008698 <_printf_i+0x238>)
 80085fc:	e7e9      	b.n	80085d2 <_printf_i+0x172>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	f023 0320 	bic.w	r3, r3, #32
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	e7f6      	b.n	80085f6 <_printf_i+0x196>
 8008608:	4616      	mov	r6, r2
 800860a:	e7bd      	b.n	8008588 <_printf_i+0x128>
 800860c:	6833      	ldr	r3, [r6, #0]
 800860e:	6825      	ldr	r5, [r4, #0]
 8008610:	6961      	ldr	r1, [r4, #20]
 8008612:	1d18      	adds	r0, r3, #4
 8008614:	6030      	str	r0, [r6, #0]
 8008616:	062e      	lsls	r6, r5, #24
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	d501      	bpl.n	8008620 <_printf_i+0x1c0>
 800861c:	6019      	str	r1, [r3, #0]
 800861e:	e002      	b.n	8008626 <_printf_i+0x1c6>
 8008620:	0668      	lsls	r0, r5, #25
 8008622:	d5fb      	bpl.n	800861c <_printf_i+0x1bc>
 8008624:	8019      	strh	r1, [r3, #0]
 8008626:	2300      	movs	r3, #0
 8008628:	6123      	str	r3, [r4, #16]
 800862a:	4616      	mov	r6, r2
 800862c:	e7bc      	b.n	80085a8 <_printf_i+0x148>
 800862e:	6833      	ldr	r3, [r6, #0]
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	6032      	str	r2, [r6, #0]
 8008634:	681e      	ldr	r6, [r3, #0]
 8008636:	6862      	ldr	r2, [r4, #4]
 8008638:	2100      	movs	r1, #0
 800863a:	4630      	mov	r0, r6
 800863c:	f7f7 fdd0 	bl	80001e0 <memchr>
 8008640:	b108      	cbz	r0, 8008646 <_printf_i+0x1e6>
 8008642:	1b80      	subs	r0, r0, r6
 8008644:	6060      	str	r0, [r4, #4]
 8008646:	6863      	ldr	r3, [r4, #4]
 8008648:	6123      	str	r3, [r4, #16]
 800864a:	2300      	movs	r3, #0
 800864c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008650:	e7aa      	b.n	80085a8 <_printf_i+0x148>
 8008652:	6923      	ldr	r3, [r4, #16]
 8008654:	4632      	mov	r2, r6
 8008656:	4649      	mov	r1, r9
 8008658:	4640      	mov	r0, r8
 800865a:	47d0      	blx	sl
 800865c:	3001      	adds	r0, #1
 800865e:	d0ad      	beq.n	80085bc <_printf_i+0x15c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	079b      	lsls	r3, r3, #30
 8008664:	d413      	bmi.n	800868e <_printf_i+0x22e>
 8008666:	68e0      	ldr	r0, [r4, #12]
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	4298      	cmp	r0, r3
 800866c:	bfb8      	it	lt
 800866e:	4618      	movlt	r0, r3
 8008670:	e7a6      	b.n	80085c0 <_printf_i+0x160>
 8008672:	2301      	movs	r3, #1
 8008674:	4632      	mov	r2, r6
 8008676:	4649      	mov	r1, r9
 8008678:	4640      	mov	r0, r8
 800867a:	47d0      	blx	sl
 800867c:	3001      	adds	r0, #1
 800867e:	d09d      	beq.n	80085bc <_printf_i+0x15c>
 8008680:	3501      	adds	r5, #1
 8008682:	68e3      	ldr	r3, [r4, #12]
 8008684:	9903      	ldr	r1, [sp, #12]
 8008686:	1a5b      	subs	r3, r3, r1
 8008688:	42ab      	cmp	r3, r5
 800868a:	dcf2      	bgt.n	8008672 <_printf_i+0x212>
 800868c:	e7eb      	b.n	8008666 <_printf_i+0x206>
 800868e:	2500      	movs	r5, #0
 8008690:	f104 0619 	add.w	r6, r4, #25
 8008694:	e7f5      	b.n	8008682 <_printf_i+0x222>
 8008696:	bf00      	nop
 8008698:	08009232 	.word	0x08009232
 800869c:	08009243 	.word	0x08009243

080086a0 <__sflush_r>:
 80086a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086a8:	0716      	lsls	r6, r2, #28
 80086aa:	4605      	mov	r5, r0
 80086ac:	460c      	mov	r4, r1
 80086ae:	d454      	bmi.n	800875a <__sflush_r+0xba>
 80086b0:	684b      	ldr	r3, [r1, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dc02      	bgt.n	80086bc <__sflush_r+0x1c>
 80086b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	dd48      	ble.n	800874e <__sflush_r+0xae>
 80086bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086be:	2e00      	cmp	r6, #0
 80086c0:	d045      	beq.n	800874e <__sflush_r+0xae>
 80086c2:	2300      	movs	r3, #0
 80086c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086c8:	682f      	ldr	r7, [r5, #0]
 80086ca:	6a21      	ldr	r1, [r4, #32]
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	d030      	beq.n	8008732 <__sflush_r+0x92>
 80086d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	0759      	lsls	r1, r3, #29
 80086d6:	d505      	bpl.n	80086e4 <__sflush_r+0x44>
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	1ad2      	subs	r2, r2, r3
 80086dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086de:	b10b      	cbz	r3, 80086e4 <__sflush_r+0x44>
 80086e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086e2:	1ad2      	subs	r2, r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086e8:	6a21      	ldr	r1, [r4, #32]
 80086ea:	4628      	mov	r0, r5
 80086ec:	47b0      	blx	r6
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	d106      	bne.n	8008702 <__sflush_r+0x62>
 80086f4:	6829      	ldr	r1, [r5, #0]
 80086f6:	291d      	cmp	r1, #29
 80086f8:	d82b      	bhi.n	8008752 <__sflush_r+0xb2>
 80086fa:	4a2a      	ldr	r2, [pc, #168]	@ (80087a4 <__sflush_r+0x104>)
 80086fc:	410a      	asrs	r2, r1
 80086fe:	07d6      	lsls	r6, r2, #31
 8008700:	d427      	bmi.n	8008752 <__sflush_r+0xb2>
 8008702:	2200      	movs	r2, #0
 8008704:	6062      	str	r2, [r4, #4]
 8008706:	04d9      	lsls	r1, r3, #19
 8008708:	6922      	ldr	r2, [r4, #16]
 800870a:	6022      	str	r2, [r4, #0]
 800870c:	d504      	bpl.n	8008718 <__sflush_r+0x78>
 800870e:	1c42      	adds	r2, r0, #1
 8008710:	d101      	bne.n	8008716 <__sflush_r+0x76>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	b903      	cbnz	r3, 8008718 <__sflush_r+0x78>
 8008716:	6560      	str	r0, [r4, #84]	@ 0x54
 8008718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800871a:	602f      	str	r7, [r5, #0]
 800871c:	b1b9      	cbz	r1, 800874e <__sflush_r+0xae>
 800871e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008722:	4299      	cmp	r1, r3
 8008724:	d002      	beq.n	800872c <__sflush_r+0x8c>
 8008726:	4628      	mov	r0, r5
 8008728:	f7fe fbd2 	bl	8006ed0 <_free_r>
 800872c:	2300      	movs	r3, #0
 800872e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008730:	e00d      	b.n	800874e <__sflush_r+0xae>
 8008732:	2301      	movs	r3, #1
 8008734:	4628      	mov	r0, r5
 8008736:	47b0      	blx	r6
 8008738:	4602      	mov	r2, r0
 800873a:	1c50      	adds	r0, r2, #1
 800873c:	d1c9      	bne.n	80086d2 <__sflush_r+0x32>
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0c6      	beq.n	80086d2 <__sflush_r+0x32>
 8008744:	2b1d      	cmp	r3, #29
 8008746:	d001      	beq.n	800874c <__sflush_r+0xac>
 8008748:	2b16      	cmp	r3, #22
 800874a:	d11e      	bne.n	800878a <__sflush_r+0xea>
 800874c:	602f      	str	r7, [r5, #0]
 800874e:	2000      	movs	r0, #0
 8008750:	e022      	b.n	8008798 <__sflush_r+0xf8>
 8008752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008756:	b21b      	sxth	r3, r3
 8008758:	e01b      	b.n	8008792 <__sflush_r+0xf2>
 800875a:	690f      	ldr	r7, [r1, #16]
 800875c:	2f00      	cmp	r7, #0
 800875e:	d0f6      	beq.n	800874e <__sflush_r+0xae>
 8008760:	0793      	lsls	r3, r2, #30
 8008762:	680e      	ldr	r6, [r1, #0]
 8008764:	bf08      	it	eq
 8008766:	694b      	ldreq	r3, [r1, #20]
 8008768:	600f      	str	r7, [r1, #0]
 800876a:	bf18      	it	ne
 800876c:	2300      	movne	r3, #0
 800876e:	eba6 0807 	sub.w	r8, r6, r7
 8008772:	608b      	str	r3, [r1, #8]
 8008774:	f1b8 0f00 	cmp.w	r8, #0
 8008778:	dde9      	ble.n	800874e <__sflush_r+0xae>
 800877a:	6a21      	ldr	r1, [r4, #32]
 800877c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800877e:	4643      	mov	r3, r8
 8008780:	463a      	mov	r2, r7
 8008782:	4628      	mov	r0, r5
 8008784:	47b0      	blx	r6
 8008786:	2800      	cmp	r0, #0
 8008788:	dc08      	bgt.n	800879c <__sflush_r+0xfc>
 800878a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800878e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008792:	81a3      	strh	r3, [r4, #12]
 8008794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800879c:	4407      	add	r7, r0
 800879e:	eba8 0800 	sub.w	r8, r8, r0
 80087a2:	e7e7      	b.n	8008774 <__sflush_r+0xd4>
 80087a4:	dfbffffe 	.word	0xdfbffffe

080087a8 <_fflush_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	690b      	ldr	r3, [r1, #16]
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	b913      	cbnz	r3, 80087b8 <_fflush_r+0x10>
 80087b2:	2500      	movs	r5, #0
 80087b4:	4628      	mov	r0, r5
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	b118      	cbz	r0, 80087c2 <_fflush_r+0x1a>
 80087ba:	6a03      	ldr	r3, [r0, #32]
 80087bc:	b90b      	cbnz	r3, 80087c2 <_fflush_r+0x1a>
 80087be:	f7fe fa33 	bl	8006c28 <__sinit>
 80087c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0f3      	beq.n	80087b2 <_fflush_r+0xa>
 80087ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087cc:	07d0      	lsls	r0, r2, #31
 80087ce:	d404      	bmi.n	80087da <_fflush_r+0x32>
 80087d0:	0599      	lsls	r1, r3, #22
 80087d2:	d402      	bmi.n	80087da <_fflush_r+0x32>
 80087d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087d6:	f7fe fb60 	bl	8006e9a <__retarget_lock_acquire_recursive>
 80087da:	4628      	mov	r0, r5
 80087dc:	4621      	mov	r1, r4
 80087de:	f7ff ff5f 	bl	80086a0 <__sflush_r>
 80087e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087e4:	07da      	lsls	r2, r3, #31
 80087e6:	4605      	mov	r5, r0
 80087e8:	d4e4      	bmi.n	80087b4 <_fflush_r+0xc>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	059b      	lsls	r3, r3, #22
 80087ee:	d4e1      	bmi.n	80087b4 <_fflush_r+0xc>
 80087f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087f2:	f7fe fb53 	bl	8006e9c <__retarget_lock_release_recursive>
 80087f6:	e7dd      	b.n	80087b4 <_fflush_r+0xc>

080087f8 <memmove>:
 80087f8:	4288      	cmp	r0, r1
 80087fa:	b510      	push	{r4, lr}
 80087fc:	eb01 0402 	add.w	r4, r1, r2
 8008800:	d902      	bls.n	8008808 <memmove+0x10>
 8008802:	4284      	cmp	r4, r0
 8008804:	4623      	mov	r3, r4
 8008806:	d807      	bhi.n	8008818 <memmove+0x20>
 8008808:	1e43      	subs	r3, r0, #1
 800880a:	42a1      	cmp	r1, r4
 800880c:	d008      	beq.n	8008820 <memmove+0x28>
 800880e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008816:	e7f8      	b.n	800880a <memmove+0x12>
 8008818:	4402      	add	r2, r0
 800881a:	4601      	mov	r1, r0
 800881c:	428a      	cmp	r2, r1
 800881e:	d100      	bne.n	8008822 <memmove+0x2a>
 8008820:	bd10      	pop	{r4, pc}
 8008822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800882a:	e7f7      	b.n	800881c <memmove+0x24>

0800882c <_sbrk_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d06      	ldr	r5, [pc, #24]	@ (8008848 <_sbrk_r+0x1c>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	602b      	str	r3, [r5, #0]
 8008838:	f7f8 ffc6 	bl	80017c8 <_sbrk>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	d102      	bne.n	8008846 <_sbrk_r+0x1a>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	b103      	cbz	r3, 8008846 <_sbrk_r+0x1a>
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	bd38      	pop	{r3, r4, r5, pc}
 8008848:	2000044c 	.word	0x2000044c

0800884c <__assert_func>:
 800884c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800884e:	4614      	mov	r4, r2
 8008850:	461a      	mov	r2, r3
 8008852:	4b09      	ldr	r3, [pc, #36]	@ (8008878 <__assert_func+0x2c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4605      	mov	r5, r0
 8008858:	68d8      	ldr	r0, [r3, #12]
 800885a:	b954      	cbnz	r4, 8008872 <__assert_func+0x26>
 800885c:	4b07      	ldr	r3, [pc, #28]	@ (800887c <__assert_func+0x30>)
 800885e:	461c      	mov	r4, r3
 8008860:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008864:	9100      	str	r1, [sp, #0]
 8008866:	462b      	mov	r3, r5
 8008868:	4905      	ldr	r1, [pc, #20]	@ (8008880 <__assert_func+0x34>)
 800886a:	f000 f857 	bl	800891c <fiprintf>
 800886e:	f000 f867 	bl	8008940 <abort>
 8008872:	4b04      	ldr	r3, [pc, #16]	@ (8008884 <__assert_func+0x38>)
 8008874:	e7f4      	b.n	8008860 <__assert_func+0x14>
 8008876:	bf00      	nop
 8008878:	20000184 	.word	0x20000184
 800887c:	0800928f 	.word	0x0800928f
 8008880:	08009261 	.word	0x08009261
 8008884:	08009254 	.word	0x08009254

08008888 <_calloc_r>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	fba1 5402 	umull	r5, r4, r1, r2
 800888e:	b93c      	cbnz	r4, 80088a0 <_calloc_r+0x18>
 8008890:	4629      	mov	r1, r5
 8008892:	f7fe fec3 	bl	800761c <_malloc_r>
 8008896:	4606      	mov	r6, r0
 8008898:	b928      	cbnz	r0, 80088a6 <_calloc_r+0x1e>
 800889a:	2600      	movs	r6, #0
 800889c:	4630      	mov	r0, r6
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	220c      	movs	r2, #12
 80088a2:	6002      	str	r2, [r0, #0]
 80088a4:	e7f9      	b.n	800889a <_calloc_r+0x12>
 80088a6:	462a      	mov	r2, r5
 80088a8:	4621      	mov	r1, r4
 80088aa:	f7fe fa6a 	bl	8006d82 <memset>
 80088ae:	e7f5      	b.n	800889c <_calloc_r+0x14>

080088b0 <malloc>:
 80088b0:	4b02      	ldr	r3, [pc, #8]	@ (80088bc <malloc+0xc>)
 80088b2:	4601      	mov	r1, r0
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	f7fe beb1 	b.w	800761c <_malloc_r>
 80088ba:	bf00      	nop
 80088bc:	20000184 	.word	0x20000184

080088c0 <_realloc_r>:
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	4680      	mov	r8, r0
 80088c6:	4615      	mov	r5, r2
 80088c8:	460c      	mov	r4, r1
 80088ca:	b921      	cbnz	r1, 80088d6 <_realloc_r+0x16>
 80088cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d0:	4611      	mov	r1, r2
 80088d2:	f7fe bea3 	b.w	800761c <_malloc_r>
 80088d6:	b92a      	cbnz	r2, 80088e4 <_realloc_r+0x24>
 80088d8:	f7fe fafa 	bl	8006ed0 <_free_r>
 80088dc:	2400      	movs	r4, #0
 80088de:	4620      	mov	r0, r4
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	f000 f833 	bl	800894e <_malloc_usable_size_r>
 80088e8:	4285      	cmp	r5, r0
 80088ea:	4606      	mov	r6, r0
 80088ec:	d802      	bhi.n	80088f4 <_realloc_r+0x34>
 80088ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088f2:	d8f4      	bhi.n	80088de <_realloc_r+0x1e>
 80088f4:	4629      	mov	r1, r5
 80088f6:	4640      	mov	r0, r8
 80088f8:	f7fe fe90 	bl	800761c <_malloc_r>
 80088fc:	4607      	mov	r7, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0ec      	beq.n	80088dc <_realloc_r+0x1c>
 8008902:	42b5      	cmp	r5, r6
 8008904:	462a      	mov	r2, r5
 8008906:	4621      	mov	r1, r4
 8008908:	bf28      	it	cs
 800890a:	4632      	movcs	r2, r6
 800890c:	f7fe fac7 	bl	8006e9e <memcpy>
 8008910:	4621      	mov	r1, r4
 8008912:	4640      	mov	r0, r8
 8008914:	f7fe fadc 	bl	8006ed0 <_free_r>
 8008918:	463c      	mov	r4, r7
 800891a:	e7e0      	b.n	80088de <_realloc_r+0x1e>

0800891c <fiprintf>:
 800891c:	b40e      	push	{r1, r2, r3}
 800891e:	b503      	push	{r0, r1, lr}
 8008920:	4601      	mov	r1, r0
 8008922:	ab03      	add	r3, sp, #12
 8008924:	4805      	ldr	r0, [pc, #20]	@ (800893c <fiprintf+0x20>)
 8008926:	f853 2b04 	ldr.w	r2, [r3], #4
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	9301      	str	r3, [sp, #4]
 800892e:	f000 f83f 	bl	80089b0 <_vfiprintf_r>
 8008932:	b002      	add	sp, #8
 8008934:	f85d eb04 	ldr.w	lr, [sp], #4
 8008938:	b003      	add	sp, #12
 800893a:	4770      	bx	lr
 800893c:	20000184 	.word	0x20000184

08008940 <abort>:
 8008940:	b508      	push	{r3, lr}
 8008942:	2006      	movs	r0, #6
 8008944:	f000 fa08 	bl	8008d58 <raise>
 8008948:	2001      	movs	r0, #1
 800894a:	f7f8 fec5 	bl	80016d8 <_exit>

0800894e <_malloc_usable_size_r>:
 800894e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008952:	1f18      	subs	r0, r3, #4
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfbc      	itt	lt
 8008958:	580b      	ldrlt	r3, [r1, r0]
 800895a:	18c0      	addlt	r0, r0, r3
 800895c:	4770      	bx	lr

0800895e <__sfputc_r>:
 800895e:	6893      	ldr	r3, [r2, #8]
 8008960:	3b01      	subs	r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	b410      	push	{r4}
 8008966:	6093      	str	r3, [r2, #8]
 8008968:	da08      	bge.n	800897c <__sfputc_r+0x1e>
 800896a:	6994      	ldr	r4, [r2, #24]
 800896c:	42a3      	cmp	r3, r4
 800896e:	db01      	blt.n	8008974 <__sfputc_r+0x16>
 8008970:	290a      	cmp	r1, #10
 8008972:	d103      	bne.n	800897c <__sfputc_r+0x1e>
 8008974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008978:	f000 b932 	b.w	8008be0 <__swbuf_r>
 800897c:	6813      	ldr	r3, [r2, #0]
 800897e:	1c58      	adds	r0, r3, #1
 8008980:	6010      	str	r0, [r2, #0]
 8008982:	7019      	strb	r1, [r3, #0]
 8008984:	4608      	mov	r0, r1
 8008986:	f85d 4b04 	ldr.w	r4, [sp], #4
 800898a:	4770      	bx	lr

0800898c <__sfputs_r>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	4614      	mov	r4, r2
 8008994:	18d5      	adds	r5, r2, r3
 8008996:	42ac      	cmp	r4, r5
 8008998:	d101      	bne.n	800899e <__sfputs_r+0x12>
 800899a:	2000      	movs	r0, #0
 800899c:	e007      	b.n	80089ae <__sfputs_r+0x22>
 800899e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a2:	463a      	mov	r2, r7
 80089a4:	4630      	mov	r0, r6
 80089a6:	f7ff ffda 	bl	800895e <__sfputc_r>
 80089aa:	1c43      	adds	r3, r0, #1
 80089ac:	d1f3      	bne.n	8008996 <__sfputs_r+0xa>
 80089ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089b0 <_vfiprintf_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	460d      	mov	r5, r1
 80089b6:	b09d      	sub	sp, #116	@ 0x74
 80089b8:	4614      	mov	r4, r2
 80089ba:	4698      	mov	r8, r3
 80089bc:	4606      	mov	r6, r0
 80089be:	b118      	cbz	r0, 80089c8 <_vfiprintf_r+0x18>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <_vfiprintf_r+0x18>
 80089c4:	f7fe f930 	bl	8006c28 <__sinit>
 80089c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089ca:	07d9      	lsls	r1, r3, #31
 80089cc:	d405      	bmi.n	80089da <_vfiprintf_r+0x2a>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	059a      	lsls	r2, r3, #22
 80089d2:	d402      	bmi.n	80089da <_vfiprintf_r+0x2a>
 80089d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089d6:	f7fe fa60 	bl	8006e9a <__retarget_lock_acquire_recursive>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	071b      	lsls	r3, r3, #28
 80089de:	d501      	bpl.n	80089e4 <_vfiprintf_r+0x34>
 80089e0:	692b      	ldr	r3, [r5, #16]
 80089e2:	b99b      	cbnz	r3, 8008a0c <_vfiprintf_r+0x5c>
 80089e4:	4629      	mov	r1, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f938 	bl	8008c5c <__swsetup_r>
 80089ec:	b170      	cbz	r0, 8008a0c <_vfiprintf_r+0x5c>
 80089ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f0:	07dc      	lsls	r4, r3, #31
 80089f2:	d504      	bpl.n	80089fe <_vfiprintf_r+0x4e>
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089f8:	b01d      	add	sp, #116	@ 0x74
 80089fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fe:	89ab      	ldrh	r3, [r5, #12]
 8008a00:	0598      	lsls	r0, r3, #22
 8008a02:	d4f7      	bmi.n	80089f4 <_vfiprintf_r+0x44>
 8008a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a06:	f7fe fa49 	bl	8006e9c <__retarget_lock_release_recursive>
 8008a0a:	e7f3      	b.n	80089f4 <_vfiprintf_r+0x44>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a10:	2320      	movs	r3, #32
 8008a12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a1a:	2330      	movs	r3, #48	@ 0x30
 8008a1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bcc <_vfiprintf_r+0x21c>
 8008a20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a24:	f04f 0901 	mov.w	r9, #1
 8008a28:	4623      	mov	r3, r4
 8008a2a:	469a      	mov	sl, r3
 8008a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a30:	b10a      	cbz	r2, 8008a36 <_vfiprintf_r+0x86>
 8008a32:	2a25      	cmp	r2, #37	@ 0x25
 8008a34:	d1f9      	bne.n	8008a2a <_vfiprintf_r+0x7a>
 8008a36:	ebba 0b04 	subs.w	fp, sl, r4
 8008a3a:	d00b      	beq.n	8008a54 <_vfiprintf_r+0xa4>
 8008a3c:	465b      	mov	r3, fp
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff ffa2 	bl	800898c <__sfputs_r>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	f000 80a7 	beq.w	8008b9c <_vfiprintf_r+0x1ec>
 8008a4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a50:	445a      	add	r2, fp
 8008a52:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a54:	f89a 3000 	ldrb.w	r3, [sl]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 809f 	beq.w	8008b9c <_vfiprintf_r+0x1ec>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a68:	f10a 0a01 	add.w	sl, sl, #1
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	9307      	str	r3, [sp, #28]
 8008a70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a74:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a76:	4654      	mov	r4, sl
 8008a78:	2205      	movs	r2, #5
 8008a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7e:	4853      	ldr	r0, [pc, #332]	@ (8008bcc <_vfiprintf_r+0x21c>)
 8008a80:	f7f7 fbae 	bl	80001e0 <memchr>
 8008a84:	9a04      	ldr	r2, [sp, #16]
 8008a86:	b9d8      	cbnz	r0, 8008ac0 <_vfiprintf_r+0x110>
 8008a88:	06d1      	lsls	r1, r2, #27
 8008a8a:	bf44      	itt	mi
 8008a8c:	2320      	movmi	r3, #32
 8008a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a92:	0713      	lsls	r3, r2, #28
 8008a94:	bf44      	itt	mi
 8008a96:	232b      	movmi	r3, #43	@ 0x2b
 8008a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aa2:	d015      	beq.n	8008ad0 <_vfiprintf_r+0x120>
 8008aa4:	9a07      	ldr	r2, [sp, #28]
 8008aa6:	4654      	mov	r4, sl
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f04f 0c0a 	mov.w	ip, #10
 8008aae:	4621      	mov	r1, r4
 8008ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab4:	3b30      	subs	r3, #48	@ 0x30
 8008ab6:	2b09      	cmp	r3, #9
 8008ab8:	d94b      	bls.n	8008b52 <_vfiprintf_r+0x1a2>
 8008aba:	b1b0      	cbz	r0, 8008aea <_vfiprintf_r+0x13a>
 8008abc:	9207      	str	r2, [sp, #28]
 8008abe:	e014      	b.n	8008aea <_vfiprintf_r+0x13a>
 8008ac0:	eba0 0308 	sub.w	r3, r0, r8
 8008ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	46a2      	mov	sl, r4
 8008ace:	e7d2      	b.n	8008a76 <_vfiprintf_r+0xc6>
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	1d19      	adds	r1, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	9103      	str	r1, [sp, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfbb      	ittet	lt
 8008adc:	425b      	neglt	r3, r3
 8008ade:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae2:	9307      	strge	r3, [sp, #28]
 8008ae4:	9307      	strlt	r3, [sp, #28]
 8008ae6:	bfb8      	it	lt
 8008ae8:	9204      	strlt	r2, [sp, #16]
 8008aea:	7823      	ldrb	r3, [r4, #0]
 8008aec:	2b2e      	cmp	r3, #46	@ 0x2e
 8008aee:	d10a      	bne.n	8008b06 <_vfiprintf_r+0x156>
 8008af0:	7863      	ldrb	r3, [r4, #1]
 8008af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af4:	d132      	bne.n	8008b5c <_vfiprintf_r+0x1ac>
 8008af6:	9b03      	ldr	r3, [sp, #12]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	9203      	str	r2, [sp, #12]
 8008afe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b02:	3402      	adds	r4, #2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008bdc <_vfiprintf_r+0x22c>
 8008b0a:	7821      	ldrb	r1, [r4, #0]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f7f7 fb66 	bl	80001e0 <memchr>
 8008b14:	b138      	cbz	r0, 8008b26 <_vfiprintf_r+0x176>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	eba0 000a 	sub.w	r0, r0, sl
 8008b1c:	2240      	movs	r2, #64	@ 0x40
 8008b1e:	4082      	lsls	r2, r0
 8008b20:	4313      	orrs	r3, r2
 8008b22:	3401      	adds	r4, #1
 8008b24:	9304      	str	r3, [sp, #16]
 8008b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2a:	4829      	ldr	r0, [pc, #164]	@ (8008bd0 <_vfiprintf_r+0x220>)
 8008b2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b30:	2206      	movs	r2, #6
 8008b32:	f7f7 fb55 	bl	80001e0 <memchr>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d03f      	beq.n	8008bba <_vfiprintf_r+0x20a>
 8008b3a:	4b26      	ldr	r3, [pc, #152]	@ (8008bd4 <_vfiprintf_r+0x224>)
 8008b3c:	bb1b      	cbnz	r3, 8008b86 <_vfiprintf_r+0x1d6>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	3307      	adds	r3, #7
 8008b42:	f023 0307 	bic.w	r3, r3, #7
 8008b46:	3308      	adds	r3, #8
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b4c:	443b      	add	r3, r7
 8008b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b50:	e76a      	b.n	8008a28 <_vfiprintf_r+0x78>
 8008b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b56:	460c      	mov	r4, r1
 8008b58:	2001      	movs	r0, #1
 8008b5a:	e7a8      	b.n	8008aae <_vfiprintf_r+0xfe>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	4619      	mov	r1, r3
 8008b64:	f04f 0c0a 	mov.w	ip, #10
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b6e:	3a30      	subs	r2, #48	@ 0x30
 8008b70:	2a09      	cmp	r2, #9
 8008b72:	d903      	bls.n	8008b7c <_vfiprintf_r+0x1cc>
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d0c6      	beq.n	8008b06 <_vfiprintf_r+0x156>
 8008b78:	9105      	str	r1, [sp, #20]
 8008b7a:	e7c4      	b.n	8008b06 <_vfiprintf_r+0x156>
 8008b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b80:	4604      	mov	r4, r0
 8008b82:	2301      	movs	r3, #1
 8008b84:	e7f0      	b.n	8008b68 <_vfiprintf_r+0x1b8>
 8008b86:	ab03      	add	r3, sp, #12
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	462a      	mov	r2, r5
 8008b8c:	4b12      	ldr	r3, [pc, #72]	@ (8008bd8 <_vfiprintf_r+0x228>)
 8008b8e:	a904      	add	r1, sp, #16
 8008b90:	4630      	mov	r0, r6
 8008b92:	f3af 8000 	nop.w
 8008b96:	4607      	mov	r7, r0
 8008b98:	1c78      	adds	r0, r7, #1
 8008b9a:	d1d6      	bne.n	8008b4a <_vfiprintf_r+0x19a>
 8008b9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b9e:	07d9      	lsls	r1, r3, #31
 8008ba0:	d405      	bmi.n	8008bae <_vfiprintf_r+0x1fe>
 8008ba2:	89ab      	ldrh	r3, [r5, #12]
 8008ba4:	059a      	lsls	r2, r3, #22
 8008ba6:	d402      	bmi.n	8008bae <_vfiprintf_r+0x1fe>
 8008ba8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008baa:	f7fe f977 	bl	8006e9c <__retarget_lock_release_recursive>
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	065b      	lsls	r3, r3, #25
 8008bb2:	f53f af1f 	bmi.w	80089f4 <_vfiprintf_r+0x44>
 8008bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb8:	e71e      	b.n	80089f8 <_vfiprintf_r+0x48>
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	462a      	mov	r2, r5
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <_vfiprintf_r+0x228>)
 8008bc2:	a904      	add	r1, sp, #16
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff fc4b 	bl	8008460 <_printf_i>
 8008bca:	e7e4      	b.n	8008b96 <_vfiprintf_r+0x1e6>
 8008bcc:	08009221 	.word	0x08009221
 8008bd0:	0800922b 	.word	0x0800922b
 8008bd4:	00000000 	.word	0x00000000
 8008bd8:	0800898d 	.word	0x0800898d
 8008bdc:	08009227 	.word	0x08009227

08008be0 <__swbuf_r>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	460e      	mov	r6, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	4605      	mov	r5, r0
 8008be8:	b118      	cbz	r0, 8008bf2 <__swbuf_r+0x12>
 8008bea:	6a03      	ldr	r3, [r0, #32]
 8008bec:	b90b      	cbnz	r3, 8008bf2 <__swbuf_r+0x12>
 8008bee:	f7fe f81b 	bl	8006c28 <__sinit>
 8008bf2:	69a3      	ldr	r3, [r4, #24]
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	071a      	lsls	r2, r3, #28
 8008bfa:	d501      	bpl.n	8008c00 <__swbuf_r+0x20>
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	b943      	cbnz	r3, 8008c12 <__swbuf_r+0x32>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 f82a 	bl	8008c5c <__swsetup_r>
 8008c08:	b118      	cbz	r0, 8008c12 <__swbuf_r+0x32>
 8008c0a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008c0e:	4638      	mov	r0, r7
 8008c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	6922      	ldr	r2, [r4, #16]
 8008c16:	1a98      	subs	r0, r3, r2
 8008c18:	6963      	ldr	r3, [r4, #20]
 8008c1a:	b2f6      	uxtb	r6, r6
 8008c1c:	4283      	cmp	r3, r0
 8008c1e:	4637      	mov	r7, r6
 8008c20:	dc05      	bgt.n	8008c2e <__swbuf_r+0x4e>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	f7ff fdbf 	bl	80087a8 <_fflush_r>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d1ed      	bne.n	8008c0a <__swbuf_r+0x2a>
 8008c2e:	68a3      	ldr	r3, [r4, #8]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	60a3      	str	r3, [r4, #8]
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	6022      	str	r2, [r4, #0]
 8008c3a:	701e      	strb	r6, [r3, #0]
 8008c3c:	6962      	ldr	r2, [r4, #20]
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d004      	beq.n	8008c4e <__swbuf_r+0x6e>
 8008c44:	89a3      	ldrh	r3, [r4, #12]
 8008c46:	07db      	lsls	r3, r3, #31
 8008c48:	d5e1      	bpl.n	8008c0e <__swbuf_r+0x2e>
 8008c4a:	2e0a      	cmp	r6, #10
 8008c4c:	d1df      	bne.n	8008c0e <__swbuf_r+0x2e>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff fda9 	bl	80087a8 <_fflush_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0d9      	beq.n	8008c0e <__swbuf_r+0x2e>
 8008c5a:	e7d6      	b.n	8008c0a <__swbuf_r+0x2a>

08008c5c <__swsetup_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4b29      	ldr	r3, [pc, #164]	@ (8008d04 <__swsetup_r+0xa8>)
 8008c60:	4605      	mov	r5, r0
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	460c      	mov	r4, r1
 8008c66:	b118      	cbz	r0, 8008c70 <__swsetup_r+0x14>
 8008c68:	6a03      	ldr	r3, [r0, #32]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <__swsetup_r+0x14>
 8008c6c:	f7fd ffdc 	bl	8006c28 <__sinit>
 8008c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c74:	0719      	lsls	r1, r3, #28
 8008c76:	d422      	bmi.n	8008cbe <__swsetup_r+0x62>
 8008c78:	06da      	lsls	r2, r3, #27
 8008c7a:	d407      	bmi.n	8008c8c <__swsetup_r+0x30>
 8008c7c:	2209      	movs	r2, #9
 8008c7e:	602a      	str	r2, [r5, #0]
 8008c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c84:	81a3      	strh	r3, [r4, #12]
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c8a:	e033      	b.n	8008cf4 <__swsetup_r+0x98>
 8008c8c:	0758      	lsls	r0, r3, #29
 8008c8e:	d512      	bpl.n	8008cb6 <__swsetup_r+0x5a>
 8008c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c92:	b141      	cbz	r1, 8008ca6 <__swsetup_r+0x4a>
 8008c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	d002      	beq.n	8008ca2 <__swsetup_r+0x46>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	f7fe f917 	bl	8006ed0 <_free_r>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	6063      	str	r3, [r4, #4]
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f043 0308 	orr.w	r3, r3, #8
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	b94b      	cbnz	r3, 8008cd6 <__swsetup_r+0x7a>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ccc:	d003      	beq.n	8008cd6 <__swsetup_r+0x7a>
 8008cce:	4621      	mov	r1, r4
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 f883 	bl	8008ddc <__smakebuf_r>
 8008cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cda:	f013 0201 	ands.w	r2, r3, #1
 8008cde:	d00a      	beq.n	8008cf6 <__swsetup_r+0x9a>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	60a2      	str	r2, [r4, #8]
 8008ce4:	6962      	ldr	r2, [r4, #20]
 8008ce6:	4252      	negs	r2, r2
 8008ce8:	61a2      	str	r2, [r4, #24]
 8008cea:	6922      	ldr	r2, [r4, #16]
 8008cec:	b942      	cbnz	r2, 8008d00 <__swsetup_r+0xa4>
 8008cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008cf2:	d1c5      	bne.n	8008c80 <__swsetup_r+0x24>
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	0799      	lsls	r1, r3, #30
 8008cf8:	bf58      	it	pl
 8008cfa:	6962      	ldrpl	r2, [r4, #20]
 8008cfc:	60a2      	str	r2, [r4, #8]
 8008cfe:	e7f4      	b.n	8008cea <__swsetup_r+0x8e>
 8008d00:	2000      	movs	r0, #0
 8008d02:	e7f7      	b.n	8008cf4 <__swsetup_r+0x98>
 8008d04:	20000184 	.word	0x20000184

08008d08 <_raise_r>:
 8008d08:	291f      	cmp	r1, #31
 8008d0a:	b538      	push	{r3, r4, r5, lr}
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	d904      	bls.n	8008d1c <_raise_r+0x14>
 8008d12:	2316      	movs	r3, #22
 8008d14:	6003      	str	r3, [r0, #0]
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d1a:	bd38      	pop	{r3, r4, r5, pc}
 8008d1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d1e:	b112      	cbz	r2, 8008d26 <_raise_r+0x1e>
 8008d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d24:	b94b      	cbnz	r3, 8008d3a <_raise_r+0x32>
 8008d26:	4628      	mov	r0, r5
 8008d28:	f000 f830 	bl	8008d8c <_getpid_r>
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	4601      	mov	r1, r0
 8008d30:	4628      	mov	r0, r5
 8008d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d36:	f000 b817 	b.w	8008d68 <_kill_r>
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d00a      	beq.n	8008d54 <_raise_r+0x4c>
 8008d3e:	1c59      	adds	r1, r3, #1
 8008d40:	d103      	bne.n	8008d4a <_raise_r+0x42>
 8008d42:	2316      	movs	r3, #22
 8008d44:	6003      	str	r3, [r0, #0]
 8008d46:	2001      	movs	r0, #1
 8008d48:	e7e7      	b.n	8008d1a <_raise_r+0x12>
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d50:	4620      	mov	r0, r4
 8008d52:	4798      	blx	r3
 8008d54:	2000      	movs	r0, #0
 8008d56:	e7e0      	b.n	8008d1a <_raise_r+0x12>

08008d58 <raise>:
 8008d58:	4b02      	ldr	r3, [pc, #8]	@ (8008d64 <raise+0xc>)
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	f7ff bfd3 	b.w	8008d08 <_raise_r>
 8008d62:	bf00      	nop
 8008d64:	20000184 	.word	0x20000184

08008d68 <_kill_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d07      	ldr	r5, [pc, #28]	@ (8008d88 <_kill_r+0x20>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	4611      	mov	r1, r2
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	f7f8 fc9f 	bl	80016b8 <_kill>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	d102      	bne.n	8008d84 <_kill_r+0x1c>
 8008d7e:	682b      	ldr	r3, [r5, #0]
 8008d80:	b103      	cbz	r3, 8008d84 <_kill_r+0x1c>
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	bd38      	pop	{r3, r4, r5, pc}
 8008d86:	bf00      	nop
 8008d88:	2000044c 	.word	0x2000044c

08008d8c <_getpid_r>:
 8008d8c:	f7f8 bc8c 	b.w	80016a8 <_getpid>

08008d90 <__swhatbuf_r>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	460c      	mov	r4, r1
 8008d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	b096      	sub	sp, #88	@ 0x58
 8008d9c:	4615      	mov	r5, r2
 8008d9e:	461e      	mov	r6, r3
 8008da0:	da0d      	bge.n	8008dbe <__swhatbuf_r+0x2e>
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008da8:	f04f 0100 	mov.w	r1, #0
 8008dac:	bf14      	ite	ne
 8008dae:	2340      	movne	r3, #64	@ 0x40
 8008db0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008db4:	2000      	movs	r0, #0
 8008db6:	6031      	str	r1, [r6, #0]
 8008db8:	602b      	str	r3, [r5, #0]
 8008dba:	b016      	add	sp, #88	@ 0x58
 8008dbc:	bd70      	pop	{r4, r5, r6, pc}
 8008dbe:	466a      	mov	r2, sp
 8008dc0:	f000 f848 	bl	8008e54 <_fstat_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	dbec      	blt.n	8008da2 <__swhatbuf_r+0x12>
 8008dc8:	9901      	ldr	r1, [sp, #4]
 8008dca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dd2:	4259      	negs	r1, r3
 8008dd4:	4159      	adcs	r1, r3
 8008dd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dda:	e7eb      	b.n	8008db4 <__swhatbuf_r+0x24>

08008ddc <__smakebuf_r>:
 8008ddc:	898b      	ldrh	r3, [r1, #12]
 8008dde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de0:	079d      	lsls	r5, r3, #30
 8008de2:	4606      	mov	r6, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	d507      	bpl.n	8008df8 <__smakebuf_r+0x1c>
 8008de8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	6123      	str	r3, [r4, #16]
 8008df0:	2301      	movs	r3, #1
 8008df2:	6163      	str	r3, [r4, #20]
 8008df4:	b003      	add	sp, #12
 8008df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df8:	ab01      	add	r3, sp, #4
 8008dfa:	466a      	mov	r2, sp
 8008dfc:	f7ff ffc8 	bl	8008d90 <__swhatbuf_r>
 8008e00:	9f00      	ldr	r7, [sp, #0]
 8008e02:	4605      	mov	r5, r0
 8008e04:	4639      	mov	r1, r7
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7fe fc08 	bl	800761c <_malloc_r>
 8008e0c:	b948      	cbnz	r0, 8008e22 <__smakebuf_r+0x46>
 8008e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e12:	059a      	lsls	r2, r3, #22
 8008e14:	d4ee      	bmi.n	8008df4 <__smakebuf_r+0x18>
 8008e16:	f023 0303 	bic.w	r3, r3, #3
 8008e1a:	f043 0302 	orr.w	r3, r3, #2
 8008e1e:	81a3      	strh	r3, [r4, #12]
 8008e20:	e7e2      	b.n	8008de8 <__smakebuf_r+0xc>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	6020      	str	r0, [r4, #0]
 8008e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e32:	b15b      	cbz	r3, 8008e4c <__smakebuf_r+0x70>
 8008e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 f81d 	bl	8008e78 <_isatty_r>
 8008e3e:	b128      	cbz	r0, 8008e4c <__smakebuf_r+0x70>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f023 0303 	bic.w	r3, r3, #3
 8008e46:	f043 0301 	orr.w	r3, r3, #1
 8008e4a:	81a3      	strh	r3, [r4, #12]
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	431d      	orrs	r5, r3
 8008e50:	81a5      	strh	r5, [r4, #12]
 8008e52:	e7cf      	b.n	8008df4 <__smakebuf_r+0x18>

08008e54 <_fstat_r>:
 8008e54:	b538      	push	{r3, r4, r5, lr}
 8008e56:	4d07      	ldr	r5, [pc, #28]	@ (8008e74 <_fstat_r+0x20>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4608      	mov	r0, r1
 8008e5e:	4611      	mov	r1, r2
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	f7f8 fc89 	bl	8001778 <_fstat>
 8008e66:	1c43      	adds	r3, r0, #1
 8008e68:	d102      	bne.n	8008e70 <_fstat_r+0x1c>
 8008e6a:	682b      	ldr	r3, [r5, #0]
 8008e6c:	b103      	cbz	r3, 8008e70 <_fstat_r+0x1c>
 8008e6e:	6023      	str	r3, [r4, #0]
 8008e70:	bd38      	pop	{r3, r4, r5, pc}
 8008e72:	bf00      	nop
 8008e74:	2000044c 	.word	0x2000044c

08008e78 <_isatty_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	@ (8008e94 <_isatty_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7f8 fc88 	bl	8001798 <_isatty>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_isatty_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_isatty_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	2000044c 	.word	0x2000044c

08008e98 <_init>:
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9a:	bf00      	nop
 8008e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e9e:	bc08      	pop	{r3}
 8008ea0:	469e      	mov	lr, r3
 8008ea2:	4770      	bx	lr

08008ea4 <_fini>:
 8008ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea6:	bf00      	nop
 8008ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eaa:	bc08      	pop	{r3}
 8008eac:	469e      	mov	lr, r3
 8008eae:	4770      	bx	lr
